apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: workflow2
  name: workflow2
spec:
  replicas: 1
  selector:
    matchLabels:
      run: workflow2
  template:
    metadata:
      labels:
        run: workflow2
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      # workflow ui
      - image: gcr.io/liveramp-eng/workflow2_ui
        name: workflow2-ui
        imagePullPolicy: "Always"
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: workflowui-creds
          mountPath: /apps/secrets/workflow_svc
          readOnly: true
      # workflow monitor
      - image: gcr.io/liveramp-eng/workflow2_monitor
        name: workflow2-monitor
        imagePullPolicy: "Always"
        volumeMounts:
        - name: workflowui-creds
          mountPath: /apps/secrets/workflow_svc
          readOnly: true
      # proxy with access to the cloud sql instance
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.11
        command: ["/cloud_sql_proxy",
                  "-instances=liveramp-eng:us-central1:bdi-workflow-dbs=tcp:3306",
                  "-credential_file=/apps/secrets/cloudsql/credentials.json"]
        securityContext:
          runAsUser: 2
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: cloudsql-credentials
          mountPath: /apps/secrets/cloudsql
          readOnly: true
      # nginx can do reverse proxying handles the ssl
      - image: nginx:1.15
        name: nginx
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 443
        - containerPort: 8081
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: nginx-conf
        - mountPath: /apps/secrets/liveramp-net
          name: liveramp-net-certs
      # run database migrations before starting the uis
      initContainers:
      - image: gcr.io/liveramp-eng/workflow2_db
        name: workflow2-db
        volumeMounts:
        - name: workflowdb-creds
          mountPath: /apps/secrets/workflow_db
          readOnly: true
      volumes:
      # DB credentials for the migration user -- eg, database.yml
      - name: workflowdb-creds
        secret:
          secretName: workflow2-workflowdb-config
      # DB credentials for the ui for the jetty and prod dbs -- environment.yml and database.yml
      - name: workflowui-creds
        secret:
          secretName: workflow2-workflowui-config
      # service account key so the sql proxy can connect
      - name: cloudsql-credentials
        secret:
          secretName: workflow2-cloudsql-proxy-credentials
      # certs for *.liveramp.net
      - name: liveramp-net-certs
        secret:
          secretName: tls-secret-liveramp-net
      # simple nginx config
      - name: nginx-conf
        configMap:
          name: workflow-nginx-conf
---
# the service itself
kind: Service
apiVersion: v1
metadata:
  name: workflow2
  labels:
    run: workflow2
  annotations:
    cloud.google.com/load-balancer-type: "Internal"
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 10.0.0.0/8
  selector:
    run: workflow2
  ports:
  - port: 80
    targetPort: 8081
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
---
# configmap for nginx ssl
kind: ConfigMap
apiVersion: v1
metadata:
  name: workflow-nginx-conf
data:
  workflow.conf: |

    upstream workflows {
        server 0.0.0.0:8080;
        keepalive 64;
    }

    server {
        listen       8081;
        server_name  _;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443;
        server_name _;

        ssl on;
        ssl_certificate /apps/secrets/liveramp-net/tls.crt;
        ssl_certificate_key /apps/secrets/liveramp-net/tls.key;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1.2 TLSv1.1 TLSv1;

        location / {
            proxy_pass http://workflows;
            proxy_http_version     1.1;
        }

    }
