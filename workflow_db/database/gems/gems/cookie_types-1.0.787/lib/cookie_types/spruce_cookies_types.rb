#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'new_person_data_types'
require 'abilitec_types'
require 'custom_id_types'
require 'spruce_types'


module Liveramp
  module CookieTypes
    module Cookie
      class RotationCookie; end

      class ReaderRotationCookie; end

      class LiveRampCookie; end

      # Rotation cookie is used to store adnetwork accounts for which segments
# have been dropped on a browser. This is used to reprioritize
# which segments to drop next.
      class RotationCookie
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AD_NETWORK_ACCOUNT_IDS = 1
        COOKIED_MONTH = 2
        ANA_DIGESTS = 3
        ANA_RESPONSES_THIS_MONTH = 4
        COOKIED_DAY_OF_MONTH = 5
        ANA_RESPONSES_THIS_DAY = 6
        LAST_ANA_RESPONSE_TIMES = 7

        FIELDS = {
          AD_NETWORK_ACCOUNT_IDS => {:type => ::Thrift::Types::SET, :name => 'ad_network_account_ids', :element => {:type => ::Thrift::Types::I32}, :optional => true},
          COOKIED_MONTH => {:type => ::Thrift::Types::I32, :name => 'cookied_month', :optional => true},
          # A map from ana id to the hash digest
# of the internal segment instances for it
          ANA_DIGESTS => {:type => ::Thrift::Types::MAP, :name => 'ana_digests', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I32}, :optional => true},
          # A map from ana id to the number of responses in
# the past month for that ana for the
# most recent data.
          ANA_RESPONSES_THIS_MONTH => {:type => ::Thrift::Types::MAP, :name => 'ana_responses_this_month', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I32}, :optional => true},
          COOKIED_DAY_OF_MONTH => {:type => ::Thrift::Types::I32, :name => 'cookied_day_of_month', :optional => true},
          # A map from ana id to the number of responses in
# the past day for that ana for the
# most recent data.
          ANA_RESPONSES_THIS_DAY => {:type => ::Thrift::Types::MAP, :name => 'ana_responses_this_day', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I32}, :optional => true},
          # A map from ana id to the last time in seconds
# that we returned a response for this ana.
          LAST_ANA_RESPONSE_TIMES => {:type => ::Thrift::Types::MAP, :name => 'last_ana_response_times', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I32}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Reader rotation cookie is used to store reader ids for which segments
# have been dropped on a browser. This is used to decide
# whether we should return data, redirect the request to treat
# it as a publisher, or do nothing.
      class ReaderRotationCookie
        include ::Thrift::Struct, ::Thrift::Struct_Union
        READER_IDS = 1
        COOKIED_MONTH = 2

        FIELDS = {
          READER_IDS => {:type => ::Thrift::Types::SET, :name => 'reader_ids', :element => {:type => ::Thrift::Types::I32}},
          COOKIED_MONTH => {:type => ::Thrift::Types::I32, :name => 'cookied_month'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reader_ids is unset!') unless @reader_ids
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cookied_month is unset!') unless @cookied_month
        end

        ::Thrift::Struct.generate_accessors self
      end

      # LiveRamp Cookie is used to store the md5 hashed eid of the
# entity along with a timestamp of when we cookied the entity.
      class LiveRampCookie
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_COOKIED_AT = 2
        LAST_COOKIED_AT = 3
        COOKIE_ID = 5
        HEID_BY_SUBNETWORKS = 8
        ARL_BY_SUBNETWORKS = 13
        PEL_BY_SUBNETWORKS = 16
        HEID = 1
        COOKIE_SOURCE = 4
        HM = 6
        HS = 7
        SUPER_COOKIE_HEID_BY_SUBNETWORKS = 9
        SUPER_COOKIE_CLEANED = 10
        SUPER_COOKIE_COOKIE_ID = 11
        LAST_PUBLISHER_MATCH_BY_SUBNETWORKS = 12
        HS256 = 14
        IPEL = 15

        FIELDS = {
          FIRST_COOKIED_AT => {:type => ::Thrift::Types::I32, :name => 'first_cookied_at'},
          LAST_COOKIED_AT => {:type => ::Thrift::Types::I32, :name => 'last_cookied_at'},
          COOKIE_ID => {:type => ::Thrift::Types::STRING, :name => 'cookie_id', :binary => true, :optional => true},
          HEID_BY_SUBNETWORKS => {:type => ::Thrift::Types::MAP, :name => 'heid_by_subnetworks', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::Spruce::MatchedHeid}, :optional => true},
          ARL_BY_SUBNETWORKS => {:type => ::Thrift::Types::MAP, :name => 'arl_by_subnetworks', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Abilitec::Arl}, :optional => true},
          PEL_BY_SUBNETWORKS => {:type => ::Thrift::Types::MAP, :name => 'pel_by_subnetworks', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::CustomId::CustomId}, :optional => true},
          HEID => {:type => ::Thrift::Types::STRING, :name => 'heid', :binary => true, :optional => true},
          COOKIE_SOURCE => {:type => ::Thrift::Types::I32, :name => 'cookie_source', :optional => true, :enum_class => ::Rapleaf::Types::Spruce::LiveRampDeviceIdSource},
          HM => {:type => ::Thrift::Types::STRING, :name => 'hm', :binary => true, :optional => true},
          HS => {:type => ::Thrift::Types::STRING, :name => 'hs', :binary => true, :optional => true},
          SUPER_COOKIE_HEID_BY_SUBNETWORKS => {:type => ::Thrift::Types::MAP, :name => 'super_cookie_heid_by_subnetworks', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::Spruce::MatchedHeid}, :optional => true},
          SUPER_COOKIE_CLEANED => {:type => ::Thrift::Types::BOOL, :name => 'super_cookie_cleaned', :optional => true},
          SUPER_COOKIE_COOKIE_ID => {:type => ::Thrift::Types::STRING, :name => 'super_cookie_cookie_id', :binary => true, :optional => true},
          LAST_PUBLISHER_MATCH_BY_SUBNETWORKS => {:type => ::Thrift::Types::MAP, :name => 'last_publisher_match_by_subnetworks', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::Spruce::LastPublisherMatch}, :optional => true},
          HS256 => {:type => ::Thrift::Types::STRING, :name => 'hs256', :binary => true, :optional => true},
          IPEL => {:type => ::Thrift::Types::STRUCT, :name => 'ipel', :class => ::Liveramp::Types::CustomId::CustomId, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field first_cookied_at is unset!') unless @first_cookied_at
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field last_cookied_at is unset!') unless @last_cookied_at
          unless @cookie_source.nil? || ::Rapleaf::Types::Spruce::LiveRampDeviceIdSource::VALID_VALUES.include?(@cookie_source)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field cookie_source!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
