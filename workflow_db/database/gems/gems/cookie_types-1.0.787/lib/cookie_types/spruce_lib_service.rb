#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'spruce_lib_service_types'

module Rapleaf
  module SpruceLib
    module SpruceLibService
      module SpruceLibService
        class Client
          include ::Thrift::Client

          def get_snapshot_id()
            send_get_snapshot_id()
            return recv_get_snapshot_id()
          end

          def send_get_snapshot_id()
            send_message('get_snapshot_id', Get_snapshot_id_args)
          end

          def recv_get_snapshot_id()
            result = receive_message(Get_snapshot_id_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_snapshot_id failed: unknown result')
          end

          def simulate_referrer_request(request)
            send_simulate_referrer_request(request)
            return recv_simulate_referrer_request()
          end

          def send_simulate_referrer_request(request)
            send_message('simulate_referrer_request', Simulate_referrer_request_args, :request => request)
          end

          def recv_simulate_referrer_request()
            result = receive_message(Simulate_referrer_request_result)
            return result.success unless result.success.nil?
            raise result.inputoutputexception unless result.inputoutputexception.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'simulate_referrer_request failed: unknown result')
          end

          def get_ana_sample_output(ana_id)
            send_get_ana_sample_output(ana_id)
            return recv_get_ana_sample_output()
          end

          def send_get_ana_sample_output(ana_id)
            send_message('get_ana_sample_output', Get_ana_sample_output_args, :ana_id => ana_id)
          end

          def recv_get_ana_sample_output()
            result = receive_message(Get_ana_sample_output_result)
            return result.success unless result.success.nil?
            raise result.inputoutputexception unless result.inputoutputexception.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_ana_sample_output failed: unknown result')
          end

          def create_ana_test(liveramp_test_generation_request_id, heid_sample)
            send_create_ana_test(liveramp_test_generation_request_id, heid_sample)
            recv_create_ana_test()
          end

          def send_create_ana_test(liveramp_test_generation_request_id, heid_sample)
            send_message('create_ana_test', Create_ana_test_args, :liveramp_test_generation_request_id => liveramp_test_generation_request_id, :heid_sample => heid_sample)
          end

          def recv_create_ana_test()
            result = receive_message(Create_ana_test_result)
            raise result.inputoutputexception unless result.inputoutputexception.nil?
            return
          end

          def create_ana_test_v2(liveramp_test_generation_request_id)
            send_create_ana_test_v2(liveramp_test_generation_request_id)
            recv_create_ana_test_v2()
          end

          def send_create_ana_test_v2(liveramp_test_generation_request_id)
            send_message('create_ana_test_v2', Create_ana_test_v2_args, :liveramp_test_generation_request_id => liveramp_test_generation_request_id)
          end

          def recv_create_ana_test_v2()
            result = receive_message(Create_ana_test_v2_result)
            raise result.inputoutputexception unless result.inputoutputexception.nil?
            return
          end

          def create_no_op_ana_test(liveramp_test_generation_request_id)
            send_create_no_op_ana_test(liveramp_test_generation_request_id)
            recv_create_no_op_ana_test()
          end

          def send_create_no_op_ana_test(liveramp_test_generation_request_id)
            send_message('create_no_op_ana_test', Create_no_op_ana_test_args, :liveramp_test_generation_request_id => liveramp_test_generation_request_id)
          end

          def recv_create_no_op_ana_test()
            result = receive_message(Create_no_op_ana_test_result)
            raise result.inputoutputexception unless result.inputoutputexception.nil?
            return
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_get_snapshot_id(seqid, iprot, oprot)
            args = read_args(iprot, Get_snapshot_id_args)
            result = Get_snapshot_id_result.new()
            result.success = @handler.get_snapshot_id()
            write_result(result, oprot, 'get_snapshot_id', seqid)
          end

          def process_simulate_referrer_request(seqid, iprot, oprot)
            args = read_args(iprot, Simulate_referrer_request_args)
            result = Simulate_referrer_request_result.new()
            begin
              result.success = @handler.simulate_referrer_request(args.request)
            rescue ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException => inputoutputexception
              result.inputoutputexception = inputoutputexception
            end
            write_result(result, oprot, 'simulate_referrer_request', seqid)
          end

          def process_get_ana_sample_output(seqid, iprot, oprot)
            args = read_args(iprot, Get_ana_sample_output_args)
            result = Get_ana_sample_output_result.new()
            begin
              result.success = @handler.get_ana_sample_output(args.ana_id)
            rescue ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException => inputoutputexception
              result.inputoutputexception = inputoutputexception
            end
            write_result(result, oprot, 'get_ana_sample_output', seqid)
          end

          def process_create_ana_test(seqid, iprot, oprot)
            args = read_args(iprot, Create_ana_test_args)
            result = Create_ana_test_result.new()
            begin
              @handler.create_ana_test(args.liveramp_test_generation_request_id, args.heid_sample)
            rescue ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException => inputoutputexception
              result.inputoutputexception = inputoutputexception
            end
            write_result(result, oprot, 'create_ana_test', seqid)
          end

          def process_create_ana_test_v2(seqid, iprot, oprot)
            args = read_args(iprot, Create_ana_test_v2_args)
            result = Create_ana_test_v2_result.new()
            begin
              @handler.create_ana_test_v2(args.liveramp_test_generation_request_id)
            rescue ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException => inputoutputexception
              result.inputoutputexception = inputoutputexception
            end
            write_result(result, oprot, 'create_ana_test_v2', seqid)
          end

          def process_create_no_op_ana_test(seqid, iprot, oprot)
            args = read_args(iprot, Create_no_op_ana_test_args)
            result = Create_no_op_ana_test_result.new()
            begin
              @handler.create_no_op_ana_test(args.liveramp_test_generation_request_id)
            rescue ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException => inputoutputexception
              result.inputoutputexception = inputoutputexception
            end
            write_result(result, oprot, 'create_no_op_ana_test', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Get_snapshot_id_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_snapshot_id_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Simulate_referrer_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST = 1

          FIELDS = {
            REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Rapleaf::SpruceLib::SpruceLibService::MockReferrerRequest}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Simulate_referrer_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INPUTOUTPUTEXCEPTION = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::SpruceLib::SpruceLibService::MockReferrerResponse},
            INPUTOUTPUTEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'inputoutputexception', :class => ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_ana_sample_output_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ANA_ID = 1

          FIELDS = {
            ANA_ID => {:type => ::Thrift::Types::I32, :name => 'ana_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_ana_sample_output_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INPUTOUTPUTEXCEPTION = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::SpruceLib::SpruceLibService::AnaSampleOutputResponse},
            INPUTOUTPUTEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'inputoutputexception', :class => ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_ana_test_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_TEST_GENERATION_REQUEST_ID = 1
          HEID_SAMPLE = 2

          FIELDS = {
            LIVERAMP_TEST_GENERATION_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_test_generation_request_id'},
            HEID_SAMPLE => {:type => ::Thrift::Types::LIST, :name => 'heid_sample', :element => {:type => ::Thrift::Types::STRING, :binary => true}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_ana_test_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          INPUTOUTPUTEXCEPTION = 1

          FIELDS = {
            INPUTOUTPUTEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'inputoutputexception', :class => ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_ana_test_v2_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_TEST_GENERATION_REQUEST_ID = 1

          FIELDS = {
            LIVERAMP_TEST_GENERATION_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_test_generation_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_ana_test_v2_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          INPUTOUTPUTEXCEPTION = 1

          FIELDS = {
            INPUTOUTPUTEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'inputoutputexception', :class => ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_no_op_ana_test_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_TEST_GENERATION_REQUEST_ID = 1

          FIELDS = {
            LIVERAMP_TEST_GENERATION_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_test_generation_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_no_op_ana_test_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          INPUTOUTPUTEXCEPTION = 1

          FIELDS = {
            INPUTOUTPUTEXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'inputoutputexception', :class => ::Rapleaf::SpruceLib::SpruceLibService::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
