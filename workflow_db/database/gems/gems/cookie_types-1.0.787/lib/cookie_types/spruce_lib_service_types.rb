#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'spruce_types'
require 'spruce_cookies_types'


module Rapleaf
  module SpruceLib
    module SpruceLibService
      class InputOutputException < ::Thrift::Exception; end

      class MockReferrerRequest; end

      class MockReferrerResponse; end

      class AnaSampleOutput; end

      class AnaSampleOutputResponse < ::Thrift::Union; end

      class InputOutputException < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union
        def initialize(message=nil)
          super()
          self.message = message
        end

        MESSAGE = 1

        FIELDS = {
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Encapsulates all of the information required to mock a referrer request
      class MockReferrerRequest
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REFERRER_ID = 1
        SECURE = 2
        US_REQUEST = 3
        HAS_ALL_DATA = 4
        ROTATION_COOKIE = 5
        NUM_PIXELS = 6
        LRCA_IDS_WITH_DATA = 7

        FIELDS = {
          # Referrer ID to mock a request for
          REFERRER_ID => {:type => ::Thrift::Types::I32, :name => 'referrer_id'},
          # True if simulating secure (HTTPS) requests
          SECURE => {:type => ::Thrift::Types::BOOL, :name => 'secure'},
          # True if simulating a request originating in the US
          US_REQUEST => {:type => ::Thrift::Types::BOOL, :name => 'us_request'},
          # True if simulating a request that has data for all customers associated with
# this referrer. If false, only the LRCAs specified in lrca_ids_with_data will
# have data.
          HAS_ALL_DATA => {:type => ::Thrift::Types::BOOL, :name => 'has_all_data', :optional => true},
          # The rotation cookie
          ROTATION_COOKIE => {:type => ::Thrift::Types::STRUCT, :name => 'rotation_cookie', :class => ::Liveramp::CookieTypes::Cookie::RotationCookie, :optional => true},
          # The number of requests to simulate. If not set, will fire all possible requests.
          NUM_PIXELS => {:type => ::Thrift::Types::I32, :name => 'num_pixels', :optional => true},
          # The set of LRCAs associated with this referrer that have data for this request.
# Ignored if has_all_data is true.
          LRCA_IDS_WITH_DATA => {:type => ::Thrift::Types::SET, :name => 'lrca_ids_with_data', :element => {:type => ::Thrift::Types::I32}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field referrer_id is unset!') unless @referrer_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secure is unset!') if @secure.nil?
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field us_request is unset!') if @us_request.nil?
        end

        ::Thrift::Struct.generate_accessors self
      end

      class MockReferrerResponse
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PRIORITIZED_RESPONSES = 1
        ROTATION_COOKIE = 2

        FIELDS = {
          # A list of responses generated by a MockReferrerRequest ordered by priority.
          PRIORITIZED_RESPONSES => {:type => ::Thrift::Types::LIST, :name => 'prioritized_responses', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::Spruce::AnaResponsePackage}},
          # The modified RotationCookie
          ROTATION_COOKIE => {:type => ::Thrift::Types::STRUCT, :name => 'rotation_cookie', :class => ::Liveramp::CookieTypes::Cookie::RotationCookie}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field prioritized_responses is unset!') unless @prioritized_responses
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field rotation_cookie is unset!') unless @rotation_cookie
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnaSampleOutput
        include ::Thrift::Struct, ::Thrift::Struct_Union
        URL = 1

        FIELDS = {
          URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnaSampleOutputResponse < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def sample_output(val)
            AnaSampleOutputResponse.new(:sample_output, val)
          end

          def error(val)
            AnaSampleOutputResponse.new(:error, val)
          end
        end

        SAMPLE_OUTPUT = 1
        ERROR = 2

        FIELDS = {
          SAMPLE_OUTPUT => {:type => ::Thrift::Types::STRUCT, :name => 'sample_output', :class => ::Rapleaf::SpruceLib::SpruceLibService::AnaSampleOutput, :optional => true},
          ERROR => {:type => ::Thrift::Types::STRING, :name => 'error', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

    end
  end
end
