#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'config_snapshoter_types'

module Rapleaf
  module ConfigSnapshoter
    module ConfigSnapshoter
      class Client
        include ::Thrift::Client

        def createSnapshot()
          send_createSnapshot()
          return recv_createSnapshot()
        end

        def send_createSnapshot()
          send_message('createSnapshot', CreateSnapshot_args)
        end

        def recv_createSnapshot()
          result = receive_message(CreateSnapshot_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSnapshot failed: unknown result')
        end

        def getLastHandledRequestID()
          send_getLastHandledRequestID()
          return recv_getLastHandledRequestID()
        end

        def send_getLastHandledRequestID()
          send_message('getLastHandledRequestID', GetLastHandledRequestID_args)
        end

        def recv_getLastHandledRequestID()
          result = receive_message(GetLastHandledRequestID_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLastHandledRequestID failed: unknown result')
        end

        def isBusy()
          send_isBusy()
          return recv_isBusy()
        end

        def send_isBusy()
          send_message('isBusy', IsBusy_args)
        end

        def recv_isBusy()
          result = receive_message(IsBusy_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isBusy failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_createSnapshot(seqid, iprot, oprot)
          args = read_args(iprot, CreateSnapshot_args)
          result = CreateSnapshot_result.new()
          result.success = @handler.createSnapshot()
          write_result(result, oprot, 'createSnapshot', seqid)
        end

        def process_getLastHandledRequestID(seqid, iprot, oprot)
          args = read_args(iprot, GetLastHandledRequestID_args)
          result = GetLastHandledRequestID_result.new()
          result.success = @handler.getLastHandledRequestID()
          write_result(result, oprot, 'getLastHandledRequestID', seqid)
        end

        def process_isBusy(seqid, iprot, oprot)
          args = read_args(iprot, IsBusy_args)
          result = IsBusy_result.new()
          result.success = @handler.isBusy()
          write_result(result, oprot, 'isBusy', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class CreateSnapshot_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateSnapshot_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetLastHandledRequestID_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetLastHandledRequestID_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsBusy_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsBusy_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
