#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'anonymous_identifier_mapping_types'

module Liveramp
  module Types
    module AnonymousIdentifierMapping
      module AimConfigCoordinator
        class Client
          include ::Thrift::Client

          def get_unique_mapping_identifier(aim_id)
            send_get_unique_mapping_identifier(aim_id)
            return recv_get_unique_mapping_identifier()
          end

          def send_get_unique_mapping_identifier(aim_id)
            send_message('get_unique_mapping_identifier', Get_unique_mapping_identifier_args, :aim_id => aim_id)
          end

          def recv_get_unique_mapping_identifier()
            result = receive_message(Get_unique_mapping_identifier_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_unique_mapping_identifier failed: unknown result')
          end

          def submit_aim_request_from_configuration(config)
            send_submit_aim_request_from_configuration(config)
            return recv_submit_aim_request_from_configuration()
          end

          def send_submit_aim_request_from_configuration(config)
            send_message('submit_aim_request_from_configuration', Submit_aim_request_from_configuration_args, :config => config)
          end

          def recv_submit_aim_request_from_configuration()
            result = receive_message(Submit_aim_request_from_configuration_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'submit_aim_request_from_configuration failed: unknown result')
          end

          def get_aim_configuration_status(aim_configuration_id)
            send_get_aim_configuration_status(aim_configuration_id)
            return recv_get_aim_configuration_status()
          end

          def send_get_aim_configuration_status(aim_configuration_id)
            send_message('get_aim_configuration_status', Get_aim_configuration_status_args, :aim_configuration_id => aim_configuration_id)
          end

          def recv_get_aim_configuration_status()
            result = receive_message(Get_aim_configuration_status_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_configuration_status failed: unknown result')
          end

          def cancel_aim_configuration(aim_configuration_id)
            send_cancel_aim_configuration(aim_configuration_id)
            return recv_cancel_aim_configuration()
          end

          def send_cancel_aim_configuration(aim_configuration_id)
            send_message('cancel_aim_configuration', Cancel_aim_configuration_args, :aim_configuration_id => aim_configuration_id)
          end

          def recv_cancel_aim_configuration()
            result = receive_message(Cancel_aim_configuration_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cancel_aim_configuration failed: unknown result')
          end

          def validate_configuration(config)
            send_validate_configuration(config)
            return recv_validate_configuration()
          end

          def send_validate_configuration(config)
            send_message('validate_configuration', Validate_configuration_args, :config => config)
          end

          def recv_validate_configuration()
            result = receive_message(Validate_configuration_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validate_configuration failed: unknown result')
          end

          def get_source_identifier_pool(aim_configuration_id)
            send_get_source_identifier_pool(aim_configuration_id)
            return recv_get_source_identifier_pool()
          end

          def send_get_source_identifier_pool(aim_configuration_id)
            send_message('get_source_identifier_pool', Get_source_identifier_pool_args, :aim_configuration_id => aim_configuration_id)
          end

          def recv_get_source_identifier_pool()
            result = receive_message(Get_source_identifier_pool_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_source_identifier_pool failed: unknown result')
          end

          def get_target_identifier_pool(aim_configuration_id)
            send_get_target_identifier_pool(aim_configuration_id)
            return recv_get_target_identifier_pool()
          end

          def send_get_target_identifier_pool(aim_configuration_id)
            send_message('get_target_identifier_pool', Get_target_identifier_pool_args, :aim_configuration_id => aim_configuration_id)
          end

          def recv_get_target_identifier_pool()
            result = receive_message(Get_target_identifier_pool_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_target_identifier_pool failed: unknown result')
          end

          def get_aim_configurations_served_from_cache(aim_configuration_ids)
            send_get_aim_configurations_served_from_cache(aim_configuration_ids)
            return recv_get_aim_configurations_served_from_cache()
          end

          def send_get_aim_configurations_served_from_cache(aim_configuration_ids)
            send_message('get_aim_configurations_served_from_cache', Get_aim_configurations_served_from_cache_args, :aim_configuration_ids => aim_configuration_ids)
          end

          def recv_get_aim_configurations_served_from_cache()
            result = receive_message(Get_aim_configurations_served_from_cache_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_configurations_served_from_cache failed: unknown result')
          end

          def is_configuration_id(aim_id)
            send_is_configuration_id(aim_id)
            return recv_is_configuration_id()
          end

          def send_is_configuration_id(aim_id)
            send_message('is_configuration_id', Is_configuration_id_args, :aim_id => aim_id)
          end

          def recv_is_configuration_id()
            result = receive_message(Is_configuration_id_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'is_configuration_id failed: unknown result')
          end

          def get_aim_url(aim_id)
            send_get_aim_url(aim_id)
            return recv_get_aim_url()
          end

          def send_get_aim_url(aim_id)
            send_message('get_aim_url', Get_aim_url_args, :aim_id => aim_id)
          end

          def recv_get_aim_url()
            result = receive_message(Get_aim_url_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_url failed: unknown result')
          end

          def get_aim_branching_factor(aim_id)
            send_get_aim_branching_factor(aim_id)
            return recv_get_aim_branching_factor()
          end

          def send_get_aim_branching_factor(aim_id)
            send_message('get_aim_branching_factor', Get_aim_branching_factor_args, :aim_id => aim_id)
          end

          def recv_get_aim_branching_factor()
            result = receive_message(Get_aim_branching_factor_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_branching_factor failed: unknown result')
          end

          def get_aim_branching_factors(aim_ids)
            send_get_aim_branching_factors(aim_ids)
            return recv_get_aim_branching_factors()
          end

          def send_get_aim_branching_factors(aim_ids)
            send_message('get_aim_branching_factors', Get_aim_branching_factors_args, :aim_ids => aim_ids)
          end

          def recv_get_aim_branching_factors()
            result = receive_message(Get_aim_branching_factors_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_branching_factors failed: unknown result')
          end

          def get_aim_record_store_total_count(aim_id)
            send_get_aim_record_store_total_count(aim_id)
            return recv_get_aim_record_store_total_count()
          end

          def send_get_aim_record_store_total_count(aim_id)
            send_message('get_aim_record_store_total_count', Get_aim_record_store_total_count_args, :aim_id => aim_id)
          end

          def recv_get_aim_record_store_total_count()
            result = receive_message(Get_aim_record_store_total_count_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_record_store_total_count failed: unknown result')
          end

          def get_aim_record_store_total_counts(aim_ids)
            send_get_aim_record_store_total_counts(aim_ids)
            return recv_get_aim_record_store_total_counts()
          end

          def send_get_aim_record_store_total_counts(aim_ids)
            send_message('get_aim_record_store_total_counts', Get_aim_record_store_total_counts_args, :aim_ids => aim_ids)
          end

          def recv_get_aim_record_store_total_counts()
            result = receive_message(Get_aim_record_store_total_counts_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_record_store_total_counts failed: unknown result')
          end

          def get_aim_request(aim_request_id)
            send_get_aim_request(aim_request_id)
            return recv_get_aim_request()
          end

          def send_get_aim_request(aim_request_id)
            send_message('get_aim_request', Get_aim_request_args, :aim_request_id => aim_request_id)
          end

          def recv_get_aim_request()
            result = receive_message(Get_aim_request_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_request failed: unknown result')
          end

          def get_aim_requests_served_from_cache(aim_request_ids)
            send_get_aim_requests_served_from_cache(aim_request_ids)
            return recv_get_aim_requests_served_from_cache()
          end

          def send_get_aim_requests_served_from_cache(aim_request_ids)
            send_message('get_aim_requests_served_from_cache', Get_aim_requests_served_from_cache_args, :aim_request_ids => aim_request_ids)
          end

          def recv_get_aim_requests_served_from_cache()
            result = receive_message(Get_aim_requests_served_from_cache_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_requests_served_from_cache failed: unknown result')
          end

          def has_same_request_config_and_mappings_version(aim_request_id1, aim_request_id2)
            send_has_same_request_config_and_mappings_version(aim_request_id1, aim_request_id2)
            return recv_has_same_request_config_and_mappings_version()
          end

          def send_has_same_request_config_and_mappings_version(aim_request_id1, aim_request_id2)
            send_message('has_same_request_config_and_mappings_version', Has_same_request_config_and_mappings_version_args, :aim_request_id1 => aim_request_id1, :aim_request_id2 => aim_request_id2)
          end

          def recv_has_same_request_config_and_mappings_version()
            result = receive_message(Has_same_request_config_and_mappings_version_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'has_same_request_config_and_mappings_version failed: unknown result')
          end

          def validate_aim_request(aim_request)
            send_validate_aim_request(aim_request)
            return recv_validate_aim_request()
          end

          def send_validate_aim_request(aim_request)
            send_message('validate_aim_request', Validate_aim_request_args, :aim_request => aim_request)
          end

          def recv_validate_aim_request()
            result = receive_message(Validate_aim_request_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validate_aim_request failed: unknown result')
          end

          def cancel_aim_request(aim_request_id)
            send_cancel_aim_request(aim_request_id)
            return recv_cancel_aim_request()
          end

          def send_cancel_aim_request(aim_request_id)
            send_message('cancel_aim_request', Cancel_aim_request_args, :aim_request_id => aim_request_id)
          end

          def recv_cancel_aim_request()
            result = receive_message(Cancel_aim_request_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cancel_aim_request failed: unknown result')
          end

          def submit_aim_request(aim_request)
            send_submit_aim_request(aim_request)
            return recv_submit_aim_request()
          end

          def send_submit_aim_request(aim_request)
            send_message('submit_aim_request', Submit_aim_request_args, :aim_request => aim_request)
          end

          def recv_submit_aim_request()
            result = receive_message(Submit_aim_request_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'submit_aim_request failed: unknown result')
          end

          def get_aim_request_status(aim_request_id)
            send_get_aim_request_status(aim_request_id)
            return recv_get_aim_request_status()
          end

          def send_get_aim_request_status(aim_request_id)
            send_message('get_aim_request_status', Get_aim_request_status_args, :aim_request_id => aim_request_id)
          end

          def recv_get_aim_request_status()
            result = receive_message(Get_aim_request_status_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_request_status failed: unknown result')
          end

          def get_aim_rule(config)
            send_get_aim_rule(config)
            return recv_get_aim_rule()
          end

          def send_get_aim_rule(config)
            send_message('get_aim_rule', Get_aim_rule_args, :config => config)
          end

          def recv_get_aim_rule()
            result = receive_message(Get_aim_rule_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_rule failed: unknown result')
          end

          def get_aim_configuration(aim_configuration_id)
            send_get_aim_configuration(aim_configuration_id)
            return recv_get_aim_configuration()
          end

          def send_get_aim_configuration(aim_configuration_id)
            send_message('get_aim_configuration', Get_aim_configuration_args, :aim_configuration_id => aim_configuration_id)
          end

          def recv_get_aim_configuration()
            result = receive_message(Get_aim_configuration_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_configuration failed: unknown result')
          end

          def get_aim_request_from_configuration(config)
            send_get_aim_request_from_configuration(config)
            return recv_get_aim_request_from_configuration()
          end

          def send_get_aim_request_from_configuration(config)
            send_message('get_aim_request_from_configuration', Get_aim_request_from_configuration_args, :config => config)
          end

          def recv_get_aim_request_from_configuration()
            result = receive_message(Get_aim_request_from_configuration_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_request_from_configuration failed: unknown result')
          end

          def get_aim_request_ids_from_configuration_id(aim_configuration_id)
            send_get_aim_request_ids_from_configuration_id(aim_configuration_id)
            return recv_get_aim_request_ids_from_configuration_id()
          end

          def send_get_aim_request_ids_from_configuration_id(aim_configuration_id)
            send_message('get_aim_request_ids_from_configuration_id', Get_aim_request_ids_from_configuration_id_args, :aim_configuration_id => aim_configuration_id)
          end

          def recv_get_aim_request_ids_from_configuration_id()
            result = receive_message(Get_aim_request_ids_from_configuration_id_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_request_ids_from_configuration_id failed: unknown result')
          end

          def get_aim_request_creation_time(aim_request_id)
            send_get_aim_request_creation_time(aim_request_id)
            return recv_get_aim_request_creation_time()
          end

          def send_get_aim_request_creation_time(aim_request_id)
            send_message('get_aim_request_creation_time', Get_aim_request_creation_time_args, :aim_request_id => aim_request_id)
          end

          def recv_get_aim_request_creation_time()
            result = receive_message(Get_aim_request_creation_time_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_request_creation_time failed: unknown result')
          end

          def get_aim_configuration_creation_time(aim_request_id)
            send_get_aim_configuration_creation_time(aim_request_id)
            return recv_get_aim_configuration_creation_time()
          end

          def send_get_aim_configuration_creation_time(aim_request_id)
            send_message('get_aim_configuration_creation_time', Get_aim_configuration_creation_time_args, :aim_request_id => aim_request_id)
          end

          def recv_get_aim_configuration_creation_time()
            result = receive_message(Get_aim_configuration_creation_time_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_configuration_creation_time failed: unknown result')
          end

          def set_aim_request_status(aim_request_id, status)
            send_set_aim_request_status(aim_request_id, status)
            recv_set_aim_request_status()
          end

          def send_set_aim_request_status(aim_request_id, status)
            send_message('set_aim_request_status', Set_aim_request_status_args, :aim_request_id => aim_request_id, :status => status)
          end

          def recv_set_aim_request_status()
            result = receive_message(Set_aim_request_status_result)
            return
          end

          def set_aim_configuration_status(aim_configuration_id, status)
            send_set_aim_configuration_status(aim_configuration_id, status)
            recv_set_aim_configuration_status()
          end

          def send_set_aim_configuration_status(aim_configuration_id, status)
            send_message('set_aim_configuration_status', Set_aim_configuration_status_args, :aim_configuration_id => aim_configuration_id, :status => status)
          end

          def recv_set_aim_configuration_status()
            result = receive_message(Set_aim_configuration_status_result)
            return
          end

          def get_aim_record_store_version(aim_request_id)
            send_get_aim_record_store_version(aim_request_id)
            return recv_get_aim_record_store_version()
          end

          def send_get_aim_record_store_version(aim_request_id)
            send_message('get_aim_record_store_version', Get_aim_record_store_version_args, :aim_request_id => aim_request_id)
          end

          def recv_get_aim_record_store_version()
            result = receive_message(Get_aim_record_store_version_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_aim_record_store_version failed: unknown result')
          end

          def get_config_spec(source, target, rule, edgeOwners)
            send_get_config_spec(source, target, rule, edgeOwners)
            return recv_get_config_spec()
          end

          def send_get_config_spec(source, target, rule, edgeOwners)
            send_message('get_config_spec', Get_config_spec_args, :source => source, :target => target, :rule => rule, :edgeOwners => edgeOwners)
          end

          def recv_get_config_spec()
            result = receive_message(Get_config_spec_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_config_spec failed: unknown result')
          end

          def get_fallback_config_spec(source, target, rule, edgeOwners)
            send_get_fallback_config_spec(source, target, rule, edgeOwners)
            return recv_get_fallback_config_spec()
          end

          def send_get_fallback_config_spec(source, target, rule, edgeOwners)
            send_message('get_fallback_config_spec', Get_fallback_config_spec_args, :source => source, :target => target, :rule => rule, :edgeOwners => edgeOwners)
          end

          def recv_get_fallback_config_spec()
            result = receive_message(Get_fallback_config_spec_result)
            return result.success unless result.success.nil?
            raise result.config_error unless result.config_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_fallback_config_spec failed: unknown result')
          end

          def get_unscheduled_aim_requests_for_aim_process(process)
            send_get_unscheduled_aim_requests_for_aim_process(process)
            return recv_get_unscheduled_aim_requests_for_aim_process()
          end

          def send_get_unscheduled_aim_requests_for_aim_process(process)
            send_message('get_unscheduled_aim_requests_for_aim_process', Get_unscheduled_aim_requests_for_aim_process_args, :process => process)
          end

          def recv_get_unscheduled_aim_requests_for_aim_process()
            result = receive_message(Get_unscheduled_aim_requests_for_aim_process_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_unscheduled_aim_requests_for_aim_process failed: unknown result')
          end

          def get_next_batch(process)
            send_get_next_batch(process)
            return recv_get_next_batch()
          end

          def send_get_next_batch(process)
            send_message('get_next_batch', Get_next_batch_args, :process => process)
          end

          def recv_get_next_batch()
            result = receive_message(Get_next_batch_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_next_batch failed: unknown result')
          end

          def set_graph_builder_batch_status(batch_id, status)
            send_set_graph_builder_batch_status(batch_id, status)
            return recv_set_graph_builder_batch_status()
          end

          def send_set_graph_builder_batch_status(batch_id, status)
            send_message('set_graph_builder_batch_status', Set_graph_builder_batch_status_args, :batch_id => batch_id, :status => status)
          end

          def recv_set_graph_builder_batch_status()
            result = receive_message(Set_graph_builder_batch_status_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'set_graph_builder_batch_status failed: unknown result')
          end

          def get_graph_builder_batch_status(batch_id)
            send_get_graph_builder_batch_status(batch_id)
            return recv_get_graph_builder_batch_status()
          end

          def send_get_graph_builder_batch_status(batch_id)
            send_message('get_graph_builder_batch_status', Get_graph_builder_batch_status_args, :batch_id => batch_id)
          end

          def recv_get_graph_builder_batch_status()
            result = receive_message(Get_graph_builder_batch_status_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_graph_builder_batch_status failed: unknown result')
          end

          def cancel_graph_builder_batch(batch_id)
            send_cancel_graph_builder_batch(batch_id)
            return recv_cancel_graph_builder_batch()
          end

          def send_cancel_graph_builder_batch(batch_id)
            send_message('cancel_graph_builder_batch', Cancel_graph_builder_batch_args, :batch_id => batch_id)
          end

          def recv_cancel_graph_builder_batch()
            result = receive_message(Cancel_graph_builder_batch_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cancel_graph_builder_batch failed: unknown result')
          end

          def get_batch_id_for_aim_request(aim_request_id)
            send_get_batch_id_for_aim_request(aim_request_id)
            return recv_get_batch_id_for_aim_request()
          end

          def send_get_batch_id_for_aim_request(aim_request_id)
            send_message('get_batch_id_for_aim_request', Get_batch_id_for_aim_request_args, :aim_request_id => aim_request_id)
          end

          def recv_get_batch_id_for_aim_request()
            result = receive_message(Get_batch_id_for_aim_request_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_batch_id_for_aim_request failed: unknown result')
          end

          def get_scheduled_batches_for_aim_process(aim_process)
            send_get_scheduled_batches_for_aim_process(aim_process)
            return recv_get_scheduled_batches_for_aim_process()
          end

          def send_get_scheduled_batches_for_aim_process(aim_process)
            send_message('get_scheduled_batches_for_aim_process', Get_scheduled_batches_for_aim_process_args, :aim_process => aim_process)
          end

          def recv_get_scheduled_batches_for_aim_process()
            result = receive_message(Get_scheduled_batches_for_aim_process_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_scheduled_batches_for_aim_process failed: unknown result')
          end

          def report_stats_for_aim_store_partitions(partition_version_stats, batch_id)
            send_report_stats_for_aim_store_partitions(partition_version_stats, batch_id)
            recv_report_stats_for_aim_store_partitions()
          end

          def send_report_stats_for_aim_store_partitions(partition_version_stats, batch_id)
            send_message('report_stats_for_aim_store_partitions', Report_stats_for_aim_store_partitions_args, :partition_version_stats => partition_version_stats, :batch_id => batch_id)
          end

          def recv_report_stats_for_aim_store_partitions()
            result = receive_message(Report_stats_for_aim_store_partitions_result)
            raise result.internal_error unless result.internal_error.nil?
            return
          end

          def get_next_batch_with_request_ids(process, aim_request_ids)
            send_get_next_batch_with_request_ids(process, aim_request_ids)
            return recv_get_next_batch_with_request_ids()
          end

          def send_get_next_batch_with_request_ids(process, aim_request_ids)
            send_message('get_next_batch_with_request_ids', Get_next_batch_with_request_ids_args, :process => process, :aim_request_ids => aim_request_ids)
          end

          def recv_get_next_batch_with_request_ids()
            result = receive_message(Get_next_batch_with_request_ids_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_next_batch_with_request_ids failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_get_unique_mapping_identifier(seqid, iprot, oprot)
            args = read_args(iprot, Get_unique_mapping_identifier_args)
            result = Get_unique_mapping_identifier_result.new()
            result.success = @handler.get_unique_mapping_identifier(args.aim_id)
            write_result(result, oprot, 'get_unique_mapping_identifier', seqid)
          end

          def process_submit_aim_request_from_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Submit_aim_request_from_configuration_args)
            result = Submit_aim_request_from_configuration_result.new()
            begin
              result.success = @handler.submit_aim_request_from_configuration(args.config)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'submit_aim_request_from_configuration', seqid)
          end

          def process_get_aim_configuration_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_configuration_status_args)
            result = Get_aim_configuration_status_result.new()
            begin
              result.success = @handler.get_aim_configuration_status(args.aim_configuration_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_configuration_status', seqid)
          end

          def process_cancel_aim_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Cancel_aim_configuration_args)
            result = Cancel_aim_configuration_result.new()
            begin
              result.success = @handler.cancel_aim_configuration(args.aim_configuration_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'cancel_aim_configuration', seqid)
          end

          def process_validate_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Validate_configuration_args)
            result = Validate_configuration_result.new()
            begin
              result.success = @handler.validate_configuration(args.config)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'validate_configuration', seqid)
          end

          def process_get_source_identifier_pool(seqid, iprot, oprot)
            args = read_args(iprot, Get_source_identifier_pool_args)
            result = Get_source_identifier_pool_result.new()
            begin
              result.success = @handler.get_source_identifier_pool(args.aim_configuration_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_source_identifier_pool', seqid)
          end

          def process_get_target_identifier_pool(seqid, iprot, oprot)
            args = read_args(iprot, Get_target_identifier_pool_args)
            result = Get_target_identifier_pool_result.new()
            begin
              result.success = @handler.get_target_identifier_pool(args.aim_configuration_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_target_identifier_pool', seqid)
          end

          def process_get_aim_configurations_served_from_cache(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_configurations_served_from_cache_args)
            result = Get_aim_configurations_served_from_cache_result.new()
            begin
              result.success = @handler.get_aim_configurations_served_from_cache(args.aim_configuration_ids)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_configurations_served_from_cache', seqid)
          end

          def process_is_configuration_id(seqid, iprot, oprot)
            args = read_args(iprot, Is_configuration_id_args)
            result = Is_configuration_id_result.new()
            result.success = @handler.is_configuration_id(args.aim_id)
            write_result(result, oprot, 'is_configuration_id', seqid)
          end

          def process_get_aim_url(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_url_args)
            result = Get_aim_url_result.new()
            result.success = @handler.get_aim_url(args.aim_id)
            write_result(result, oprot, 'get_aim_url', seqid)
          end

          def process_get_aim_branching_factor(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_branching_factor_args)
            result = Get_aim_branching_factor_result.new()
            begin
              result.success = @handler.get_aim_branching_factor(args.aim_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_branching_factor', seqid)
          end

          def process_get_aim_branching_factors(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_branching_factors_args)
            result = Get_aim_branching_factors_result.new()
            begin
              result.success = @handler.get_aim_branching_factors(args.aim_ids)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_branching_factors', seqid)
          end

          def process_get_aim_record_store_total_count(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_record_store_total_count_args)
            result = Get_aim_record_store_total_count_result.new()
            begin
              result.success = @handler.get_aim_record_store_total_count(args.aim_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_record_store_total_count', seqid)
          end

          def process_get_aim_record_store_total_counts(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_record_store_total_counts_args)
            result = Get_aim_record_store_total_counts_result.new()
            begin
              result.success = @handler.get_aim_record_store_total_counts(args.aim_ids)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_record_store_total_counts', seqid)
          end

          def process_get_aim_request(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_request_args)
            result = Get_aim_request_result.new()
            result.success = @handler.get_aim_request(args.aim_request_id)
            write_result(result, oprot, 'get_aim_request', seqid)
          end

          def process_get_aim_requests_served_from_cache(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_requests_served_from_cache_args)
            result = Get_aim_requests_served_from_cache_result.new()
            begin
              result.success = @handler.get_aim_requests_served_from_cache(args.aim_request_ids)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_requests_served_from_cache', seqid)
          end

          def process_has_same_request_config_and_mappings_version(seqid, iprot, oprot)
            args = read_args(iprot, Has_same_request_config_and_mappings_version_args)
            result = Has_same_request_config_and_mappings_version_result.new()
            begin
              result.success = @handler.has_same_request_config_and_mappings_version(args.aim_request_id1, args.aim_request_id2)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'has_same_request_config_and_mappings_version', seqid)
          end

          def process_validate_aim_request(seqid, iprot, oprot)
            args = read_args(iprot, Validate_aim_request_args)
            result = Validate_aim_request_result.new()
            begin
              result.success = @handler.validate_aim_request(args.aim_request)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'validate_aim_request', seqid)
          end

          def process_cancel_aim_request(seqid, iprot, oprot)
            args = read_args(iprot, Cancel_aim_request_args)
            result = Cancel_aim_request_result.new()
            begin
              result.success = @handler.cancel_aim_request(args.aim_request_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'cancel_aim_request', seqid)
          end

          def process_submit_aim_request(seqid, iprot, oprot)
            args = read_args(iprot, Submit_aim_request_args)
            result = Submit_aim_request_result.new()
            begin
              result.success = @handler.submit_aim_request(args.aim_request)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'submit_aim_request', seqid)
          end

          def process_get_aim_request_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_request_status_args)
            result = Get_aim_request_status_result.new()
            begin
              result.success = @handler.get_aim_request_status(args.aim_request_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_request_status', seqid)
          end

          def process_get_aim_rule(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_rule_args)
            result = Get_aim_rule_result.new()
            begin
              result.success = @handler.get_aim_rule(args.config)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_rule', seqid)
          end

          def process_get_aim_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_configuration_args)
            result = Get_aim_configuration_result.new()
            result.success = @handler.get_aim_configuration(args.aim_configuration_id)
            write_result(result, oprot, 'get_aim_configuration', seqid)
          end

          def process_get_aim_request_from_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_request_from_configuration_args)
            result = Get_aim_request_from_configuration_result.new()
            begin
              result.success = @handler.get_aim_request_from_configuration(args.config)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_aim_request_from_configuration', seqid)
          end

          def process_get_aim_request_ids_from_configuration_id(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_request_ids_from_configuration_id_args)
            result = Get_aim_request_ids_from_configuration_id_result.new()
            result.success = @handler.get_aim_request_ids_from_configuration_id(args.aim_configuration_id)
            write_result(result, oprot, 'get_aim_request_ids_from_configuration_id', seqid)
          end

          def process_get_aim_request_creation_time(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_request_creation_time_args)
            result = Get_aim_request_creation_time_result.new()
            result.success = @handler.get_aim_request_creation_time(args.aim_request_id)
            write_result(result, oprot, 'get_aim_request_creation_time', seqid)
          end

          def process_get_aim_configuration_creation_time(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_configuration_creation_time_args)
            result = Get_aim_configuration_creation_time_result.new()
            result.success = @handler.get_aim_configuration_creation_time(args.aim_request_id)
            write_result(result, oprot, 'get_aim_configuration_creation_time', seqid)
          end

          def process_set_aim_request_status(seqid, iprot, oprot)
            args = read_args(iprot, Set_aim_request_status_args)
            result = Set_aim_request_status_result.new()
            @handler.set_aim_request_status(args.aim_request_id, args.status)
            write_result(result, oprot, 'set_aim_request_status', seqid)
          end

          def process_set_aim_configuration_status(seqid, iprot, oprot)
            args = read_args(iprot, Set_aim_configuration_status_args)
            result = Set_aim_configuration_status_result.new()
            @handler.set_aim_configuration_status(args.aim_configuration_id, args.status)
            write_result(result, oprot, 'set_aim_configuration_status', seqid)
          end

          def process_get_aim_record_store_version(seqid, iprot, oprot)
            args = read_args(iprot, Get_aim_record_store_version_args)
            result = Get_aim_record_store_version_result.new()
            result.success = @handler.get_aim_record_store_version(args.aim_request_id)
            write_result(result, oprot, 'get_aim_record_store_version', seqid)
          end

          def process_get_config_spec(seqid, iprot, oprot)
            args = read_args(iprot, Get_config_spec_args)
            result = Get_config_spec_result.new()
            begin
              result.success = @handler.get_config_spec(args.source, args.target, args.rule, args.edgeOwners)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            end
            write_result(result, oprot, 'get_config_spec', seqid)
          end

          def process_get_fallback_config_spec(seqid, iprot, oprot)
            args = read_args(iprot, Get_fallback_config_spec_args)
            result = Get_fallback_config_spec_result.new()
            begin
              result.success = @handler.get_fallback_config_spec(args.source, args.target, args.rule, args.edgeOwners)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError => config_error
              result.config_error = config_error
            end
            write_result(result, oprot, 'get_fallback_config_spec', seqid)
          end

          def process_get_unscheduled_aim_requests_for_aim_process(seqid, iprot, oprot)
            args = read_args(iprot, Get_unscheduled_aim_requests_for_aim_process_args)
            result = Get_unscheduled_aim_requests_for_aim_process_result.new()
            begin
              result.success = @handler.get_unscheduled_aim_requests_for_aim_process(args.process)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_unscheduled_aim_requests_for_aim_process', seqid)
          end

          def process_get_next_batch(seqid, iprot, oprot)
            args = read_args(iprot, Get_next_batch_args)
            result = Get_next_batch_result.new()
            begin
              result.success = @handler.get_next_batch(args.process)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_next_batch', seqid)
          end

          def process_set_graph_builder_batch_status(seqid, iprot, oprot)
            args = read_args(iprot, Set_graph_builder_batch_status_args)
            result = Set_graph_builder_batch_status_result.new()
            begin
              result.success = @handler.set_graph_builder_batch_status(args.batch_id, args.status)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'set_graph_builder_batch_status', seqid)
          end

          def process_get_graph_builder_batch_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_graph_builder_batch_status_args)
            result = Get_graph_builder_batch_status_result.new()
            begin
              result.success = @handler.get_graph_builder_batch_status(args.batch_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_graph_builder_batch_status', seqid)
          end

          def process_cancel_graph_builder_batch(seqid, iprot, oprot)
            args = read_args(iprot, Cancel_graph_builder_batch_args)
            result = Cancel_graph_builder_batch_result.new()
            begin
              result.success = @handler.cancel_graph_builder_batch(args.batch_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'cancel_graph_builder_batch', seqid)
          end

          def process_get_batch_id_for_aim_request(seqid, iprot, oprot)
            args = read_args(iprot, Get_batch_id_for_aim_request_args)
            result = Get_batch_id_for_aim_request_result.new()
            begin
              result.success = @handler.get_batch_id_for_aim_request(args.aim_request_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_batch_id_for_aim_request', seqid)
          end

          def process_get_scheduled_batches_for_aim_process(seqid, iprot, oprot)
            args = read_args(iprot, Get_scheduled_batches_for_aim_process_args)
            result = Get_scheduled_batches_for_aim_process_result.new()
            begin
              result.success = @handler.get_scheduled_batches_for_aim_process(args.aim_process)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_scheduled_batches_for_aim_process', seqid)
          end

          def process_report_stats_for_aim_store_partitions(seqid, iprot, oprot)
            args = read_args(iprot, Report_stats_for_aim_store_partitions_args)
            result = Report_stats_for_aim_store_partitions_result.new()
            begin
              @handler.report_stats_for_aim_store_partitions(args.partition_version_stats, args.batch_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'report_stats_for_aim_store_partitions', seqid)
          end

          def process_get_next_batch_with_request_ids(seqid, iprot, oprot)
            args = read_args(iprot, Get_next_batch_with_request_ids_args)
            result = Get_next_batch_with_request_ids_result.new()
            begin
              result.success = @handler.get_next_batch_with_request_ids(args.process, args.aim_request_ids)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_next_batch_with_request_ids', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Get_unique_mapping_identifier_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_ID = 1

          FIELDS = {
            AIM_ID => {:type => ::Thrift::Types::I64, :name => 'aim_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_unique_mapping_identifier_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Submit_aim_request_from_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIG = 1

          FIELDS = {
            CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Submit_aim_request_from_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configuration_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configuration_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_aim_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_aim_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Validate_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIG = 1

          FIELDS = {
            CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Validate_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimValidateRequestServiceResponse},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_source_identifier_pool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_source_identifier_pool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::IdentifierPool},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_target_identifier_pool_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_target_identifier_pool_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::IdentifierPool},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configurations_served_from_cache_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_IDS = 1

          FIELDS = {
            AIM_CONFIGURATION_IDS => {:type => ::Thrift::Types::SET, :name => 'aim_configuration_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configurations_served_from_cache_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Is_configuration_id_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_ID = 1

          FIELDS = {
            AIM_ID => {:type => ::Thrift::Types::I64, :name => 'aim_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Is_configuration_id_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_url_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_ID = 1

          FIELDS = {
            AIM_ID => {:type => ::Thrift::Types::I64, :name => 'aim_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_url_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_branching_factor_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_ID = -1

          FIELDS = {
            AIM_ID => {:type => ::Thrift::Types::I64, :name => 'aim_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_branching_factor_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_branching_factors_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_IDS = -1

          FIELDS = {
            AIM_IDS => {:type => ::Thrift::Types::SET, :name => 'aim_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_branching_factors_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::DOUBLE}},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_record_store_total_count_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_ID = 1

          FIELDS = {
            AIM_ID => {:type => ::Thrift::Types::I64, :name => 'aim_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_record_store_total_count_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_record_store_total_counts_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_IDS = -1

          FIELDS = {
            AIM_IDS => {:type => ::Thrift::Types::SET, :name => 'aim_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_record_store_total_counts_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::I64}},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequest}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_requests_served_from_cache_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_IDS = 1

          FIELDS = {
            AIM_REQUEST_IDS => {:type => ::Thrift::Types::SET, :name => 'aim_request_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_requests_served_from_cache_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Has_same_request_config_and_mappings_version_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID1 = 1
          AIM_REQUEST_ID2 = 2

          FIELDS = {
            AIM_REQUEST_ID1 => {:type => ::Thrift::Types::I64, :name => 'aim_request_id1'},
            AIM_REQUEST_ID2 => {:type => ::Thrift::Types::I64, :name => 'aim_request_id2'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Has_same_request_config_and_mappings_version_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Validate_aim_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST = 1

          FIELDS = {
            AIM_REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'aim_request', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequest}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Validate_aim_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimValidateRequestServiceResponse},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_aim_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_aim_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Submit_aim_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST = 1

          FIELDS = {
            AIM_REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'aim_request', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequest}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Submit_aim_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_rule_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIG = 1

          FIELDS = {
            CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_rule_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRule},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRule::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_from_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIG = 1

          FIELDS = {
            CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_from_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequest}},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_ids_from_configuration_id_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_ids_from_configuration_id_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_creation_time_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_request_creation_time_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configuration_creation_time_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_configuration_creation_time_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_aim_request_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1
          STATUS = 2

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'},
            STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @status.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus::VALID_VALUES.include?(@status)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_aim_request_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_aim_configuration_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_CONFIGURATION_ID = 1
          STATUS = 2

          FIELDS = {
            AIM_CONFIGURATION_ID => {:type => ::Thrift::Types::I64, :name => 'aim_configuration_id'},
            STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @status.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestStatus::VALID_VALUES.include?(@status)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_aim_configuration_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_record_store_version_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_aim_record_store_version_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_config_spec_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SOURCE = 1
          TARGET = 2
          RULE = 3
          EDGEOWNERS = 4

          FIELDS = {
            SOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'source', :class => ::Liveramp::Types::AnonymousIdentifierMapping::IdentifierPool},
            TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'target', :class => ::Liveramp::Types::AnonymousIdentifierMapping::IdentifierPool},
            RULE => {:type => ::Thrift::Types::I32, :name => 'rule', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRule},
            EDGEOWNERS => {:type => ::Thrift::Types::SET, :name => 'edgeOwners', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @rule.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRule::VALID_VALUES.include?(@rule)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field rule!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_config_spec_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigSpec},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_fallback_config_spec_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SOURCE = 1
          TARGET = 2
          RULE = 3
          EDGEOWNERS = 4

          FIELDS = {
            SOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'source', :class => ::Liveramp::Types::AnonymousIdentifierMapping::IdentifierPool},
            TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'target', :class => ::Liveramp::Types::AnonymousIdentifierMapping::IdentifierPool},
            RULE => {:type => ::Thrift::Types::I32, :name => 'rule', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRule},
            EDGEOWNERS => {:type => ::Thrift::Types::SET, :name => 'edgeOwners', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @rule.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimRule::VALID_VALUES.include?(@rule)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field rule!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_fallback_config_spec_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          CONFIG_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigSpec},
            CONFIG_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'config_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::ConfigError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_unscheduled_aim_requests_for_aim_process_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PROCESS = 1

          FIELDS = {
            PROCESS => {:type => ::Thrift::Types::I32, :name => 'process', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @process.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess::VALID_VALUES.include?(@process)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field process!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_unscheduled_aim_requests_for_aim_process_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestTimestampPair}},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_next_batch_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PROCESS = 1

          FIELDS = {
            PROCESS => {:type => ::Thrift::Types::I32, :name => 'process', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @process.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess::VALID_VALUES.include?(@process)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field process!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_next_batch_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::OptionalScheduledGraphBuilderBatch},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_graph_builder_batch_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          BATCH_ID = 1
          STATUS = 2

          FIELDS = {
            BATCH_ID => {:type => ::Thrift::Types::I64, :name => 'batch_id'},
            STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @status.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus::VALID_VALUES.include?(@status)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_graph_builder_batch_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_graph_builder_batch_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          BATCH_ID = 1

          FIELDS = {
            BATCH_ID => {:type => ::Thrift::Types::I64, :name => 'batch_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_graph_builder_batch_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_graph_builder_batch_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          BATCH_ID = 1

          FIELDS = {
            BATCH_ID => {:type => ::Thrift::Types::I64, :name => 'batch_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_graph_builder_batch_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::GraphBuilderBatchStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_batch_id_for_aim_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_REQUEST_ID = 1

          FIELDS = {
            AIM_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'aim_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_batch_id_for_aim_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_scheduled_batches_for_aim_process_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AIM_PROCESS = 1

          FIELDS = {
            AIM_PROCESS => {:type => ::Thrift::Types::I32, :name => 'aim_process', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @aim_process.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess::VALID_VALUES.include?(@aim_process)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field aim_process!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_scheduled_batches_for_aim_process_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimRequestTimestampPair}}},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Report_stats_for_aim_store_partitions_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARTITION_VERSION_STATS = 1
          BATCH_ID = 2

          FIELDS = {
            PARTITION_VERSION_STATS => {:type => ::Thrift::Types::SET, :name => 'partition_version_stats', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::AnonymousIdentifierMapping::AimStorePartitionVersionStat}},
            BATCH_ID => {:type => ::Thrift::Types::I64, :name => 'batch_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Report_stats_for_aim_store_partitions_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          INTERNAL_ERROR = 1

          FIELDS = {
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_next_batch_with_request_ids_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PROCESS = 1
          AIM_REQUEST_IDS = 2

          FIELDS = {
            PROCESS => {:type => ::Thrift::Types::I32, :name => 'process', :enum_class => ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess},
            AIM_REQUEST_IDS => {:type => ::Thrift::Types::SET, :name => 'aim_request_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @process.nil? || ::Liveramp::Types::AnonymousIdentifierMapping::AimProcess::VALID_VALUES.include?(@process)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field process!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_next_batch_with_request_ids_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::AnonymousIdentifierMapping::OptionalScheduledGraphBuilderBatch},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
