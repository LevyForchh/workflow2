#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Liveramp
  module Util
    module BadInputType
      NON_EXISTENT_ENDPOINT = 1
      INVALID_ENDPOINT = 2
      MISSING_REQUIRED_PROPERTY = 3
      OPTIONS_ERROR = 4
      INPUT_PATH_ERROR = 5
      JOB_SUBMITTED_WITH_NO_CORRESPONDING_ENDPOINT_CONFIGURED = 6
      VALUE_MAP = {1 => "NON_EXISTENT_ENDPOINT", 2 => "INVALID_ENDPOINT", 3 => "MISSING_REQUIRED_PROPERTY", 4 => "OPTIONS_ERROR", 5 => "INPUT_PATH_ERROR", 6 => "JOB_SUBMITTED_WITH_NO_CORRESPONDING_ENDPOINT_CONFIGURED"}
      VALID_VALUES = Set.new([NON_EXISTENT_ENDPOINT, INVALID_ENDPOINT, MISSING_REQUIRED_PROPERTY, OPTIONS_ERROR, INPUT_PATH_ERROR, JOB_SUBMITTED_WITH_NO_CORRESPONDING_ENDPOINT_CONFIGURED]).freeze
    end

    class NoValue; end

    class StringOrNone < ::Thrift::Union; end

    class TString; end

    class StringToLongMap; end

    class ByteArraySet; end

    class IndexEntry; end

    class ThriftList; end

    class InputOutputException < ::Thrift::Exception; end

    class BadInputException < ::Thrift::Exception; end

    class RenameAction; end

    class VirtualPartitionIndexEntry; end

    class SeekMSJKey; end

    class SeekMSJBytePosition; end

    class SeekMSJIndexEntry; end

    class SeekMSJIndexIndexEntry; end

    class SeekMSJIndexIndex; end

    class CounterContainer; end

    class NoValue
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StringOrNone < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def string_value(val)
          StringOrNone.new(:string_value, val)
        end

        def no_value(val)
          StringOrNone.new(:no_value, val)
        end
      end

      STRING_VALUE = 1
      NO_VALUE = 2

      FIELDS = {
        STRING_VALUE => {:type => ::Thrift::Types::STRING, :name => 'string_value', :optional => true},
        NO_VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'no_value', :class => ::Liveramp::Util::NoValue, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class TString
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STRING_VALUE = 1

      FIELDS = {
        STRING_VALUE => {:type => ::Thrift::Types::STRING, :name => 'string_value'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field string_value is unset!') unless @string_value
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StringToLongMap
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STRING_TO_LONG_MAP = 1

      FIELDS = {
        STRING_TO_LONG_MAP => {:type => ::Thrift::Types::MAP, :name => 'string_to_long_map', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field string_to_long_map is unset!') unless @string_to_long_map
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ByteArraySet
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VALUES = 1

      FIELDS = {
        VALUES => {:type => ::Thrift::Types::SET, :name => 'values', :element => {:type => ::Thrift::Types::STRING, :binary => true}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field values is unset!') unless @values
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IndexEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POS = 1
      KEY = 2

      FIELDS = {
        POS => {:type => ::Thrift::Types::I64, :name => 'pos'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pos is unset!') unless @pos
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ThriftList
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SERIALIZED_OBJECTS = 1

      FIELDS = {
        SERIALIZED_OBJECTS => {:type => ::Thrift::Types::LIST, :name => 'serialized_objects', :element => {:type => ::Thrift::Types::STRING, :binary => true}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field serialized_objects is unset!') unless @serialized_objects
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InputOutputException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      def initialize(message=nil)
        super()
        self.message = message
      end

      MESSAGE = 1

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BadInputException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      TYPES = 2

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        TYPES => {:type => ::Thrift::Types::LIST, :name => 'types', :element => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::Util::BadInputType}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RenameAction
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SRC_PATH = 1
      TASK_NUM = 2

      FIELDS = {
        SRC_PATH => {:type => ::Thrift::Types::STRING, :name => 'src_path'},
        TASK_NUM => {:type => ::Thrift::Types::I32, :name => 'task_num'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class VirtualPartitionIndexEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VP_ID = 1

      FIELDS = {
        VP_ID => {:type => ::Thrift::Types::STRING, :name => 'vp_id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field vp_id is unset!') unless @vp_id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SeekMSJKey
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FULL_RECORD_BYTES = 1

      FIELDS = {
        FULL_RECORD_BYTES => {:type => ::Thrift::Types::STRING, :name => 'full_record_bytes', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field full_record_bytes is unset!') unless @full_record_bytes
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SeekMSJBytePosition
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POSITION = 1

      FIELDS = {
        POSITION => {:type => ::Thrift::Types::I64, :name => 'position'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field position is unset!') unless @position
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SeekMSJIndexEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1
      BYTE_POSITION = 2

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRUCT, :name => 'key', :class => ::Liveramp::Util::SeekMSJKey},
        BYTE_POSITION => {:type => ::Thrift::Types::STRUCT, :name => 'byte_position', :class => ::Liveramp::Util::SeekMSJBytePosition}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field byte_position is unset!') unless @byte_position
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SeekMSJIndexIndexEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VP = 1
      START_POS = 2
      END_POS = 3
      INDEX_FILE_NAME = 4

      FIELDS = {
        VP => {:type => ::Thrift::Types::STRUCT, :name => 'vp', :class => ::Liveramp::Util::VirtualPartitionIndexEntry},
        START_POS => {:type => ::Thrift::Types::I64, :name => 'start_pos'},
        END_POS => {:type => ::Thrift::Types::I64, :name => 'end_pos'},
        INDEX_FILE_NAME => {:type => ::Thrift::Types::STRING, :name => 'index_file_name'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field vp is unset!') unless @vp
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field start_pos is unset!') unless @start_pos
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field end_pos is unset!') unless @end_pos
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field index_file_name is unset!') unless @index_file_name
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SeekMSJIndexIndex
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VP_TO_INDEX_POS = 1

      FIELDS = {
        VP_TO_INDEX_POS => {:type => ::Thrift::Types::MAP, :name => 'vp_to_index_pos', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Util::VirtualPartitionIndexEntry}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Util::SeekMSJIndexIndexEntry}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field vp_to_index_pos is unset!') unless @vp_to_index_pos
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CounterContainer
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NAME = 1
      VALUE = 2

      FIELDS = {
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        VALUE => {:type => ::Thrift::Types::I64, :name => 'value'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value is unset!') unless @value
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
