#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'acxiom_api_services_types'

module Liveramp
  module AcxiomAPI
    module DataServicesAPI
      class Client
        include ::Thrift::Client

        def query(endpoint, query)
          send_query(endpoint, query)
          return recv_query()
        end

        def send_query(endpoint, query)
          send_message('query', Query_args, :endpoint => endpoint, :query => query)
        end

        def recv_query()
          result = receive_message(Query_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'query failed: unknown result')
        end

        def querySingle(endpoint, query)
          send_querySingle(endpoint, query)
          return recv_querySingle()
        end

        def send_querySingle(endpoint, query)
          send_message('querySingle', QuerySingle_args, :endpoint => endpoint, :query => query)
        end

        def recv_querySingle()
          result = receive_message(QuerySingle_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'querySingle failed: unknown result')
        end

        def querySingleCustom(relative_path)
          send_querySingleCustom(relative_path)
          return recv_querySingleCustom()
        end

        def send_querySingleCustom(relative_path)
          send_message('querySingleCustom', QuerySingleCustom_args, :relative_path => relative_path)
        end

        def recv_querySingleCustom()
          result = receive_message(QuerySingleCustom_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'querySingleCustom failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_query(seqid, iprot, oprot)
          args = read_args(iprot, Query_args)
          result = Query_result.new()
          result.success = @handler.query(args.endpoint, args.query)
          write_result(result, oprot, 'query', seqid)
        end

        def process_querySingle(seqid, iprot, oprot)
          args = read_args(iprot, QuerySingle_args)
          result = QuerySingle_result.new()
          result.success = @handler.querySingle(args.endpoint, args.query)
          write_result(result, oprot, 'querySingle', seqid)
        end

        def process_querySingleCustom(seqid, iprot, oprot)
          args = read_args(iprot, QuerySingleCustom_args)
          result = QuerySingleCustom_result.new()
          result.success = @handler.querySingleCustom(args.relative_path)
          write_result(result, oprot, 'querySingleCustom', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Query_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ENDPOINT = 1
        QUERY = 2

        FIELDS = {
          ENDPOINT => {:type => ::Thrift::Types::I32, :name => 'endpoint', :enum_class => ::Liveramp::AcxiomAPI::QueryEndpoint},
          QUERY => {:type => ::Thrift::Types::LIST, :name => 'query', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::AcxiomAPI::DataServicesQuery}}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @endpoint.nil? || ::Liveramp::AcxiomAPI::QueryEndpoint::VALID_VALUES.include?(@endpoint)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field endpoint!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Query_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::AcxiomAPI::DataServicesResponse}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class QuerySingle_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ENDPOINT = 1
        QUERY = 2

        FIELDS = {
          ENDPOINT => {:type => ::Thrift::Types::I32, :name => 'endpoint', :enum_class => ::Liveramp::AcxiomAPI::QueryEndpoint},
          QUERY => {:type => ::Thrift::Types::STRUCT, :name => 'query', :class => ::Liveramp::AcxiomAPI::DataServicesQuery}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @endpoint.nil? || ::Liveramp::AcxiomAPI::QueryEndpoint::VALID_VALUES.include?(@endpoint)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field endpoint!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class QuerySingle_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::AcxiomAPI::DataServicesResponse}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class QuerySingleCustom_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        RELATIVE_PATH = 1

        FIELDS = {
          RELATIVE_PATH => {:type => ::Thrift::Types::STRING, :name => 'relative_path'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class QuerySingleCustom_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::AcxiomAPI::DataServicesResponse}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
