#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'liveramp_importer_types'
require File.join File.dirname(__FILE__), 'online_data_types'


module Liveramp
  module Audience
    module CrossDeviceAccuracyLevel
      EXACT = 0
      PROBABILISTIC_A = 1
      PROBABILISTIC_B = 2
      PROBABILISTIC_C = 3
      PROBABILISTIC_D = 4
      EXACT_DEPRECATED = 5
      ENTITY = 6
      HOUSEHOLD = 7
      VALUE_MAP = {0 => "EXACT", 1 => "PROBABILISTIC_A", 2 => "PROBABILISTIC_B", 3 => "PROBABILISTIC_C", 4 => "PROBABILISTIC_D", 5 => "EXACT_DEPRECATED", 6 => "ENTITY", 7 => "HOUSEHOLD"}
      VALID_VALUES = Set.new([EXACT, PROBABILISTIC_A, PROBABILISTIC_B, PROBABILISTIC_C, PROBABILISTIC_D, EXACT_DEPRECATED, ENTITY, HOUSEHOLD]).freeze
    end

    module PrecisionLevel
      NO_WATERFALLING = 0
      LEVEL1 = 1
      LEVEL2 = 2
      LEVEL3 = 3
      LEVEL4 = 4
      LEVEL5 = 5
      LEVEL6 = 6
      LEVEL7 = 7
      VALUE_MAP = {0 => "NO_WATERFALLING", 1 => "LEVEL1", 2 => "LEVEL2", 3 => "LEVEL3", 4 => "LEVEL4", 5 => "LEVEL5", 6 => "LEVEL6", 7 => "LEVEL7"}
      VALID_VALUES = Set.new([NO_WATERFALLING, LEVEL1, LEVEL2, LEVEL3, LEVEL4, LEVEL5, LEVEL6, LEVEL7]).freeze
    end

    module WaterfallLevel
      NO_WATERFALLING = 0
      INDIVIDUAL = 1
      NAME_AND_POSTAL = 2
      HOUSEHOLD = 3
      ZIP_PLUS_SIX = 4
      NAME_AND_CITY = 5
      ZIP_PLUS_FOUR = 6
      ZIP = 7
      VALUE_MAP = {0 => "NO_WATERFALLING", 1 => "INDIVIDUAL", 2 => "NAME_AND_POSTAL", 3 => "HOUSEHOLD", 4 => "ZIP_PLUS_SIX", 5 => "NAME_AND_CITY", 6 => "ZIP_PLUS_FOUR", 7 => "ZIP"}
      VALID_VALUES = Set.new([NO_WATERFALLING, INDIVIDUAL, NAME_AND_POSTAL, HOUSEHOLD, ZIP_PLUS_SIX, NAME_AND_CITY, ZIP_PLUS_FOUR, ZIP]).freeze
    end

    module MergeDataType
      PIN = 1
      FIELD = 2
      OPT_OUT = 3
      MAPPING = 4
      VALUE_MAP = {1 => "PIN", 2 => "FIELD", 3 => "OPT_OUT", 4 => "MAPPING"}
      VALID_VALUES = Set.new([PIN, FIELD, OPT_OUT, MAPPING]).freeze
    end

    module DataClassification
      NONE = 0
      BEHAVIORAL = 1
      VALUE_MAP = {0 => "NONE", 1 => "BEHAVIORAL"}
      VALID_VALUES = Set.new([NONE, BEHAVIORAL]).freeze
    end

    module RunMode
      NONE = 0
      PENDING_ONLY = 1
      ALL = 2
      VALUE_MAP = {0 => "NONE", 1 => "PENDING_ONLY", 2 => "ALL"}
      VALID_VALUES = Set.new([NONE, PENDING_ONLY, ALL]).freeze
    end

    module AudienceEventType
      RECOMP = 0
      VALUE_MAP = {0 => "RECOMP"}
      VALID_VALUES = Set.new([RECOMP]).freeze
    end

    module AudienceEventStatus
      REQUESTED = 0
      COMPLETED = 1
      CANCELLED = 2
      VALUE_MAP = {0 => "REQUESTED", 1 => "COMPLETED", 2 => "CANCELLED"}
      VALID_VALUES = Set.new([REQUESTED, COMPLETED, CANCELLED]).freeze
    end

    module Priority
      IMMEDIATE = 0
      HIGH = 1
      MEDIUM = 2
      LOW = 3
      VALUE_MAP = {0 => "IMMEDIATE", 1 => "HIGH", 2 => "MEDIUM", 3 => "LOW"}
      VALID_VALUES = Set.new([IMMEDIATE, HIGH, MEDIUM, LOW]).freeze
    end

    module RecompType
      AUDIENCE_BUILDER = 0
      WATERFALLER = 1
      ESP_BUILDER = 2
      AUDIENCE_STATS = 3
      HANK = 4
      ONLINE_AUDIENCE_BUILDER = 5
      MATCH_AUDIENCE_BUILDER = 6
      IDENTITY_RESOLVER = 7
      IDENTITY_STORES_BUILDER = 8
      PEMAP_BUILDER = 9
      ONLINE_AUDIENCE_STATS = 10
      WATERFALLER_QA_PROCESSOR = 11
      AUDIENCE_COMPILER = 12
      AUDIENCE_COMPILER_STATS = 13
      VALUE_MAP = {0 => "AUDIENCE_BUILDER", 1 => "WATERFALLER", 2 => "ESP_BUILDER", 3 => "AUDIENCE_STATS", 4 => "HANK", 5 => "ONLINE_AUDIENCE_BUILDER", 6 => "MATCH_AUDIENCE_BUILDER", 7 => "IDENTITY_RESOLVER", 8 => "IDENTITY_STORES_BUILDER", 9 => "PEMAP_BUILDER", 10 => "ONLINE_AUDIENCE_STATS", 11 => "WATERFALLER_QA_PROCESSOR", 12 => "AUDIENCE_COMPILER", 13 => "AUDIENCE_COMPILER_STATS"}
      VALID_VALUES = Set.new([AUDIENCE_BUILDER, WATERFALLER, ESP_BUILDER, AUDIENCE_STATS, HANK, ONLINE_AUDIENCE_BUILDER, MATCH_AUDIENCE_BUILDER, IDENTITY_RESOLVER, IDENTITY_STORES_BUILDER, PEMAP_BUILDER, ONLINE_AUDIENCE_STATS, WATERFALLER_QA_PROCESSOR, AUDIENCE_COMPILER, AUDIENCE_COMPILER_STATS]).freeze
    end

    module IOType
      INPUT = 0
      OUTPUT = 1
      VALUE_MAP = {0 => "INPUT", 1 => "OUTPUT"}
      VALID_VALUES = Set.new([INPUT, OUTPUT]).freeze
    end

    module AudienceDataType
      AUDIENCE_MEMBER = 1
      MATCHED_ENTITY = 2
      ESP = 3
      PEMAP = 4
      AUDIENCE_STATS = 5
      ONLINE_AUDIENCE_MEMBER = 6
      ONLINE_ESP = 7
      MATCH_AUDIENCE_MEMBER = 8
      SPLIT_PEMAP = 9
      ANONYMOUS_AUDIENCE_MEMBER = 10
      VALUE_MAP = {1 => "AUDIENCE_MEMBER", 2 => "MATCHED_ENTITY", 3 => "ESP", 4 => "PEMAP", 5 => "AUDIENCE_STATS", 6 => "ONLINE_AUDIENCE_MEMBER", 7 => "ONLINE_ESP", 8 => "MATCH_AUDIENCE_MEMBER", 9 => "SPLIT_PEMAP", 10 => "ANONYMOUS_AUDIENCE_MEMBER"}
      VALID_VALUES = Set.new([AUDIENCE_MEMBER, MATCHED_ENTITY, ESP, PEMAP, AUDIENCE_STATS, ONLINE_AUDIENCE_MEMBER, ONLINE_ESP, MATCH_AUDIENCE_MEMBER, SPLIT_PEMAP, ANONYMOUS_AUDIENCE_MEMBER]).freeze
    end

    module AudienceDataStatus
      QUARANTINED = 1
      PERSISTED = 2
      REJECTED = 3
      CREATED = 4
      DELETED = 5
      VALUE_MAP = {1 => "QUARANTINED", 2 => "PERSISTED", 3 => "REJECTED", 4 => "CREATED", 5 => "DELETED"}
      VALID_VALUES = Set.new([QUARANTINED, PERSISTED, REJECTED, CREATED, DELETED]).freeze
    end

    module CogMessageStatus
      IN_QUEUE = 1
      LOCKED = 2
      POPPED = 3
      VALUE_MAP = {1 => "IN_QUEUE", 2 => "LOCKED", 3 => "POPPED"}
      VALID_VALUES = Set.new([IN_QUEUE, LOCKED, POPPED]).freeze
    end

    module IrcPinCounter
      TOTAL_PINS = 1
      INVALID_PINS = 2
      TOTAL_PINS_PER_IRC = 3
      NEW_PINS_PER_IRC = 4
      VALUE_MAP = {1 => "TOTAL_PINS", 2 => "INVALID_PINS", 3 => "TOTAL_PINS_PER_IRC", 4 => "NEW_PINS_PER_IRC"}
      VALID_VALUES = Set.new([TOTAL_PINS, INVALID_PINS, TOTAL_PINS_PER_IRC, NEW_PINS_PER_IRC]).freeze
    end

    module OabLockStatus
      LOCKED = 1
      UNLOCKED = 2
      VALUE_MAP = {1 => "LOCKED", 2 => "UNLOCKED"}
      VALID_VALUES = Set.new([LOCKED, UNLOCKED]).freeze
    end

    module MobileMatchingAccuracyType
      DETERMINISTIC = 0
      STATISTICAL = 1
      VALUE_MAP = {0 => "DETERMINISTIC", 1 => "STATISTICAL"}
      VALID_VALUES = Set.new([DETERMINISTIC, STATISTICAL]).freeze
    end

    class TruncationInfo; end

    class AudienceMember; end

    class OnlineAudienceMember; end

    class ImportRecordKey; end

    class ImportRecordField; end

    class OnlineImportRecordPin; end

    class PinPartialAM; end

    class FieldPartialAM; end

    class OnlinePinPartialAM; end

    class HankPinAudienceMember; end

    class HankHashedPinAudienceMember; end

    class MatchPrecision; end

    class AudienceIdAndPrecisionAndCount; end

    class AnonymousMemberFields; end

    class AudienceUniqueKey; end

    class AudienceIdAndAnonymousMemberId; end

    class AudienceRunConfigContainer; end

    class AudienceBuilderRunConfigContainer; end

    class NormalizationPINPair; end

    class ImportRecordKeyAndPin; end

    class TruncationStatsRecord; end

    class TruncationStatsImport; end

    class AudienceRunMessage; end

    class AudienceAndImportsMessage; end

    class HankDeployMessage; end

    class QaCompleteMessage; end

    class QaPendingMessagesBatch; end

    class AudienceProcessingMessage; end

    class AudienceAndRunMode; end

    class AudienceAndVersion; end

    class DeliveredDestination; end

    class ServedAudienceMember; end

    class MatchedBackRecord; end

    class AudienceBuilderConfigMessage; end

    class IrcCount; end

    class PinAndAnonymousFields; end

    class TruncationInfo
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IMPORT_RECORDS = 1
      ELEMENTS = 2

      FIELDS = {
        IMPORT_RECORDS => {:type => ::Thrift::Types::I64, :name => 'import_records'},
        ELEMENTS => {:type => ::Thrift::Types::I64, :name => 'elements'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_records is unset!') unless @import_records
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field elements is unset!') unless @elements
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceMember
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      VERSION_NUMBER = 2
      KEY = 3
      MEMBER_ID = 4
      LRC_FIELDS = 5
      MATCHING_PIN_MAP = 7
      PIN_TRUNCATION_INFO_MAP = 8
      FIELD_TRUNCATION_INFO_MAP = 9
      RESTRICTED = 10

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        MEMBER_ID => {:type => ::Thrift::Types::STRING, :name => 'member_id', :binary => true},
        LRC_FIELDS => {:type => ::Thrift::Types::MAP, :name => 'lrc_fields', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::LRCField}}},
        MATCHING_PIN_MAP => {:type => ::Thrift::Types::MAP, :name => 'matching_pin_map', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::PIN}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}}},
        PIN_TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'pin_truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true},
        FIELD_TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'field_truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true},
        RESTRICTED => {:type => ::Thrift::Types::BOOL, :name => 'restricted', :default => false, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_id is unset!') unless @member_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrc_fields is unset!') unless @lrc_fields
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field matching_pin_map is unset!') unless @matching_pin_map
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OnlineAudienceMember
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      VERSION_NUMBER = 2
      KEY = 3
      MEMBER_ID = 4
      LRC_FIELDS = 5
      ONLINE_PIN_MAP = 7
      ONLINE_PIN_TRUNCATION_INFO_MAP = 8
      FIELD_TRUNCATION_INFO_MAP = 9

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        MEMBER_ID => {:type => ::Thrift::Types::STRING, :name => 'member_id', :binary => true},
        LRC_FIELDS => {:type => ::Thrift::Types::MAP, :name => 'lrc_fields', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::LRCField}}},
        ONLINE_PIN_MAP => {:type => ::Thrift::Types::MAP, :name => 'online_pin_map', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::OnlineData::OnlinePIN}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}}},
        ONLINE_PIN_TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'online_pin_truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true},
        FIELD_TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'field_truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_id is unset!') unless @member_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrc_fields is unset!') unless @lrc_fields
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field online_pin_map is unset!') unless @online_pin_map
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ImportRecordKey
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RECORD_ID = 1
      KEY = 2

      FIELDS = {
        RECORD_ID => {:type => ::Thrift::Types::STRUCT, :name => 'record_id', :class => ::Liveramp::Importer::ImportRecordID},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field record_id is unset!') unless @record_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ImportRecordField
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RECORD_ID = 1
      KEY = 2
      FIELDS = 3

      FIELDS = {
        RECORD_ID => {:type => ::Thrift::Types::STRUCT, :name => 'record_id', :class => ::Liveramp::Importer::ImportRecordID},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        FIELDS => {:type => ::Thrift::Types::LIST, :name => 'fields', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::LRCField}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field record_id is unset!') unless @record_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fields is unset!') unless @fields
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OnlineImportRecordPin
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RECORD_ID = 1
      KEY = 2
      ONLINE_PINS = 3

      FIELDS = {
        RECORD_ID => {:type => ::Thrift::Types::STRUCT, :name => 'record_id', :class => ::Liveramp::Importer::ImportRecordID},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        ONLINE_PINS => {:type => ::Thrift::Types::LIST, :name => 'online_pins', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::OnlineData::OnlinePIN}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field record_id is unset!') unless @record_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field online_pins is unset!') unless @online_pins
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PinPartialAM
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      VERSION_NUMBER = 2
      KEY = 3
      MEMBER_ID = 4
      IMPORT_PIN_MAP = 5
      TRUNCATION_INFO_MAP = 6

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        MEMBER_ID => {:type => ::Thrift::Types::STRING, :name => 'member_id', :binary => true},
        IMPORT_PIN_MAP => {:type => ::Thrift::Types::MAP, :name => 'import_pin_map', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::PIN}}},
        TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_id is unset!') unless @member_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_pin_map is unset!') unless @import_pin_map
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FieldPartialAM
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      VERSION_NUMBER = 2
      KEY = 3
      MEMBER_ID = 4
      IMPORT_LRC_FIELD_MAP = 5
      TRUNCATION_INFO_MAP = 6
      RESTRICTED = 7

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        MEMBER_ID => {:type => ::Thrift::Types::STRING, :name => 'member_id', :binary => true},
        IMPORT_LRC_FIELD_MAP => {:type => ::Thrift::Types::MAP, :name => 'import_lrc_field_map', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::LRCField}}},
        TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true},
        RESTRICTED => {:type => ::Thrift::Types::BOOL, :name => 'restricted', :default => false, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_id is unset!') unless @member_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_lrc_field_map is unset!') unless @import_lrc_field_map
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OnlinePinPartialAM
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      VERSION_NUMBER = 2
      KEY = 3
      MEMBER_ID = 4
      IMPORT_PIN_MAP = 5
      TRUNCATION_INFO_MAP = 6

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
        MEMBER_ID => {:type => ::Thrift::Types::STRING, :name => 'member_id', :binary => true},
        IMPORT_PIN_MAP => {:type => ::Thrift::Types::MAP, :name => 'import_pin_map', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Importer::ImportRecordID}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::OnlineData::OnlinePIN}}},
        TRUNCATION_INFO_MAP => {:type => ::Thrift::Types::MAP, :name => 'truncation_info_map', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::TruncationInfo}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_id is unset!') unless @member_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_pin_map is unset!') unless @import_pin_map
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HankPinAudienceMember
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VERSION_NUMBER = 1
      PINS = 2

      FIELDS = {
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        PINS => {:type => ::Thrift::Types::LIST, :name => 'pins', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::PIN}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pins is unset!') unless @pins
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HankHashedPinAudienceMember
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VERSION_NUMBER = 1
      HASHED_PINS = 2
      PIN_TYPE_TO_HASHED_PINS = 3

      FIELDS = {
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'},
        HASHED_PINS => {:type => ::Thrift::Types::LIST, :name => 'hashed_pins', :element => {:type => ::Thrift::Types::STRING, :binary => true}},
        PIN_TYPE_TO_HASHED_PINS => {:type => ::Thrift::Types::MAP, :name => 'pin_type_to_hashed_pins', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING, :binary => true}}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field hashed_pins is unset!') unless @hashed_pins
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MatchPrecision
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IMPORT_PRECISION = 1
      WATERFALL_PRECISION = 2

      FIELDS = {
        IMPORT_PRECISION => {:type => ::Thrift::Types::I32, :name => 'import_precision', :enum_class => ::Liveramp::Audience::PrecisionLevel},
        WATERFALL_PRECISION => {:type => ::Thrift::Types::I32, :name => 'waterfall_precision', :enum_class => ::Liveramp::Audience::PrecisionLevel}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_precision is unset!') unless @import_precision
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field waterfall_precision is unset!') unless @waterfall_precision
        unless @import_precision.nil? || ::Liveramp::Audience::PrecisionLevel::VALID_VALUES.include?(@import_precision)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_precision!')
        end
        unless @waterfall_precision.nil? || ::Liveramp::Audience::PrecisionLevel::VALID_VALUES.include?(@waterfall_precision)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field waterfall_precision!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceIdAndPrecisionAndCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      MATCH_PRECISION = 2
      COUNT = 3

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        MATCH_PRECISION => {:type => ::Thrift::Types::STRUCT, :name => 'match_precision', :class => ::Liveramp::Audience::MatchPrecision},
        COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field match_precision is unset!') unless @match_precision
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field count is unset!') unless @count
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AnonymousMemberFields
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HASHED_AUDIENCE_KEY = 1
      LRC_FIELDS = 2
      MATCH_PRECISION = 3
      VERSION_NUMBER = 4

      FIELDS = {
        HASHED_AUDIENCE_KEY => {:type => ::Thrift::Types::STRING, :name => 'hashed_audience_key', :binary => true},
        LRC_FIELDS => {:type => ::Thrift::Types::LIST, :name => 'lrc_fields', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::LRCField}},
        MATCH_PRECISION => {:type => ::Thrift::Types::STRUCT, :name => 'match_precision', :class => ::Liveramp::Audience::MatchPrecision},
        VERSION_NUMBER => {:type => ::Thrift::Types::I32, :name => 'version_number'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field hashed_audience_key is unset!') unless @hashed_audience_key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrc_fields is unset!') unless @lrc_fields
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field match_precision is unset!') unless @match_precision
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version_number is unset!') unless @version_number
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceUniqueKey
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      KEY = 2

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceIdAndAnonymousMemberId
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      ANONYMOUS_MEMBER_ID = 2

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        ANONYMOUS_MEMBER_ID => {:type => ::Thrift::Types::STRING, :name => 'anonymous_member_id', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field anonymous_member_id is unset!') unless @anonymous_member_id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceRunConfigContainer
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      RUN_MODE = 2
      ACTIVE_IMPORT_IDS = 3
      IMPORT_IDS_TO_PROCESS = 4
      AUDIENCE_VERSION = 5
      ACTIVE_PIN_IMPORT_IDS = 6
      ACTIVE_FIELD_IMPORT_IDS = 7
      ACTIVE_FIELD_IDS = 8

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        RUN_MODE => {:type => ::Thrift::Types::I32, :name => 'run_mode', :enum_class => ::Liveramp::Audience::RunMode},
        ACTIVE_IMPORT_IDS => {:type => ::Thrift::Types::SET, :name => 'active_import_ids', :element => {:type => ::Thrift::Types::I64}, :optional => true},
        IMPORT_IDS_TO_PROCESS => {:type => ::Thrift::Types::SET, :name => 'import_ids_to_process', :element => {:type => ::Thrift::Types::I64}},
        AUDIENCE_VERSION => {:type => ::Thrift::Types::I32, :name => 'audience_version'},
        ACTIVE_PIN_IMPORT_IDS => {:type => ::Thrift::Types::SET, :name => 'active_pin_import_ids', :element => {:type => ::Thrift::Types::I64}, :optional => true},
        ACTIVE_FIELD_IMPORT_IDS => {:type => ::Thrift::Types::SET, :name => 'active_field_import_ids', :element => {:type => ::Thrift::Types::I64}, :optional => true},
        ACTIVE_FIELD_IDS => {:type => ::Thrift::Types::SET, :name => 'active_field_ids', :element => {:type => ::Thrift::Types::I64}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field run_mode is unset!') unless @run_mode
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_ids_to_process is unset!') unless @import_ids_to_process
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_version is unset!') unless @audience_version
        unless @run_mode.nil? || ::Liveramp::Audience::RunMode::VALID_VALUES.include?(@run_mode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field run_mode!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceBuilderRunConfigContainer
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_RUN_CONFIGS = 1
      IMPORT_IDS_TO_PROCESS = 2

      FIELDS = {
        AUDIENCE_RUN_CONFIGS => {:type => ::Thrift::Types::MAP, :name => 'audience_run_configs', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::AudienceRunConfigContainer}},
        IMPORT_IDS_TO_PROCESS => {:type => ::Thrift::Types::SET, :name => 'import_ids_to_process', :element => {:type => ::Thrift::Types::I64}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_run_configs is unset!') unless @audience_run_configs
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_ids_to_process is unset!') unless @import_ids_to_process
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NormalizationPINPair
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RAW_PIN = 1
      NORM_PIN = 2

      FIELDS = {
        RAW_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'raw_pin', :class => ::Rapleaf::Types::NewPersonData::PIN},
        NORM_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'norm_pin', :class => ::Rapleaf::Types::NewPersonData::PIN}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field raw_pin is unset!') unless @raw_pin
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field norm_pin is unset!') unless @norm_pin
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ImportRecordKeyAndPin
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IMPORT_RECORD_KEY = 1
      PIN = 2

      FIELDS = {
        IMPORT_RECORD_KEY => {:type => ::Thrift::Types::STRUCT, :name => 'import_record_key', :class => ::Liveramp::Audience::ImportRecordKey},
        PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_record_key is unset!') unless @import_record_key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin is unset!') unless @pin
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TruncationStatsRecord
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AFFECTED_MEMBERS = 1
      SUM_ELEMENTS_TRUNCATED = 2
      IMPORT_RECORDS_AFFECTED = 3

      FIELDS = {
        AFFECTED_MEMBERS => {:type => ::Thrift::Types::I64, :name => 'affected_members'},
        SUM_ELEMENTS_TRUNCATED => {:type => ::Thrift::Types::I64, :name => 'sum_elements_truncated'},
        IMPORT_RECORDS_AFFECTED => {:type => ::Thrift::Types::I64, :name => 'import_records_affected'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field affected_members is unset!') unless @affected_members
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field sum_elements_truncated is unset!') unless @sum_elements_truncated
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_records_affected is unset!') unless @import_records_affected
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TruncationStatsImport
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      IRC_ID = 2
      STATS_PINS = 3
      STATS_FIELDS = 4

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        IRC_ID => {:type => ::Thrift::Types::I64, :name => 'irc_id'},
        STATS_PINS => {:type => ::Thrift::Types::STRUCT, :name => 'stats_pins', :class => ::Liveramp::Audience::TruncationStatsRecord},
        STATS_FIELDS => {:type => ::Thrift::Types::STRUCT, :name => 'stats_fields', :class => ::Liveramp::Audience::TruncationStatsRecord}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field irc_id is unset!') unless @irc_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field stats_pins is unset!') unless @stats_pins
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field stats_fields is unset!') unless @stats_fields
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceRunMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_RUN_ID = 1
      AUDIENCES = 2

      FIELDS = {
        AUDIENCE_RUN_ID => {:type => ::Thrift::Types::I64, :name => 'audience_run_id'},
        AUDIENCES => {:type => ::Thrift::Types::SET, :name => 'audiences', :element => {:type => ::Thrift::Types::I64}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_run_id is unset!') unless @audience_run_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audiences is unset!') unless @audiences
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceAndImportsMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      AUDIENCE_VERSION = 2
      LIVERAMP_IMPORT_REQUESTS = 3

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        AUDIENCE_VERSION => {:type => ::Thrift::Types::I32, :name => 'audience_version'},
        LIVERAMP_IMPORT_REQUESTS => {:type => ::Thrift::Types::LIST, :name => 'liveramp_import_requests', :element => {:type => ::Thrift::Types::I64}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_version is unset!') unless @audience_version
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field liveramp_import_requests is unset!') unless @liveramp_import_requests
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HankDeployMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_AND_IMPORTS = 1
      DOMAIN_VERSIONS = 2

      FIELDS = {
        AUDIENCE_AND_IMPORTS => {:type => ::Thrift::Types::STRUCT, :name => 'audience_and_imports', :class => ::Liveramp::Audience::AudienceAndImportsMessage},
        DOMAIN_VERSIONS => {:type => ::Thrift::Types::MAP, :name => 'domain_versions', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_and_imports is unset!') unless @audience_and_imports
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field domain_versions is unset!') unless @domain_versions
      end

      ::Thrift::Struct.generate_accessors self
    end

    class QaCompleteMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      AUDIENCE_VERSION = 2
      LIVERAMP_IMPORT_REQUESTS = 3
      PASSED_QA = 4
      ALL_ACTIVE_LIVERAMP_IMPORT_REQUESTS = 5

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        AUDIENCE_VERSION => {:type => ::Thrift::Types::I32, :name => 'audience_version'},
        LIVERAMP_IMPORT_REQUESTS => {:type => ::Thrift::Types::LIST, :name => 'liveramp_import_requests', :element => {:type => ::Thrift::Types::I64}},
        PASSED_QA => {:type => ::Thrift::Types::BOOL, :name => 'passed_qa'},
        ALL_ACTIVE_LIVERAMP_IMPORT_REQUESTS => {:type => ::Thrift::Types::LIST, :name => 'all_active_liveramp_import_requests', :element => {:type => ::Thrift::Types::I64}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_version is unset!') unless @audience_version
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field liveramp_import_requests is unset!') unless @liveramp_import_requests
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field passed_qa is unset!') if @passed_qa.nil?
      end

      ::Thrift::Struct.generate_accessors self
    end

    class QaPendingMessagesBatch
      include ::Thrift::Struct, ::Thrift::Struct_Union
      WATERFALLER_RUN_ID = 1
      QA_PENDING_MESSAGES = 2
      TIMESTAMP = 3

      FIELDS = {
        WATERFALLER_RUN_ID => {:type => ::Thrift::Types::I32, :name => 'waterfaller_run_id'},
        QA_PENDING_MESSAGES => {:type => ::Thrift::Types::LIST, :name => 'qa_pending_messages', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::QaCompleteMessage}},
        TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field waterfaller_run_id is unset!') unless @waterfaller_run_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field qa_pending_messages is unset!') unless @qa_pending_messages
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceProcessingMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      AUDIENCE_VERSION = 2
      DATA_PATHS = 3
      IMPORTS_TO_PROCESS = 4
      ACTIVE_PIN_IMPORTS = 5
      ACTIVE_FIELD_IMPORTS = 6
      ACTIVE_FIELDS = 7
      RUN_MODE = 8

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        AUDIENCE_VERSION => {:type => ::Thrift::Types::I32, :name => 'audience_version'},
        DATA_PATHS => {:type => ::Thrift::Types::LIST, :name => 'data_paths', :element => {:type => ::Thrift::Types::STRING}},
        IMPORTS_TO_PROCESS => {:type => ::Thrift::Types::LIST, :name => 'imports_to_process', :element => {:type => ::Thrift::Types::I64}},
        ACTIVE_PIN_IMPORTS => {:type => ::Thrift::Types::LIST, :name => 'active_pin_imports', :element => {:type => ::Thrift::Types::I64}},
        ACTIVE_FIELD_IMPORTS => {:type => ::Thrift::Types::LIST, :name => 'active_field_imports', :element => {:type => ::Thrift::Types::I64}},
        ACTIVE_FIELDS => {:type => ::Thrift::Types::LIST, :name => 'active_fields', :element => {:type => ::Thrift::Types::I64}},
        RUN_MODE => {:type => ::Thrift::Types::I32, :name => 'run_mode', :enum_class => ::Liveramp::Audience::RunMode}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_version is unset!') unless @audience_version
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field data_paths is unset!') unless @data_paths
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field imports_to_process is unset!') unless @imports_to_process
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field active_pin_imports is unset!') unless @active_pin_imports
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field active_field_imports is unset!') unless @active_field_imports
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field active_fields is unset!') unless @active_fields
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field run_mode is unset!') unless @run_mode
        unless @run_mode.nil? || ::Liveramp::Audience::RunMode::VALID_VALUES.include?(@run_mode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field run_mode!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceAndRunMode
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      RUN_MODE = 2

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        RUN_MODE => {:type => ::Thrift::Types::I32, :name => 'run_mode', :enum_class => ::Liveramp::Audience::RunMode}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field run_mode is unset!') unless @run_mode
        unless @run_mode.nil? || ::Liveramp::Audience::RunMode::VALID_VALUES.include?(@run_mode)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field run_mode!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceAndVersion
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUDIENCE_ID = 1
      VERSION = 2

      FIELDS = {
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        VERSION => {:type => ::Thrift::Types::I32, :name => 'version'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field version is unset!') unless @version
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeliveredDestination
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DESTINATION_ID = 1

      FIELDS = {
        DESTINATION_ID => {:type => ::Thrift::Types::I32, :name => 'destination_id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field destination_id is unset!') unless @destination_id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ServedAudienceMember
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HASHED_AUDIENCE_KEY = 1
      AUDIENCE_VERSIONS = 2
      DELIVERED_DESTINATIONS_BY_AUDIENCE_AND_VERSION = 3

      FIELDS = {
        HASHED_AUDIENCE_KEY => {:type => ::Thrift::Types::STRING, :name => 'hashed_audience_key', :binary => true},
        AUDIENCE_VERSIONS => {:type => ::Thrift::Types::MAP, :name => 'audience_versions', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I32}}, :optional => true},
        DELIVERED_DESTINATIONS_BY_AUDIENCE_AND_VERSION => {:type => ::Thrift::Types::MAP, :name => 'delivered_destinations_by_audience_and_version', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::AudienceAndVersion}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Audience::DeliveredDestination}}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field hashed_audience_key is unset!') unless @hashed_audience_key
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MatchedBackRecord
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RECORD_ID = 1
      ADDITIONALFIELDS = 2
      MATCHED = 3
      MATCHED_BY_DESTINATION = 4

      FIELDS = {
        RECORD_ID => {:type => ::Thrift::Types::STRUCT, :name => 'record_id', :class => ::Liveramp::Importer::ImportRecordID},
        ADDITIONALFIELDS => {:type => ::Thrift::Types::LIST, :name => 'additionalFields', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        MATCHED => {:type => ::Thrift::Types::BOOL, :name => 'matched', :optional => true},
        MATCHED_BY_DESTINATION => {:type => ::Thrift::Types::MAP, :name => 'matched_by_destination', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::BOOL}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AudienceBuilderConfigMessage
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STRING_VALUE = 1

      FIELDS = {
        STRING_VALUE => {:type => ::Thrift::Types::STRING, :name => 'string_value'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field string_value is unset!') unless @string_value
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IrcCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COUNTER = 1
      IRC_ID = 2
      COUNT = 3

      FIELDS = {
        COUNTER => {:type => ::Thrift::Types::I32, :name => 'counter', :enum_class => ::Liveramp::Audience::IrcPinCounter},
        IRC_ID => {:type => ::Thrift::Types::I64, :name => 'irc_id'},
        COUNT => {:type => ::Thrift::Types::I64, :name => 'count'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field counter is unset!') unless @counter
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field irc_id is unset!') unless @irc_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field count is unset!') unless @count
        unless @counter.nil? || ::Liveramp::Audience::IrcPinCounter::VALID_VALUES.include?(@counter)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field counter!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PinAndAnonymousFields
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PIN = 1
      AUDIENCE_ID = 2
      AUDIENCE_FIELDS = 3

      FIELDS = {
        PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN},
        AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
        AUDIENCE_FIELDS => {:type => ::Thrift::Types::STRUCT, :name => 'audience_fields', :class => ::Liveramp::Audience::AnonymousMemberFields}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin is unset!') unless @pin
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_fields is unset!') unless @audience_fields
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
