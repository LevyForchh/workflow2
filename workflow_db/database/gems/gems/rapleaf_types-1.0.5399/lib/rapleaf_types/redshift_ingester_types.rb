#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'util_types'
require File.join File.dirname(__FILE__), 'servile_types'


module Liveramp
  module RedshiftIngester
    module LoadStatus
      PENDING = 1
      IN_PROGRESS = 2
      COMPLETED = 3
      FAILED = 4
      VALUE_MAP = {1 => "PENDING", 2 => "IN_PROGRESS", 3 => "COMPLETED", 4 => "FAILED"}
      VALID_VALUES = Set.new([PENDING, IN_PROGRESS, COMPLETED, FAILED]).freeze
    end

    module Format
      CSV = 1
      JSON_ARRAY = 2
      JSON_OBJECT = 3
      VALUE_MAP = {1 => "CSV", 2 => "JSON_ARRAY", 3 => "JSON_OBJECT"}
      VALID_VALUES = Set.new([CSV, JSON_ARRAY, JSON_OBJECT]).freeze
    end

    module CompressionType
      GZIP = 1
      VALUE_MAP = {1 => "GZIP"}
      VALID_VALUES = Set.new([GZIP]).freeze
    end

    class QueryRunnerConfig; end

    class QueryResponse; end

    class TableDefinition; end

    class SchemaDefinition; end

    class ForeignKey; end

    class TableCreationOptions; end

    class DataOptions; end

    class CopyConfig; end

    class LoaderConfig; end

    # The config to be passed to the RedshiftQueryRunnerService.
    class QueryRunnerConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      QUERY_STRING = 1
      EMAILS = 2

      FIELDS = {
        # The SQL query. Can contain placeholders.
        QUERY_STRING => {:type => ::Thrift::Types::STRING, :name => 'query_string'},
        # List of email addresses to send error messages to.
        EMAILS => {:type => ::Thrift::Types::LIST, :name => 'emails', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field query_string is unset!') unless @query_string
      end

      ::Thrift::Struct.generate_accessors self
    end

    class QueryResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COLUMNS = 1
      ROWS = 2

      FIELDS = {
        COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRING}},
        ROWS => {:type => ::Thrift::Types::LIST, :name => 'rows', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columns is unset!') unless @columns
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field rows is unset!') unless @rows
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TableDefinition
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TABLE_NAME = 1
      COLUMN_NAMES = 2

      FIELDS = {
        TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
        COLUMN_NAMES => {:type => ::Thrift::Types::LIST, :name => 'column_names', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field table_name is unset!') unless @table_name
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field column_names is unset!') unless @column_names
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SchemaDefinition
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SCHEMA_NAME = 1
      SCHEMA_OWNER = 2

      FIELDS = {
        SCHEMA_NAME => {:type => ::Thrift::Types::STRING, :name => 'schema_name'},
        SCHEMA_OWNER => {:type => ::Thrift::Types::I32, :name => 'schema_owner', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field schema_name is unset!') unless @schema_name
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ForeignKey
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COLUMNS = 1
      FOREIGN_TABLE = 2
      FOREIGN_COLUMNS = 3

      FIELDS = {
        COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRING}},
        FOREIGN_TABLE => {:type => ::Thrift::Types::STRING, :name => 'foreign_table'},
        FOREIGN_COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'foreign_columns', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columns is unset!') unless @columns
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field foreign_table is unset!') unless @foreign_table
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field foreign_columns is unset!') unless @foreign_columns
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TableCreationOptions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TEMPLATE_TABLE = 1
      PRIMARY_KEY = 2
      FOREIGN_KEYS = 3

      FIELDS = {
        TEMPLATE_TABLE => {:type => ::Thrift::Types::STRING, :name => 'template_table'},
        PRIMARY_KEY => {:type => ::Thrift::Types::LIST, :name => 'primary_key', :element => {:type => ::Thrift::Types::STRING}},
        FOREIGN_KEYS => {:type => ::Thrift::Types::LIST, :name => 'foreign_keys', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::RedshiftIngester::ForeignKey}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field template_table is unset!') unless @template_table
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field primary_key is unset!') unless @primary_key
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field foreign_keys is unset!') unless @foreign_keys
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DataOptions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EMPTY_AS_NULL = 1
      TRUNCATE_COLUMNS = 2
      ACCEPT_INVCHARS = 3
      MAX_ERROR = 4

      FIELDS = {
        EMPTY_AS_NULL => {:type => ::Thrift::Types::BOOL, :name => 'empty_as_null', :default => true, :optional => true},
        TRUNCATE_COLUMNS => {:type => ::Thrift::Types::BOOL, :name => 'truncate_columns', :default => true, :optional => true},
        ACCEPT_INVCHARS => {:type => ::Thrift::Types::BOOL, :name => 'accept_invchars', :default => true, :optional => true},
        MAX_ERROR => {:type => ::Thrift::Types::I32, :name => 'max_error', :default => 0, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CopyConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATA_PATH = 1
      DATA_FORMAT = 2
      JSON_PATHS = 3
      COMPRESSION = 4
      DATA_OPTIONS = 5
      COLUMNS = 6

      FIELDS = {
        DATA_PATH => {:type => ::Thrift::Types::STRING, :name => 'data_path'},
        DATA_FORMAT => {:type => ::Thrift::Types::I32, :name => 'data_format', :default =>         2, :optional => true, :enum_class => ::Liveramp::RedshiftIngester::Format},
        JSON_PATHS => {:type => ::Thrift::Types::STRING, :name => 'json_paths', :default => %q"auto", :optional => true},
        COMPRESSION => {:type => ::Thrift::Types::I32, :name => 'compression', :default =>         1, :optional => true, :enum_class => ::Liveramp::RedshiftIngester::CompressionType},
        DATA_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'data_options', :default => ::Liveramp::RedshiftIngester::DataOptions.new({
          %q"empty_as_null" => true,
          %q"truncate_columns" => true,
          %q"accept_invchars" => true,
          %q"max_error" => 0,
        }), :class => ::Liveramp::RedshiftIngester::DataOptions, :optional => true},
        COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field data_path is unset!') unless @data_path
        unless @data_format.nil? || ::Liveramp::RedshiftIngester::Format::VALID_VALUES.include?(@data_format)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field data_format!')
        end
        unless @compression.nil? || ::Liveramp::RedshiftIngester::CompressionType::VALID_VALUES.include?(@compression)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field compression!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class LoaderConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TABLE_NAME = 1
      TABLE_CREATION_OPTIONS = 2
      COPY_CONFIG = 3

      FIELDS = {
        TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
        TABLE_CREATION_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'table_creation_options', :class => ::Liveramp::RedshiftIngester::TableCreationOptions, :optional => true},
        COPY_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'copy_config', :class => ::Liveramp::RedshiftIngester::CopyConfig}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field table_name is unset!') unless @table_name
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field copy_config is unset!') unless @copy_config
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
