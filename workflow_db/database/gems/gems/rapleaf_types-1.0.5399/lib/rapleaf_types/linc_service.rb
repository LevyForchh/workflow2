#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'linc_service_types'

module Liveramp
  module Types
    module LincService
      module LincService
        class Client
          include ::Thrift::Client

          def create_feed(match_data_provider_id, feed_options, creator_id)
            send_create_feed(match_data_provider_id, feed_options, creator_id)
            return recv_create_feed()
          end

          def send_create_feed(match_data_provider_id, feed_options, creator_id)
            send_message('create_feed', Create_feed_args, :match_data_provider_id => match_data_provider_id, :feed_options => feed_options, :creator_id => creator_id)
          end

          def recv_create_feed()
            result = receive_message(Create_feed_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_feed failed: unknown result')
          end

          def update_feed(feed_id, feed_options)
            send_update_feed(feed_id, feed_options)
            recv_update_feed()
          end

          def send_update_feed(feed_id, feed_options)
            send_message('update_feed', Update_feed_args, :feed_id => feed_id, :feed_options => feed_options)
          end

          def recv_update_feed()
            result = receive_message(Update_feed_result)
            return
          end

          def list_feeds(match_data_provider_id)
            send_list_feeds(match_data_provider_id)
            return recv_list_feeds()
          end

          def send_list_feeds(match_data_provider_id)
            send_message('list_feeds', List_feeds_args, :match_data_provider_id => match_data_provider_id)
          end

          def recv_list_feeds()
            result = receive_message(List_feeds_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_feeds failed: unknown result')
          end

          def add_file(path_to_file, customer_id, uploaded_at)
            send_add_file(path_to_file, customer_id, uploaded_at)
            return recv_add_file()
          end

          def send_add_file(path_to_file, customer_id, uploaded_at)
            send_message('add_file', Add_file_args, :path_to_file => path_to_file, :customer_id => customer_id, :uploaded_at => uploaded_at)
          end

          def recv_add_file()
            result = receive_message(Add_file_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_file failed: unknown result')
          end

          def ingest_match_data_file(customer_file_id, file_configuration, import_configuration, feed_id, full_refresh, creator_id)
            send_ingest_match_data_file(customer_file_id, file_configuration, import_configuration, feed_id, full_refresh, creator_id)
            return recv_ingest_match_data_file()
          end

          def send_ingest_match_data_file(customer_file_id, file_configuration, import_configuration, feed_id, full_refresh, creator_id)
            send_message('ingest_match_data_file', Ingest_match_data_file_args, :customer_file_id => customer_file_id, :file_configuration => file_configuration, :import_configuration => import_configuration, :feed_id => feed_id, :full_refresh => full_refresh, :creator_id => creator_id)
          end

          def recv_ingest_match_data_file()
            result = receive_message(Ingest_match_data_file_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ingest_match_data_file failed: unknown result')
          end

          def get_pel_ingestion_config(name, customer_id, publisher_subnetwork_id)
            send_get_pel_ingestion_config(name, customer_id, publisher_subnetwork_id)
            return recv_get_pel_ingestion_config()
          end

          def send_get_pel_ingestion_config(name, customer_id, publisher_subnetwork_id)
            send_message('get_pel_ingestion_config', Get_pel_ingestion_config_args, :name => name, :customer_id => customer_id, :publisher_subnetwork_id => publisher_subnetwork_id)
          end

          def recv_get_pel_ingestion_config()
            result = receive_message(Get_pel_ingestion_config_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_pel_ingestion_config failed: unknown result')
          end

          def ingest_pel_pel_file(request)
            send_ingest_pel_pel_file(request)
            return recv_ingest_pel_pel_file()
          end

          def send_ingest_pel_pel_file(request)
            send_message('ingest_pel_pel_file', Ingest_pel_pel_file_args, :request => request)
          end

          def recv_ingest_pel_pel_file()
            result = receive_message(Ingest_pel_pel_file_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ingest_pel_pel_file failed: unknown result')
          end

          def get_all_lincs(feed_id)
            send_get_all_lincs(feed_id)
            return recv_get_all_lincs()
          end

          def send_get_all_lincs(feed_id)
            send_message('get_all_lincs', Get_all_lincs_args, :feed_id => feed_id)
          end

          def recv_get_all_lincs()
            result = receive_message(Get_all_lincs_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_lincs failed: unknown result')
          end

          def set_linc_active_status(linc_id, is_active)
            send_set_linc_active_status(linc_id, is_active)
            recv_set_linc_active_status()
          end

          def send_set_linc_active_status(linc_id, is_active)
            send_message('set_linc_active_status', Set_linc_active_status_args, :linc_id => linc_id, :is_active => is_active)
          end

          def recv_set_linc_active_status()
            result = receive_message(Set_linc_active_status_result)
            return
          end

          def set_linc_feed_active_status(feed_id, is_active)
            send_set_linc_feed_active_status(feed_id, is_active)
            recv_set_linc_feed_active_status()
          end

          def send_set_linc_feed_active_status(feed_id, is_active)
            send_message('set_linc_feed_active_status', Set_linc_feed_active_status_args, :feed_id => feed_id, :is_active => is_active)
          end

          def recv_set_linc_feed_active_status()
            result = receive_message(Set_linc_feed_active_status_result)
            return
          end

          def list_use_cases()
            send_list_use_cases()
            return recv_list_use_cases()
          end

          def send_list_use_cases()
            send_message('list_use_cases', List_use_cases_args)
          end

          def recv_list_use_cases()
            result = receive_message(List_use_cases_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_use_cases failed: unknown result')
          end

          def get_edge_import_configuration(edge_store_id)
            send_get_edge_import_configuration(edge_store_id)
            return recv_get_edge_import_configuration()
          end

          def send_get_edge_import_configuration(edge_store_id)
            send_message('get_edge_import_configuration', Get_edge_import_configuration_args, :edge_store_id => edge_store_id)
          end

          def recv_get_edge_import_configuration()
            result = receive_message(Get_edge_import_configuration_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_edge_import_configuration failed: unknown result')
          end

          def get_identifier_metadata_import_configuration(identifier_metadata_store_id)
            send_get_identifier_metadata_import_configuration(identifier_metadata_store_id)
            return recv_get_identifier_metadata_import_configuration()
          end

          def send_get_identifier_metadata_import_configuration(identifier_metadata_store_id)
            send_message('get_identifier_metadata_import_configuration', Get_identifier_metadata_import_configuration_args, :identifier_metadata_store_id => identifier_metadata_store_id)
          end

          def recv_get_identifier_metadata_import_configuration()
            result = receive_message(Get_identifier_metadata_import_configuration_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_identifier_metadata_import_configuration failed: unknown result')
          end

          def get_import_info(linc_id)
            send_get_import_info(linc_id)
            return recv_get_import_info()
          end

          def send_get_import_info(linc_id)
            send_message('get_import_info', Get_import_info_args, :linc_id => linc_id)
          end

          def recv_get_import_info()
            result = receive_message(Get_import_info_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_import_info failed: unknown result')
          end

          def get_import_configuration(linc_id)
            send_get_import_configuration(linc_id)
            return recv_get_import_configuration()
          end

          def send_get_import_configuration(linc_id)
            send_message('get_import_configuration', Get_import_configuration_args, :linc_id => linc_id)
          end

          def recv_get_import_configuration()
            result = receive_message(Get_import_configuration_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_import_configuration failed: unknown result')
          end

          def delete_lincs(linc_id)
            send_delete_lincs(linc_id)
            recv_delete_lincs()
          end

          def send_delete_lincs(linc_id)
            send_message('delete_lincs', Delete_lincs_args, :linc_id => linc_id)
          end

          def recv_delete_lincs()
            result = receive_message(Delete_lincs_result)
            return
          end

          def delete_linc_feeds(linc_feed_ids)
            send_delete_linc_feeds(linc_feed_ids)
            recv_delete_linc_feeds()
          end

          def send_delete_linc_feeds(linc_feed_ids)
            send_message('delete_linc_feeds', Delete_linc_feeds_args, :linc_feed_ids => linc_feed_ids)
          end

          def recv_delete_linc_feeds()
            result = receive_message(Delete_linc_feeds_result)
            return
          end

          def set_linc_feed_state(all_desired_lincs_for_feed)
            send_set_linc_feed_state(all_desired_lincs_for_feed)
            recv_set_linc_feed_state()
          end

          def send_set_linc_feed_state(all_desired_lincs_for_feed)
            send_message('set_linc_feed_state', Set_linc_feed_state_args, :all_desired_lincs_for_feed => all_desired_lincs_for_feed)
          end

          def recv_set_linc_feed_state()
            result = receive_message(Set_linc_feed_state_result)
            raise result.internal_error unless result.internal_error.nil?
            return
          end

          def delete_linc_for_lir(liveramp_import_request_id)
            send_delete_linc_for_lir(liveramp_import_request_id)
          end

          def send_delete_linc_for_lir(liveramp_import_request_id)
            send_oneway_message('delete_linc_for_lir', Delete_linc_for_lir_args, :liveramp_import_request_id => liveramp_import_request_id)
          end
          def validate_linc_import(liveramp_import_request_id, alert)
            send_validate_linc_import(liveramp_import_request_id, alert)
            return recv_validate_linc_import()
          end

          def send_validate_linc_import(liveramp_import_request_id, alert)
            send_message('validate_linc_import', Validate_linc_import_args, :liveramp_import_request_id => liveramp_import_request_id, :alert => alert)
          end

          def recv_validate_linc_import()
            result = receive_message(Validate_linc_import_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validate_linc_import failed: unknown result')
          end

          def request_linc_transition(liveramp_import_request_id, enforce)
            send_request_linc_transition(liveramp_import_request_id, enforce)
          end

          def send_request_linc_transition(liveramp_import_request_id, enforce)
            send_oneway_message('request_linc_transition', Request_linc_transition_args, :liveramp_import_request_id => liveramp_import_request_id, :enforce => enforce)
          end
        end

        class Processor
          include ::Thrift::Processor

          def process_create_feed(seqid, iprot, oprot)
            args = read_args(iprot, Create_feed_args)
            result = Create_feed_result.new()
            result.success = @handler.create_feed(args.match_data_provider_id, args.feed_options, args.creator_id)
            write_result(result, oprot, 'create_feed', seqid)
          end

          def process_update_feed(seqid, iprot, oprot)
            args = read_args(iprot, Update_feed_args)
            result = Update_feed_result.new()
            @handler.update_feed(args.feed_id, args.feed_options)
            write_result(result, oprot, 'update_feed', seqid)
          end

          def process_list_feeds(seqid, iprot, oprot)
            args = read_args(iprot, List_feeds_args)
            result = List_feeds_result.new()
            result.success = @handler.list_feeds(args.match_data_provider_id)
            write_result(result, oprot, 'list_feeds', seqid)
          end

          def process_add_file(seqid, iprot, oprot)
            args = read_args(iprot, Add_file_args)
            result = Add_file_result.new()
            result.success = @handler.add_file(args.path_to_file, args.customer_id, args.uploaded_at)
            write_result(result, oprot, 'add_file', seqid)
          end

          def process_ingest_match_data_file(seqid, iprot, oprot)
            args = read_args(iprot, Ingest_match_data_file_args)
            result = Ingest_match_data_file_result.new()
            begin
              result.success = @handler.ingest_match_data_file(args.customer_file_id, args.file_configuration, args.import_configuration, args.feed_id, args.full_refresh, args.creator_id)
            rescue ::Liveramp::Types::LincService::InvalidConfigurationException => e
              result.e = e
            end
            write_result(result, oprot, 'ingest_match_data_file', seqid)
          end

          def process_get_pel_ingestion_config(seqid, iprot, oprot)
            args = read_args(iprot, Get_pel_ingestion_config_args)
            result = Get_pel_ingestion_config_result.new()
            result.success = @handler.get_pel_ingestion_config(args.name, args.customer_id, args.publisher_subnetwork_id)
            write_result(result, oprot, 'get_pel_ingestion_config', seqid)
          end

          def process_ingest_pel_pel_file(seqid, iprot, oprot)
            args = read_args(iprot, Ingest_pel_pel_file_args)
            result = Ingest_pel_pel_file_result.new()
            begin
              result.success = @handler.ingest_pel_pel_file(args.request)
            rescue ::Liveramp::Types::LincService::InvalidConfigurationException => e
              result.e = e
            end
            write_result(result, oprot, 'ingest_pel_pel_file', seqid)
          end

          def process_get_all_lincs(seqid, iprot, oprot)
            args = read_args(iprot, Get_all_lincs_args)
            result = Get_all_lincs_result.new()
            result.success = @handler.get_all_lincs(args.feed_id)
            write_result(result, oprot, 'get_all_lincs', seqid)
          end

          def process_set_linc_active_status(seqid, iprot, oprot)
            args = read_args(iprot, Set_linc_active_status_args)
            result = Set_linc_active_status_result.new()
            @handler.set_linc_active_status(args.linc_id, args.is_active)
            write_result(result, oprot, 'set_linc_active_status', seqid)
          end

          def process_set_linc_feed_active_status(seqid, iprot, oprot)
            args = read_args(iprot, Set_linc_feed_active_status_args)
            result = Set_linc_feed_active_status_result.new()
            @handler.set_linc_feed_active_status(args.feed_id, args.is_active)
            write_result(result, oprot, 'set_linc_feed_active_status', seqid)
          end

          def process_list_use_cases(seqid, iprot, oprot)
            args = read_args(iprot, List_use_cases_args)
            result = List_use_cases_result.new()
            result.success = @handler.list_use_cases()
            write_result(result, oprot, 'list_use_cases', seqid)
          end

          def process_get_edge_import_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Get_edge_import_configuration_args)
            result = Get_edge_import_configuration_result.new()
            result.success = @handler.get_edge_import_configuration(args.edge_store_id)
            write_result(result, oprot, 'get_edge_import_configuration', seqid)
          end

          def process_get_identifier_metadata_import_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Get_identifier_metadata_import_configuration_args)
            result = Get_identifier_metadata_import_configuration_result.new()
            result.success = @handler.get_identifier_metadata_import_configuration(args.identifier_metadata_store_id)
            write_result(result, oprot, 'get_identifier_metadata_import_configuration', seqid)
          end

          def process_get_import_info(seqid, iprot, oprot)
            args = read_args(iprot, Get_import_info_args)
            result = Get_import_info_result.new()
            begin
              result.success = @handler.get_import_info(args.linc_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_import_info', seqid)
          end

          def process_get_import_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Get_import_configuration_args)
            result = Get_import_configuration_result.new()
            begin
              result.success = @handler.get_import_configuration(args.linc_id)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_import_configuration', seqid)
          end

          def process_delete_lincs(seqid, iprot, oprot)
            args = read_args(iprot, Delete_lincs_args)
            result = Delete_lincs_result.new()
            @handler.delete_lincs(args.linc_id)
            write_result(result, oprot, 'delete_lincs', seqid)
          end

          def process_delete_linc_feeds(seqid, iprot, oprot)
            args = read_args(iprot, Delete_linc_feeds_args)
            result = Delete_linc_feeds_result.new()
            @handler.delete_linc_feeds(args.linc_feed_ids)
            write_result(result, oprot, 'delete_linc_feeds', seqid)
          end

          def process_set_linc_feed_state(seqid, iprot, oprot)
            args = read_args(iprot, Set_linc_feed_state_args)
            result = Set_linc_feed_state_result.new()
            begin
              @handler.set_linc_feed_state(args.all_desired_lincs_for_feed)
            rescue ::Liveramp::Types::AnonymousIdentifierMapping::InternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'set_linc_feed_state', seqid)
          end

          def process_delete_linc_for_lir(seqid, iprot, oprot)
            args = read_args(iprot, Delete_linc_for_lir_args)
            @handler.delete_linc_for_lir(args.liveramp_import_request_id)
            return
          end

          def process_validate_linc_import(seqid, iprot, oprot)
            args = read_args(iprot, Validate_linc_import_args)
            result = Validate_linc_import_result.new()
            result.success = @handler.validate_linc_import(args.liveramp_import_request_id, args.alert)
            write_result(result, oprot, 'validate_linc_import', seqid)
          end

          def process_request_linc_transition(seqid, iprot, oprot)
            args = read_args(iprot, Request_linc_transition_args)
            @handler.request_linc_transition(args.liveramp_import_request_id, args.enforce)
            return
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Create_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          MATCH_DATA_PROVIDER_ID = 1
          FEED_OPTIONS = 2
          CREATOR_ID = 3

          FIELDS = {
            MATCH_DATA_PROVIDER_ID => {:type => ::Thrift::Types::I64, :name => 'match_data_provider_id'},
            FEED_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'feed_options', :class => ::Liveramp::Types::LincService::FeedOptions},
            CREATOR_ID => {:type => ::Thrift::Types::STRUCT, :name => 'creator_id', :class => ::Liveramp::Types::LincService::LincCreatorId}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          FEED_OPTIONS = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            FEED_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'feed_options', :class => ::Liveramp::Types::LincService::FeedOptions}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_feeds_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          MATCH_DATA_PROVIDER_ID = 1

          FIELDS = {
            MATCH_DATA_PROVIDER_ID => {:type => ::Thrift::Types::I64, :name => 'match_data_provider_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_feeds_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::LincService::FeedInfo}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_file_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PATH_TO_FILE = 1
          CUSTOMER_ID = 2
          UPLOADED_AT = 3

          FIELDS = {
            PATH_TO_FILE => {:type => ::Thrift::Types::STRING, :name => 'path_to_file'},
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            UPLOADED_AT => {:type => ::Thrift::Types::I64, :name => 'uploaded_at'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_file_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ingest_match_data_file_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_FILE_ID = 1
          FILE_CONFIGURATION = 2
          IMPORT_CONFIGURATION = 3
          FEED_ID = 4
          FULL_REFRESH = 5
          CREATOR_ID = 6

          FIELDS = {
            CUSTOMER_FILE_ID => {:type => ::Thrift::Types::I64, :name => 'customer_file_id'},
            FILE_CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'file_configuration', :class => ::Liveramp::Types::ParcService::FileConfiguration},
            IMPORT_CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'import_configuration', :class => ::Liveramp::Types::LincService::ImportConfiguration},
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            FULL_REFRESH => {:type => ::Thrift::Types::BOOL, :name => 'full_refresh'},
            CREATOR_ID => {:type => ::Thrift::Types::STRUCT, :name => 'creator_id', :class => ::Liveramp::Types::LincService::LincCreatorId}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ingest_match_data_file_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::LincService::InvalidConfigurationException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_pel_ingestion_config_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NAME = 10
          CUSTOMER_ID = 20
          PUBLISHER_SUBNETWORK_ID = 30

          FIELDS = {
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            PUBLISHER_SUBNETWORK_ID => {:type => ::Thrift::Types::I64, :name => 'publisher_subnetwork_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_pel_ingestion_config_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ingest_pel_pel_file_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST = 10

          FIELDS = {
            REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Liveramp::Types::LincService::PelIngestionRequest}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ingest_pel_pel_file_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::LincService::InvalidConfigurationException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_all_lincs_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_all_lincs_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_linc_active_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LINC_ID = 1
          IS_ACTIVE = 2

          FIELDS = {
            LINC_ID => {:type => ::Thrift::Types::I64, :name => 'linc_id'},
            IS_ACTIVE => {:type => ::Thrift::Types::BOOL, :name => 'is_active'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_linc_active_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_linc_feed_active_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          IS_ACTIVE = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            IS_ACTIVE => {:type => ::Thrift::Types::BOOL, :name => 'is_active'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_linc_feed_active_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_use_cases_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_use_cases_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::LincService::UseCaseInfo}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_edge_import_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          EDGE_STORE_ID = 1

          FIELDS = {
            EDGE_STORE_ID => {:type => ::Thrift::Types::I32, :name => 'edge_store_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_edge_import_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::LincService::EdgeImportConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_identifier_metadata_import_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          IDENTIFIER_METADATA_STORE_ID = 1

          FIELDS = {
            IDENTIFIER_METADATA_STORE_ID => {:type => ::Thrift::Types::I32, :name => 'identifier_metadata_store_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_identifier_metadata_import_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::LincService::IdentifierMetadataImportConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_import_info_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LINC_ID = 1

          FIELDS = {
            LINC_ID => {:type => ::Thrift::Types::I64, :name => 'linc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_import_info_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::LincService::ImportInfo},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_import_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LINC_ID = 1

          FIELDS = {
            LINC_ID => {:type => ::Thrift::Types::I64, :name => 'linc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_import_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::LincService::ImportConfiguration},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delete_lincs_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LINC_ID = 1

          FIELDS = {
            LINC_ID => {:type => ::Thrift::Types::SET, :name => 'linc_id', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delete_lincs_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delete_linc_feeds_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LINC_FEED_IDS = 1

          FIELDS = {
            LINC_FEED_IDS => {:type => ::Thrift::Types::SET, :name => 'linc_feed_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delete_linc_feeds_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_linc_feed_state_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ALL_DESIRED_LINCS_FOR_FEED = 1

          FIELDS = {
            ALL_DESIRED_LINCS_FOR_FEED => {:type => ::Thrift::Types::SET, :name => 'all_desired_lincs_for_feed', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_linc_feed_state_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          INTERNAL_ERROR = 1

          FIELDS = {
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::AnonymousIdentifierMapping::InternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delete_linc_for_lir_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_IMPORT_REQUEST_ID = 1

          FIELDS = {
            LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field liveramp_import_request_id is unset!') unless @liveramp_import_request_id
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delete_linc_for_lir_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Validate_linc_import_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_IMPORT_REQUEST_ID = 1
          ALERT = 2

          FIELDS = {
            LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'},
            ALERT => {:type => ::Thrift::Types::BOOL, :name => 'alert'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Validate_linc_import_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Request_linc_transition_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_IMPORT_REQUEST_ID = 1
          ENFORCE = 2

          FIELDS = {
            LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'},
            ENFORCE => {:type => ::Thrift::Types::BOOL, :name => 'enforce'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Request_linc_transition_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
