#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'bang_types'
require File.join File.dirname(__FILE__), 'doc_ids_types'


module Liveramp
  module DocIdsCache
    class MdocMetadataPair; end

    class CombinedDocCacheEntry; end

    class DocMetadataCacheEntry; end

    class DdocMdocCacheEntry; end

    class DocCachingServiceConfig; end

    class MdocMetadataPair
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MDOC = 1
      METADATA = 2

      FIELDS = {
        MDOC => {:type => ::Thrift::Types::STRUCT, :name => 'mdoc', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
        METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'metadata', :class => ::Liveramp::DocIds::DocMetadata}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field mdoc is unset!') unless @mdoc
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field metadata is unset!') unless @metadata
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CombinedDocCacheEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DDOC = 1
      ADDED_AT = 2
      LAST_SEEN = 3
      MDOC_METADATA = 4

      FIELDS = {
        DDOC => {:type => ::Thrift::Types::STRUCT, :name => 'ddoc', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
        ADDED_AT => {:type => ::Thrift::Types::I32, :name => 'added_at'},
        LAST_SEEN => {:type => ::Thrift::Types::I32, :name => 'last_seen'},
        MDOC_METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'mdoc_metadata', :class => ::Liveramp::DocIdsCache::MdocMetadataPair, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ddoc is unset!') unless @ddoc
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field added_at is unset!') unless @added_at
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field last_seen is unset!') unless @last_seen
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DocMetadataCacheEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DOC = 1
      METADATA = 2
      ADDED_AT = 3
      LAST_SEEN = 4

      FIELDS = {
        DOC => {:type => ::Thrift::Types::STRUCT, :name => 'doc', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
        METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'metadata', :class => ::Liveramp::DocIds::DocMetadata},
        ADDED_AT => {:type => ::Thrift::Types::I32, :name => 'added_at'},
        LAST_SEEN => {:type => ::Thrift::Types::I32, :name => 'last_seen'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field doc is unset!') unless @doc
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field metadata is unset!') unless @metadata
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field added_at is unset!') unless @added_at
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field last_seen is unset!') unless @last_seen
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DdocMdocCacheEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DDOC = 1
      MDOC = 2
      ADDED_AT = 3
      LAST_SEEN = 4

      FIELDS = {
        DDOC => {:type => ::Thrift::Types::STRUCT, :name => 'ddoc', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
        MDOC => {:type => ::Thrift::Types::STRUCT, :name => 'mdoc', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
        ADDED_AT => {:type => ::Thrift::Types::I32, :name => 'added_at'},
        LAST_SEEN => {:type => ::Thrift::Types::I32, :name => 'last_seen'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ddoc is unset!') unless @ddoc
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field mdoc is unset!') unless @mdoc
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field added_at is unset!') unless @added_at
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field last_seen is unset!') unless @last_seen
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DocCachingServiceConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CACHE_RECORDS_DELTA_PATH = 1

      FIELDS = {
        CACHE_RECORDS_DELTA_PATH => {:type => ::Thrift::Types::STRING, :name => 'cache_records_delta_path'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cache_records_delta_path is unset!') unless @cache_records_delta_path
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
