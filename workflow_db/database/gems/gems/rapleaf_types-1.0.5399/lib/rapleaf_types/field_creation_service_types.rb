#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'importer_service_types'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'audience_types'
require File.join File.dirname(__FILE__), 'parc_service_types'
require File.join File.dirname(__FILE__), 'parc_types'
require File.join File.dirname(__FILE__), 'aif_connector_types'
require File.join File.dirname(__FILE__), 'onboarding_service_types'


module Liveramp
  module Types
    module FieldCreationService
      module ParcToArcConversionStatusInternal
        NEW = 1
        IN_PROGRESS = 2
        READY = 3
        FAILED = 4
        CANCELLED = 5
        IRRECOVERABLY_FAILED = 6
        CONFIGURATION_ERROR = 7
        VALUE_MAP = {1 => "NEW", 2 => "IN_PROGRESS", 3 => "READY", 4 => "FAILED", 5 => "CANCELLED", 6 => "IRRECOVERABLY_FAILED", 7 => "CONFIGURATION_ERROR"}
        VALID_VALUES = Set.new([NEW, IN_PROGRESS, READY, FAILED, CANCELLED, IRRECOVERABLY_FAILED, CONFIGURATION_ERROR]).freeze
      end

      class ParcToArcConversionProcessing; end

      class ParcToArcConversionComplete; end

      class ParcToArcConversionConfigurationError; end

      class ParcToArcConversionStatusResponse < ::Thrift::Union; end

      class RequestNotReadyException < ::Thrift::Exception; end

      class FieldRawString; end

      class FieldRawNumeric; end

      class EnumStringValue; end

      class FieldEnumString; end

      class EnumNumericValue; end

      class FieldEnumNumeric; end

      class FieldType < ::Thrift::Union; end

      class FieldDefinitionDescription; end

      class FieldCreationParams; end

      class FieldModificationParams; end

      class ParcToArcConversionRequestParams; end

      class FieldInfo; end

      class RealTimeFieldCreationOptions; end

      class ParcToArcConversionProcessing
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ParcToArcConversionComplete
        include ::Thrift::Struct, ::Thrift::Struct_Union
        OUTPUT_PATH = 1
        IMPORT_DATA_TYPE = 2

        FIELDS = {
          OUTPUT_PATH => {:type => ::Thrift::Types::STRING, :name => 'output_path'},
          IMPORT_DATA_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_data_type', :enum_class => ::Rapleaf::ImporterService::ImportDataType}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field output_path is unset!') unless @output_path
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_data_type is unset!') unless @import_data_type
          unless @import_data_type.nil? || ::Rapleaf::ImporterService::ImportDataType::VALID_VALUES.include?(@import_data_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_data_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ParcToArcConversionConfigurationError
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ERROR_MESSAGE = 1

        FIELDS = {
          ERROR_MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'error_message'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_message is unset!') unless @error_message
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ParcToArcConversionStatusResponse < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def processing(val)
            ParcToArcConversionStatusResponse.new(:processing, val)
          end

          def complete(val)
            ParcToArcConversionStatusResponse.new(:complete, val)
          end

          def configuration_error(val)
            ParcToArcConversionStatusResponse.new(:configuration_error, val)
          end
        end

        PROCESSING = 1
        COMPLETE = 2
        CONFIGURATION_ERROR = 3

        FIELDS = {
          PROCESSING => {:type => ::Thrift::Types::STRUCT, :name => 'processing', :class => ::Liveramp::Types::FieldCreationService::ParcToArcConversionProcessing, :optional => true},
          COMPLETE => {:type => ::Thrift::Types::STRUCT, :name => 'complete', :class => ::Liveramp::Types::FieldCreationService::ParcToArcConversionComplete, :optional => true},
          CONFIGURATION_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'configuration_error', :class => ::Liveramp::Types::FieldCreationService::ParcToArcConversionConfigurationError, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class RequestNotReadyException < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldRawString
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldRawNumeric
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class EnumStringValue
        include ::Thrift::Struct, ::Thrift::Struct_Union
        VALUE = 1
        ID = 2

        FIELDS = {
          VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
          ID => {:type => ::Thrift::Types::I64, :name => 'id', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value is unset!') unless @value
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldEnumString
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ENUMS = 1

        FIELDS = {
          ENUMS => {:type => ::Thrift::Types::SET, :name => 'enums', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::EnumStringValue}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field enums is unset!') unless @enums
        end

        ::Thrift::Struct.generate_accessors self
      end

      class EnumNumericValue
        include ::Thrift::Struct, ::Thrift::Struct_Union
        VALUE = 1
        ID = 2

        FIELDS = {
          VALUE => {:type => ::Thrift::Types::I64, :name => 'value'},
          ID => {:type => ::Thrift::Types::I64, :name => 'id', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value is unset!') unless @value
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldEnumNumeric
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ENUMS = 1

        FIELDS = {
          ENUMS => {:type => ::Thrift::Types::SET, :name => 'enums', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::EnumNumericValue}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field enums is unset!') unless @enums
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldType < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def raw_string(val)
            FieldType.new(:raw_string, val)
          end

          def raw_numeric(val)
            FieldType.new(:raw_numeric, val)
          end

          def enum_string(val)
            FieldType.new(:enum_string, val)
          end

          def enum_numeric(val)
            FieldType.new(:enum_numeric, val)
          end
        end

        RAW_STRING = 1
        RAW_NUMERIC = 2
        ENUM_STRING = 3
        ENUM_NUMERIC = 4

        FIELDS = {
          RAW_STRING => {:type => ::Thrift::Types::STRUCT, :name => 'raw_string', :class => ::Liveramp::Types::FieldCreationService::FieldRawString, :optional => true},
          RAW_NUMERIC => {:type => ::Thrift::Types::STRUCT, :name => 'raw_numeric', :class => ::Liveramp::Types::FieldCreationService::FieldRawNumeric, :optional => true},
          ENUM_STRING => {:type => ::Thrift::Types::STRUCT, :name => 'enum_string', :class => ::Liveramp::Types::FieldCreationService::FieldEnumString, :optional => true},
          ENUM_NUMERIC => {:type => ::Thrift::Types::STRUCT, :name => 'enum_numeric', :class => ::Liveramp::Types::FieldCreationService::FieldEnumNumeric, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class FieldDefinitionDescription
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LRC_FIELD_DEFINITION_ID = 1
        FIELD_TYPE = 2

        FIELDS = {
          LRC_FIELD_DEFINITION_ID => {:type => ::Thrift::Types::I64, :name => 'lrc_field_definition_id'},
          FIELD_TYPE => {:type => ::Thrift::Types::STRUCT, :name => 'field_type', :class => ::Liveramp::Types::FieldCreationService::FieldType}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrc_field_definition_id is unset!') unless @lrc_field_definition_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_type is unset!') unless @field_type
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldCreationParams
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_ID = 1
        USER_ID = 2
        FIELD_TYPE = 3
        LABEL = 4
        SHOULD_WATERFALL = 5
        DISPLAY_NAME = 6
        MULTI_VALUED = 7
        COMPUTE_VALUE_STATS = 8
        VALUE_UNIQUENESS = 9
        ATTRIBUTE_ID = 10

        FIELDS = {
          AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
          USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'},
          FIELD_TYPE => {:type => ::Thrift::Types::STRUCT, :name => 'field_type', :class => ::Liveramp::Types::FieldCreationService::FieldType},
          LABEL => {:type => ::Thrift::Types::STRING, :name => 'label'},
          SHOULD_WATERFALL => {:type => ::Thrift::Types::BOOL, :name => 'should_waterfall'},
          DISPLAY_NAME => {:type => ::Thrift::Types::STRING, :name => 'display_name', :optional => true},
          MULTI_VALUED => {:type => ::Thrift::Types::BOOL, :name => 'multi_valued', :optional => true},
          COMPUTE_VALUE_STATS => {:type => ::Thrift::Types::BOOL, :name => 'compute_value_stats', :optional => true},
          VALUE_UNIQUENESS => {:type => ::Thrift::Types::I32, :name => 'value_uniqueness', :optional => true, :enum_class => ::Rapleaf::Types::NewPersonData::ValueUniqueness},
          ATTRIBUTE_ID => {:type => ::Thrift::Types::I64, :name => 'attribute_id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_type is unset!') unless @field_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field label is unset!') unless @label
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field should_waterfall is unset!') if @should_waterfall.nil?
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field attribute_id is unset!') unless @attribute_id
          unless @value_uniqueness.nil? || ::Rapleaf::Types::NewPersonData::ValueUniqueness::VALID_VALUES.include?(@value_uniqueness)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field value_uniqueness!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldModificationParams
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIELD_DEFINITION_DESCRIPTION = 1
        USER_ID = 2

        FIELDS = {
          FIELD_DEFINITION_DESCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'field_definition_description', :class => ::Liveramp::Types::FieldCreationService::FieldDefinitionDescription},
          USER_ID => {:type => ::Thrift::Types::I64, :name => 'user_id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_definition_description is unset!') unless @field_definition_description
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field user_id is unset!') unless @user_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ParcToArcConversionRequestParams
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_ID = 1
        PARC_IDS = 2
        PARC_ID_TO_FILE_WIDE_ATTRIBUTE_IDS = 3
        AUDIENCE_KEY_TO_COLUMN_NAME = 4
        ALL_AUDIENCE_KEY_INDICES = 5
        ATTRIBUTE_ID_TO_FIELD_DESCRIPTION = 6
        HEADER_TO_FIELD_DESCRIPTION = 7
        OUTPUT_TYPE = 8
        WHITELISTED_LRC_FIELD_IDS = 9

        FIELDS = {
          AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
          PARC_IDS => {:type => ::Thrift::Types::SET, :name => 'parc_ids', :element => {:type => ::Thrift::Types::I64}},
          PARC_ID_TO_FILE_WIDE_ATTRIBUTE_IDS => {:type => ::Thrift::Types::MAP, :name => 'parc_id_to_file_wide_attribute_ids', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}},
          AUDIENCE_KEY_TO_COLUMN_NAME => {:type => ::Thrift::Types::MAP, :name => 'audience_key_to_column_name', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRING}},
          ALL_AUDIENCE_KEY_INDICES => {:type => ::Thrift::Types::SET, :name => 'all_audience_key_indices', :element => {:type => ::Thrift::Types::I32}},
          ATTRIBUTE_ID_TO_FIELD_DESCRIPTION => {:type => ::Thrift::Types::MAP, :name => 'attribute_id_to_field_description', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::FieldDefinitionDescription}},
          HEADER_TO_FIELD_DESCRIPTION => {:type => ::Thrift::Types::MAP, :name => 'header_to_field_description', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::FieldDefinitionDescription}},
          OUTPUT_TYPE => {:type => ::Thrift::Types::I32, :name => 'output_type', :optional => true, :enum_class => ::Liveramp::Types::OnboardingService::OnboardingDataType},
          WHITELISTED_LRC_FIELD_IDS => {:type => ::Thrift::Types::SET, :name => 'whitelisted_lrc_field_ids', :element => {:type => ::Thrift::Types::I64}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_id is unset!') unless @audience_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parc_ids is unset!') unless @parc_ids
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parc_id_to_file_wide_attribute_ids is unset!') unless @parc_id_to_file_wide_attribute_ids
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field audience_key_to_column_name is unset!') unless @audience_key_to_column_name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field all_audience_key_indices is unset!') unless @all_audience_key_indices
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field attribute_id_to_field_description is unset!') unless @attribute_id_to_field_description
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field header_to_field_description is unset!') unless @header_to_field_description
          unless @output_type.nil? || ::Liveramp::Types::OnboardingService::OnboardingDataType::VALID_VALUES.include?(@output_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field output_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FieldInfo
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIELDDEFID = 1
        DESCRIPTION = 2
        STRINGENUMSPECS = 3
        NUMERICENUMSPECS = 4
        FILEWIDEFILEINDEX = 5
        KEY = 6
        ATTRIBUTE_ID = 7

        FIELDS = {
          FIELDDEFID => {:type => ::Thrift::Types::I64, :name => 'fieldDefId'},
          DESCRIPTION => {:type => ::Thrift::Types::STRUCT, :name => 'description', :class => ::Liveramp::Types::FieldCreationService::FieldDefinitionDescription},
          STRINGENUMSPECS => {:type => ::Thrift::Types::LIST, :name => 'stringEnumSpecs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ExistingStringEnumValueExtractionSpec}, :optional => true},
          NUMERICENUMSPECS => {:type => ::Thrift::Types::LIST, :name => 'numericEnumSpecs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ExistingNumericEnumValueExtractionSpec}, :optional => true},
          FILEWIDEFILEINDEX => {:type => ::Thrift::Types::I16, :name => 'fileWideFileIndex', :optional => true},
          KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :optional => true},
          ATTRIBUTE_ID => {:type => ::Thrift::Types::I64, :name => 'attribute_id', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fieldDefId is unset!') unless @fieldDefId
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field description is unset!') unless @description
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RealTimeFieldCreationOptions
        include ::Thrift::Struct, ::Thrift::Struct_Union
        KEY_TO_EXTRACTION_SPEC = 1

        FIELDS = {
          KEY_TO_EXTRACTION_SPEC => {:type => ::Thrift::Types::MAP, :name => 'key_to_extraction_spec', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ExistingFieldExtractionSpec}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key_to_extraction_spec is unset!') unless @key_to_extraction_spec
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
