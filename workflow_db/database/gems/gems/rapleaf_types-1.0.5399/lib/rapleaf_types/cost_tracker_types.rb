#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'liveramp_importer_types'


module Liveramp
  module CostTracker
    module CostMetrics
      CPU = 1
      MEMORY = 2
      HDFS = 3
      NFS = 4
      VALUE_MAP = {1 => "CPU", 2 => "MEMORY", 3 => "HDFS", 4 => "NFS"}
      VALID_VALUES = Set.new([CPU, MEMORY, HDFS, NFS]).freeze
    end

    class SpaceValue; end

    class CostValue < ::Thrift::Union; end

    class SpaceValue
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BYTES = 10
      DAYS = 20

      FIELDS = {
        BYTES => {:type => ::Thrift::Types::I64, :name => 'bytes'},
        DAYS => {:type => ::Thrift::Types::DOUBLE, :name => 'days'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field bytes is unset!') unless @bytes
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field days is unset!') unless @days
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CostValue < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def value(val)
          CostValue.new(:value, val)
        end

        def space_value(val)
          CostValue.new(:space_value, val)
        end
      end

      VALUE = 10
      SPACE_VALUE = 20

      FIELDS = {
        VALUE => {:type => ::Thrift::Types::I64, :name => 'value', :optional => true},
        SPACE_VALUE => {:type => ::Thrift::Types::STRUCT, :name => 'space_value', :class => ::Liveramp::CostTracker::SpaceValue, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

  end
end
