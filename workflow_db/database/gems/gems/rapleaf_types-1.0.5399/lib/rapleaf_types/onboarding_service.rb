#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'onboarding_service_types'

module Liveramp
  module Types
    module OnboardingService
      module OnboardingService
        class Client
          include ::Thrift::Client

          def link_feeds_and_audiences(configuration, updated_by)
            send_link_feeds_and_audiences(configuration, updated_by)
            recv_link_feeds_and_audiences()
          end

          def send_link_feeds_and_audiences(configuration, updated_by)
            send_message('link_feeds_and_audiences', Link_feeds_and_audiences_args, :configuration => configuration, :updated_by => updated_by)
          end

          def recv_link_feeds_and_audiences()
            result = receive_message(Link_feeds_and_audiences_result)
            return
          end

          def unlink_feeds_and_audiences(feed_id, audience_ids)
            send_unlink_feeds_and_audiences(feed_id, audience_ids)
            recv_unlink_feeds_and_audiences()
          end

          def send_unlink_feeds_and_audiences(feed_id, audience_ids)
            send_message('unlink_feeds_and_audiences', Unlink_feeds_and_audiences_args, :feed_id => feed_id, :audience_ids => audience_ids)
          end

          def recv_unlink_feeds_and_audiences()
            result = receive_message(Unlink_feeds_and_audiences_result)
            raise result.non_existent_link_exception unless result.non_existent_link_exception.nil?
            return
          end

          def update_feed_and_audience_links(configuration, updated_by)
            send_update_feed_and_audience_links(configuration, updated_by)
            recv_update_feed_and_audience_links()
          end

          def send_update_feed_and_audience_links(configuration, updated_by)
            send_message('update_feed_and_audience_links', Update_feed_and_audience_links_args, :configuration => configuration, :updated_by => updated_by)
          end

          def recv_update_feed_and_audience_links()
            result = receive_message(Update_feed_and_audience_links_result)
            raise result.non_existent_link_exception unless result.non_existent_link_exception.nil?
            return
          end

          def list_audiences(customer_id)
            send_list_audiences(customer_id)
            return recv_list_audiences()
          end

          def send_list_audiences(customer_id)
            send_message('list_audiences', List_audiences_args, :customer_id => customer_id)
          end

          def recv_list_audiences()
            result = receive_message(List_audiences_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_audiences failed: unknown result')
          end

          def get_feeds(audience_id)
            send_get_feeds(audience_id)
            return recv_get_feeds()
          end

          def send_get_feeds(audience_id)
            send_message('get_feeds', Get_feeds_args, :audience_id => audience_id)
          end

          def recv_get_feeds()
            result = receive_message(Get_feeds_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_feeds failed: unknown result')
          end

          def get_feed_configurations(feed_ids)
            send_get_feed_configurations(feed_ids)
            return recv_get_feed_configurations()
          end

          def send_get_feed_configurations(feed_ids)
            send_message('get_feed_configurations', Get_feed_configurations_args, :feed_ids => feed_ids)
          end

          def recv_get_feed_configurations()
            result = receive_message(Get_feed_configurations_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_feed_configurations failed: unknown result')
          end

          def create_offline_audience(customer_id, name, created_by)
            send_create_offline_audience(customer_id, name, created_by)
            return recv_create_offline_audience()
          end

          def send_create_offline_audience(customer_id, name, created_by)
            send_message('create_offline_audience', Create_offline_audience_args, :customer_id => customer_id, :name => name, :created_by => created_by)
          end

          def recv_create_offline_audience()
            result = receive_message(Create_offline_audience_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_offline_audience failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_link_feeds_and_audiences(seqid, iprot, oprot)
            args = read_args(iprot, Link_feeds_and_audiences_args)
            result = Link_feeds_and_audiences_result.new()
            @handler.link_feeds_and_audiences(args.configuration, args.updated_by)
            write_result(result, oprot, 'link_feeds_and_audiences', seqid)
          end

          def process_unlink_feeds_and_audiences(seqid, iprot, oprot)
            args = read_args(iprot, Unlink_feeds_and_audiences_args)
            result = Unlink_feeds_and_audiences_result.new()
            begin
              @handler.unlink_feeds_and_audiences(args.feed_id, args.audience_ids)
            rescue ::Liveramp::Types::OnboardingService::NonExistentLinkException => non_existent_link_exception
              result.non_existent_link_exception = non_existent_link_exception
            end
            write_result(result, oprot, 'unlink_feeds_and_audiences', seqid)
          end

          def process_update_feed_and_audience_links(seqid, iprot, oprot)
            args = read_args(iprot, Update_feed_and_audience_links_args)
            result = Update_feed_and_audience_links_result.new()
            begin
              @handler.update_feed_and_audience_links(args.configuration, args.updated_by)
            rescue ::Liveramp::Types::OnboardingService::NonExistentLinkException => non_existent_link_exception
              result.non_existent_link_exception = non_existent_link_exception
            end
            write_result(result, oprot, 'update_feed_and_audience_links', seqid)
          end

          def process_list_audiences(seqid, iprot, oprot)
            args = read_args(iprot, List_audiences_args)
            result = List_audiences_result.new()
            result.success = @handler.list_audiences(args.customer_id)
            write_result(result, oprot, 'list_audiences', seqid)
          end

          def process_get_feeds(seqid, iprot, oprot)
            args = read_args(iprot, Get_feeds_args)
            result = Get_feeds_result.new()
            result.success = @handler.get_feeds(args.audience_id)
            write_result(result, oprot, 'get_feeds', seqid)
          end

          def process_get_feed_configurations(seqid, iprot, oprot)
            args = read_args(iprot, Get_feed_configurations_args)
            result = Get_feed_configurations_result.new()
            result.success = @handler.get_feed_configurations(args.feed_ids)
            write_result(result, oprot, 'get_feed_configurations', seqid)
          end

          def process_create_offline_audience(seqid, iprot, oprot)
            args = read_args(iprot, Create_offline_audience_args)
            result = Create_offline_audience_result.new()
            result.success = @handler.create_offline_audience(args.customer_id, args.name, args.created_by)
            write_result(result, oprot, 'create_offline_audience', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Link_feeds_and_audiences_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIGURATION = 1
          UPDATED_BY = 2

          FIELDS = {
            CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::Liveramp::Types::OnboardingService::OnboardingFeedConfiguration},
            UPDATED_BY => {:type => ::Thrift::Types::I64, :name => 'updated_by'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Link_feeds_and_audiences_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Unlink_feeds_and_audiences_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          AUDIENCE_IDS = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            AUDIENCE_IDS => {:type => ::Thrift::Types::SET, :name => 'audience_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Unlink_feeds_and_audiences_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NON_EXISTENT_LINK_EXCEPTION = 1

          FIELDS = {
            NON_EXISTENT_LINK_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'non_existent_link_exception', :class => ::Liveramp::Types::OnboardingService::NonExistentLinkException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_feed_and_audience_links_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIGURATION = 1
          UPDATED_BY = 2

          FIELDS = {
            CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::Liveramp::Types::OnboardingService::OnboardingFeedConfiguration},
            UPDATED_BY => {:type => ::Thrift::Types::I64, :name => 'updated_by'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_feed_and_audience_links_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NON_EXISTENT_LINK_EXCEPTION = 1

          FIELDS = {
            NON_EXISTENT_LINK_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'non_existent_link_exception', :class => ::Liveramp::Types::OnboardingService::NonExistentLinkException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_audiences_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_ID = 1

          FIELDS = {
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_audiences_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::OnboardingService::AudienceInfo}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feeds_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUDIENCE_ID = 1

          FIELDS = {
            AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feeds_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feed_configurations_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_IDS = 1

          FIELDS = {
            FEED_IDS => {:type => ::Thrift::Types::SET, :name => 'feed_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feed_configurations_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::OnboardingService::OnboardingFeedConfiguration}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_offline_audience_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_ID = 1
          NAME = 2
          CREATED_BY = 3

          FIELDS = {
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
            CREATED_BY => {:type => ::Thrift::Types::I64, :name => 'created_by'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_offline_audience_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::OnboardingService::AudienceInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
