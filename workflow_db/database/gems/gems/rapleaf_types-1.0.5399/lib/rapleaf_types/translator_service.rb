#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'translation_zone_types'

module Liveramp
  module OfflineMatching
    module TranslationZone
      module TranslatorService
        class Client
          include ::Thrift::Client

          def requestTranslation(config)
            send_requestTranslation(config)
            return recv_requestTranslation()
          end

          def send_requestTranslation(config)
            send_message('requestTranslation', RequestTranslation_args, :config => config)
          end

          def recv_requestTranslation()
            result = receive_message(RequestTranslation_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'requestTranslation failed: unknown result')
          end

          def requestTranslationWithPriority(config, priority)
            send_requestTranslationWithPriority(config, priority)
            return recv_requestTranslationWithPriority()
          end

          def send_requestTranslationWithPriority(config, priority)
            send_message('requestTranslationWithPriority', RequestTranslationWithPriority_args, :config => config, :priority => priority)
          end

          def recv_requestTranslationWithPriority()
            result = receive_message(RequestTranslationWithPriority_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'requestTranslationWithPriority failed: unknown result')
          end

          def getTranslationRequestStatus(request_id)
            send_getTranslationRequestStatus(request_id)
            return recv_getTranslationRequestStatus()
          end

          def send_getTranslationRequestStatus(request_id)
            send_message('getTranslationRequestStatus', GetTranslationRequestStatus_args, :request_id => request_id)
          end

          def recv_getTranslationRequestStatus()
            result = receive_message(GetTranslationRequestStatus_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTranslationRequestStatus failed: unknown result')
          end

          def getTranslationRequestStatuses(request_ids)
            send_getTranslationRequestStatuses(request_ids)
            return recv_getTranslationRequestStatuses()
          end

          def send_getTranslationRequestStatuses(request_ids)
            send_message('getTranslationRequestStatuses', GetTranslationRequestStatuses_args, :request_ids => request_ids)
          end

          def recv_getTranslationRequestStatuses()
            result = receive_message(GetTranslationRequestStatuses_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTranslationRequestStatuses failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_requestTranslation(seqid, iprot, oprot)
            args = read_args(iprot, RequestTranslation_args)
            result = RequestTranslation_result.new()
            result.success = @handler.requestTranslation(args.config)
            write_result(result, oprot, 'requestTranslation', seqid)
          end

          def process_requestTranslationWithPriority(seqid, iprot, oprot)
            args = read_args(iprot, RequestTranslationWithPriority_args)
            result = RequestTranslationWithPriority_result.new()
            result.success = @handler.requestTranslationWithPriority(args.config, args.priority)
            write_result(result, oprot, 'requestTranslationWithPriority', seqid)
          end

          def process_getTranslationRequestStatus(seqid, iprot, oprot)
            args = read_args(iprot, GetTranslationRequestStatus_args)
            result = GetTranslationRequestStatus_result.new()
            result.success = @handler.getTranslationRequestStatus(args.request_id)
            write_result(result, oprot, 'getTranslationRequestStatus', seqid)
          end

          def process_getTranslationRequestStatuses(seqid, iprot, oprot)
            args = read_args(iprot, GetTranslationRequestStatuses_args)
            result = GetTranslationRequestStatuses_result.new()
            result.success = @handler.getTranslationRequestStatuses(args.request_ids)
            write_result(result, oprot, 'getTranslationRequestStatuses', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class RequestTranslation_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIG = 1

          FIELDS = {
            CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::OfflineMatching::TranslationZone::TranslationConfig}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestTranslation_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::OfflineMatching::TranslationZone::TranslationRequestResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestTranslationWithPriority_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CONFIG = 1
          PRIORITY = 2

          FIELDS = {
            CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::OfflineMatching::TranslationZone::TranslationConfig},
            PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => ::Liveramp::OfflineMatching::Lib::DaemonRunRequestPriority}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @priority.nil? || ::Liveramp::OfflineMatching::Lib::DaemonRunRequestPriority::VALID_VALUES.include?(@priority)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class RequestTranslationWithPriority_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::OfflineMatching::TranslationZone::TranslationRequestResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetTranslationRequestStatus_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetTranslationRequestStatus_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::OfflineMatching::TranslationZone::TranslationRequestStatusResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetTranslationRequestStatuses_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_IDS = 1

          FIELDS = {
            REQUEST_IDS => {:type => ::Thrift::Types::SET, :name => 'request_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetTranslationRequestStatuses_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::OfflineMatching::TranslationZone::TranslationRequestStatusResponse}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
