#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'


module Liveramp
  module AbilitecAppender
    module AppendPriority
      VERY_LOW = 1
      LOW = 2
      NORMAL = 3
      HIGH = 4
      VERY_HIGH = 5
      VALUE_MAP = {1 => "VERY_LOW", 2 => "LOW", 3 => "NORMAL", 4 => "HIGH", 5 => "VERY_HIGH"}
      VALID_VALUES = Set.new([VERY_LOW, LOW, NORMAL, HIGH, VERY_HIGH]).freeze
    end

    module ClinkCacheEntryType
      MATCH = 1
      CUSTOMER = 2
      OPT_OUT = 3
      CANONICALIZATION = 4
      VALUE_MAP = {1 => "MATCH", 2 => "CUSTOMER", 3 => "OPT_OUT", 4 => "CANONICALIZATION"}
      VALID_VALUES = Set.new([MATCH, CUSTOMER, OPT_OUT, CANONICALIZATION]).freeze
    end

    class AppendImportConfig; end

    class AppendMatchImportConfig; end

    class OptOutImportConfig; end

    class AppendCidPinImportConfig; end

    class AppendMuidPinImportConfig; end

    class AppendIdOnlyImportConfig; end

    class EmailToPinConfig; end

    class FlexibleAppenderConfig; end

    class AppendId < ::Thrift::Union; end

    class QueryJobletConfig; end

    class AppendRequest; end

    class AppendEntry; end

    class AppendInfo; end

    class ClinkCacheEntry; end

    class MangledPinToClink; end

    class AppendImportConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IRC_ID = 1

      FIELDS = {
        IRC_ID => {:type => ::Thrift::Types::I64, :name => 'irc_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendMatchImportConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MATCH_IRC_ID = 1

      FIELDS = {
        MATCH_IRC_ID => {:type => ::Thrift::Types::I64, :name => 'match_irc_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OptOutImportConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendCidPinImportConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CID_PIN_IRC_ID = 1

      FIELDS = {
        CID_PIN_IRC_ID => {:type => ::Thrift::Types::I64, :name => 'cid_pin_irc_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendMuidPinImportConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MUID_PIN_IRC_ID = 1

      FIELDS = {
        MUID_PIN_IRC_ID => {:type => ::Thrift::Types::I64, :name => 'muid_pin_irc_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendIdOnlyImportConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PARC_ID = 1
      PII_BUCKET_PATH = 2

      FIELDS = {
        PARC_ID => {:type => ::Thrift::Types::I64, :name => 'parc_id'},
        PII_BUCKET_PATH => {:type => ::Thrift::Types::STRING, :name => 'pii_bucket_path'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EmailToPinConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      INPUT_PATH = 1

      FIELDS = {
        INPUT_PATH => {:type => ::Thrift::Types::STRING, :name => 'input_path'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FlexibleAppenderConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SERVILE_REQUEST_ID = 1

      FIELDS = {
        SERVILE_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'servile_request_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendId < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def import_config(val)
          AppendId.new(:import_config, val)
        end

        def match_import_config(val)
          AppendId.new(:match_import_config, val)
        end

        def opt_out_import_config(val)
          AppendId.new(:opt_out_import_config, val)
        end

        def cid_pin_import_config(val)
          AppendId.new(:cid_pin_import_config, val)
        end

        def id_only_import_config(val)
          AppendId.new(:id_only_import_config, val)
        end

        def muid_pin_import_config(val)
          AppendId.new(:muid_pin_import_config, val)
        end

        def email_to_pin_config(val)
          AppendId.new(:email_to_pin_config, val)
        end

        def flexible_appender_config(val)
          AppendId.new(:flexible_appender_config, val)
        end
      end

      IMPORT_CONFIG = 1
      MATCH_IMPORT_CONFIG = 2
      OPT_OUT_IMPORT_CONFIG = 3
      CID_PIN_IMPORT_CONFIG = 4
      ID_ONLY_IMPORT_CONFIG = 5
      MUID_PIN_IMPORT_CONFIG = 6
      EMAIL_TO_PIN_CONFIG = 7
      FLEXIBLE_APPENDER_CONFIG = 8

      FIELDS = {
        IMPORT_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'import_config', :class => ::Liveramp::AbilitecAppender::AppendImportConfig, :optional => true},
        MATCH_IMPORT_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'match_import_config', :class => ::Liveramp::AbilitecAppender::AppendMatchImportConfig, :optional => true},
        OPT_OUT_IMPORT_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'opt_out_import_config', :class => ::Liveramp::AbilitecAppender::OptOutImportConfig, :optional => true},
        CID_PIN_IMPORT_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'cid_pin_import_config', :class => ::Liveramp::AbilitecAppender::AppendCidPinImportConfig, :optional => true},
        ID_ONLY_IMPORT_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'id_only_import_config', :class => ::Liveramp::AbilitecAppender::AppendIdOnlyImportConfig, :optional => true},
        MUID_PIN_IMPORT_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'muid_pin_import_config', :class => ::Liveramp::AbilitecAppender::AppendMuidPinImportConfig, :optional => true},
        EMAIL_TO_PIN_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'email_to_pin_config', :class => ::Liveramp::AbilitecAppender::EmailToPinConfig, :optional => true},
        FLEXIBLE_APPENDER_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'flexible_appender_config', :class => ::Liveramp::AbilitecAppender::FlexibleAppenderConfig, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class QueryJobletConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      APPENDID = 1
      RECORDSTOQUERYBUCKETDATASTOREPATH = 2
      RECORDSWITHCLINKSBUCKETDATASTOREPATH = 3

      FIELDS = {
        APPENDID => {:type => ::Thrift::Types::STRUCT, :name => 'appendId', :class => ::Liveramp::AbilitecAppender::AppendId, :optional => true},
        RECORDSTOQUERYBUCKETDATASTOREPATH => {:type => ::Thrift::Types::STRING, :name => 'recordsToQueryBucketDataStorePath'},
        RECORDSWITHCLINKSBUCKETDATASTOREPATH => {:type => ::Thrift::Types::STRING, :name => 'recordsWithClinksBucketDataStorePath'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1
      PRIORITY = 2

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Liveramp::AbilitecAppender::AppendId},
        PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => ::Liveramp::AbilitecAppender::AppendPriority}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @priority.nil? || ::Liveramp::AbilitecAppender::AppendPriority::VALID_VALUES.include?(@priority)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      COMPLETE = 1
      REQUEST_CREATION_TIME = 2
      PATH_TO_APPEND_RECORD_SET = 3

      FIELDS = {
        COMPLETE => {:type => ::Thrift::Types::BOOL, :name => 'complete'},
        REQUEST_CREATION_TIME => {:type => ::Thrift::Types::I64, :name => 'request_creation_time'},
        PATH_TO_APPEND_RECORD_SET => {:type => ::Thrift::Types::STRING, :name => 'path_to_append_record_set', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AppendInfo
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTRIES = 1
      ID = 2

      FIELDS = {
        ENTRIES => {:type => ::Thrift::Types::LIST, :name => 'entries', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::AbilitecAppender::AppendEntry}},
        ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Liveramp::AbilitecAppender::AppendId}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ClinkCacheEntry
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HASHED_PIN = 1
      CLINK = 2
      CREATED_AT = 3
      DERIVED = 4
      TYPE = 5

      FIELDS = {
        HASHED_PIN => {:type => ::Thrift::Types::STRING, :name => 'hashed_pin', :binary => true},
        CLINK => {:type => ::Thrift::Types::STRUCT, :name => 'clink', :class => ::Rapleaf::Types::NewPersonData::PIN},
        CREATED_AT => {:type => ::Thrift::Types::I64, :name => 'created_at'},
        DERIVED => {:type => ::Thrift::Types::BOOL, :name => 'derived'},
        TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::Liveramp::AbilitecAppender::ClinkCacheEntryType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @type.nil? || ::Liveramp::AbilitecAppender::ClinkCacheEntryType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MangledPinToClink
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MANGLED_PIN = 1
      CLINK = 2
      CREATED_AT = 3

      FIELDS = {
        MANGLED_PIN => {:type => ::Thrift::Types::STRING, :name => 'mangled_pin', :binary => true},
        CLINK => {:type => ::Thrift::Types::STRUCT, :name => 'clink', :class => ::Rapleaf::Types::NewPersonData::AbiliTecId},
        CREATED_AT => {:type => ::Thrift::Types::I64, :name => 'created_at'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
