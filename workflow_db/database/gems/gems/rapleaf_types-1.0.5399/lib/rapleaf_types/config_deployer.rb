#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'config_deployer_types'

module Rapleaf
  module ConfigDeployer
    module ConfigDeployer
      class Client
        include ::Thrift::Client

        def acquireLock(app_type)
          send_acquireLock(app_type)
          return recv_acquireLock()
        end

        def send_acquireLock(app_type)
          send_message('acquireLock', AcquireLock_args, :app_type => app_type)
        end

        def recv_acquireLock()
          result = receive_message(AcquireLock_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireLock failed: unknown result')
        end

        def releaseLock(app_type)
          send_releaseLock(app_type)
          recv_releaseLock()
        end

        def send_releaseLock(app_type)
          send_message('releaseLock', ReleaseLock_args, :app_type => app_type)
        end

        def recv_releaseLock()
          result = receive_message(ReleaseLock_result)
          return
        end

        def lockAllApps(reason)
          send_lockAllApps(reason)
          recv_lockAllApps()
        end

        def send_lockAllApps(reason)
          send_message('lockAllApps', LockAllApps_args, :reason => reason)
        end

        def recv_lockAllApps()
          result = receive_message(LockAllApps_result)
          return
        end

        def unlockAllApps()
          send_unlockAllApps()
          recv_unlockAllApps()
        end

        def send_unlockAllApps()
          send_message('unlockAllApps', UnlockAllApps_args)
        end

        def recv_unlockAllApps()
          result = receive_message(UnlockAllApps_result)
          return
        end

        def areAllAppsLocked()
          send_areAllAppsLocked()
          return recv_areAllAppsLocked()
        end

        def send_areAllAppsLocked()
          send_message('areAllAppsLocked', AreAllAppsLocked_args)
        end

        def recv_areAllAppsLocked()
          result = receive_message(AreAllAppsLocked_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'areAllAppsLocked failed: unknown result')
        end

        def getCurrentReason()
          send_getCurrentReason()
          return recv_getCurrentReason()
        end

        def send_getCurrentReason()
          send_message('getCurrentReason', GetCurrentReason_args)
        end

        def recv_getCurrentReason()
          result = receive_message(GetCurrentReason_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCurrentReason failed: unknown result')
        end

        def deployConfigSnapshot(deploy_args)
          send_deployConfigSnapshot(deploy_args)
          recv_deployConfigSnapshot()
        end

        def send_deployConfigSnapshot(deploy_args)
          send_message('deployConfigSnapshot', DeployConfigSnapshot_args, :deploy_args => deploy_args)
        end

        def recv_deployConfigSnapshot()
          result = receive_message(DeployConfigSnapshot_result)
          raise result.e unless result.e.nil?
          return
        end

        def getDeployStatuses()
          send_getDeployStatuses()
          return recv_getDeployStatuses()
        end

        def send_getDeployStatuses()
          send_message('getDeployStatuses', GetDeployStatuses_args)
        end

        def recv_getDeployStatuses()
          result = receive_message(GetDeployStatuses_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDeployStatuses failed: unknown result')
        end

        def getActiveSnapshotCounts()
          send_getActiveSnapshotCounts()
          return recv_getActiveSnapshotCounts()
        end

        def send_getActiveSnapshotCounts()
          send_message('getActiveSnapshotCounts', GetActiveSnapshotCounts_args)
        end

        def recv_getActiveSnapshotCounts()
          result = receive_message(GetActiveSnapshotCounts_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getActiveSnapshotCounts failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_acquireLock(seqid, iprot, oprot)
          args = read_args(iprot, AcquireLock_args)
          result = AcquireLock_result.new()
          result.success = @handler.acquireLock(args.app_type)
          write_result(result, oprot, 'acquireLock', seqid)
        end

        def process_releaseLock(seqid, iprot, oprot)
          args = read_args(iprot, ReleaseLock_args)
          result = ReleaseLock_result.new()
          @handler.releaseLock(args.app_type)
          write_result(result, oprot, 'releaseLock', seqid)
        end

        def process_lockAllApps(seqid, iprot, oprot)
          args = read_args(iprot, LockAllApps_args)
          result = LockAllApps_result.new()
          @handler.lockAllApps(args.reason)
          write_result(result, oprot, 'lockAllApps', seqid)
        end

        def process_unlockAllApps(seqid, iprot, oprot)
          args = read_args(iprot, UnlockAllApps_args)
          result = UnlockAllApps_result.new()
          @handler.unlockAllApps()
          write_result(result, oprot, 'unlockAllApps', seqid)
        end

        def process_areAllAppsLocked(seqid, iprot, oprot)
          args = read_args(iprot, AreAllAppsLocked_args)
          result = AreAllAppsLocked_result.new()
          result.success = @handler.areAllAppsLocked()
          write_result(result, oprot, 'areAllAppsLocked', seqid)
        end

        def process_getCurrentReason(seqid, iprot, oprot)
          args = read_args(iprot, GetCurrentReason_args)
          result = GetCurrentReason_result.new()
          result.success = @handler.getCurrentReason()
          write_result(result, oprot, 'getCurrentReason', seqid)
        end

        def process_deployConfigSnapshot(seqid, iprot, oprot)
          args = read_args(iprot, DeployConfigSnapshot_args)
          result = DeployConfigSnapshot_result.new()
          begin
            @handler.deployConfigSnapshot(args.deploy_args)
          rescue ::Rapleaf::ConfigDeployer::InvalidAppTypeException => e
            result.e = e
          end
          write_result(result, oprot, 'deployConfigSnapshot', seqid)
        end

        def process_getDeployStatuses(seqid, iprot, oprot)
          args = read_args(iprot, GetDeployStatuses_args)
          result = GetDeployStatuses_result.new()
          result.success = @handler.getDeployStatuses()
          write_result(result, oprot, 'getDeployStatuses', seqid)
        end

        def process_getActiveSnapshotCounts(seqid, iprot, oprot)
          args = read_args(iprot, GetActiveSnapshotCounts_args)
          result = GetActiveSnapshotCounts_result.new()
          result.success = @handler.getActiveSnapshotCounts()
          write_result(result, oprot, 'getActiveSnapshotCounts', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class AcquireLock_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        APP_TYPE = 1

        FIELDS = {
          APP_TYPE => {:type => ::Thrift::Types::I32, :name => 'app_type', :enum_class => ::Rapleaf::ConfigDeployer::AppType}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @app_type.nil? || ::Rapleaf::ConfigDeployer::AppType::VALID_VALUES.include?(@app_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field app_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AcquireLock_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ReleaseLock_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        APP_TYPE = 1

        FIELDS = {
          APP_TYPE => {:type => ::Thrift::Types::I32, :name => 'app_type', :enum_class => ::Rapleaf::ConfigDeployer::AppType}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @app_type.nil? || ::Rapleaf::ConfigDeployer::AppType::VALID_VALUES.include?(@app_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field app_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ReleaseLock_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class LockAllApps_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REASON = 1

        FIELDS = {
          REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class LockAllApps_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UnlockAllApps_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UnlockAllApps_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AreAllAppsLocked_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AreAllAppsLocked_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetCurrentReason_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetCurrentReason_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeployConfigSnapshot_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        DEPLOY_ARGS = 1

        FIELDS = {
          DEPLOY_ARGS => {:type => ::Thrift::Types::STRUCT, :name => 'deploy_args', :class => ::Rapleaf::ConfigDeployer::ConfigDeployArgs}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DeployConfigSnapshot_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Rapleaf::ConfigDeployer::InvalidAppTypeException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetDeployStatuses_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetDeployStatuses_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Rapleaf::ConfigDeployer::AppType}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ConfigDeployer::ConfigDeployStatus}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetActiveSnapshotCounts_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetActiveSnapshotCounts_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Rapleaf::ConfigDeployer::AppType}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I32}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
