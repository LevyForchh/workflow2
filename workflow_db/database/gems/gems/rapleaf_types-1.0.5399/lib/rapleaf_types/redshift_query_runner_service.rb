#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'servile_service'
require File.join File.dirname(__FILE__), 'redshift_ingester_types'

module Liveramp
  module RedshiftIngester
    module RedshiftQueryRunnerService
      class Client < ::Liveramp::Types::Servile::ServileService::Client 
        include ::Thrift::Client

        def request_query(config, options)
          send_request_query(config, options)
          return recv_request_query()
        end

        def send_request_query(config, options)
          send_message('request_query', Request_query_args, :config => config, :options => options)
        end

        def recv_request_query()
          result = receive_message(Request_query_result)
          return result.success unless result.success.nil?
          raise result.ice unless result.ice.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'request_query failed: unknown result')
        end

        def get_config(request_id)
          send_get_config(request_id)
          return recv_get_config()
        end

        def send_get_config(request_id)
          send_message('get_config', Get_config_args, :request_id => request_id)
        end

        def recv_get_config()
          result = receive_message(Get_config_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_config failed: unknown result')
        end

        def get_configs(request_ids)
          send_get_configs(request_ids)
          return recv_get_configs()
        end

        def send_get_configs(request_ids)
          send_message('get_configs', Get_configs_args, :request_ids => request_ids)
        end

        def recv_get_configs()
          result = receive_message(Get_configs_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_configs failed: unknown result')
        end

        def run_query(query_string)
          send_run_query(query_string)
          return recv_run_query()
        end

        def send_run_query(query_string)
          send_message('run_query', Run_query_args, :query_string => query_string)
        end

        def recv_run_query()
          result = receive_message(Run_query_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'run_query failed: unknown result')
        end

        def validate_query(query_string)
          send_validate_query(query_string)
          return recv_validate_query()
        end

        def send_validate_query(query_string)
          send_message('validate_query', Validate_query_args, :query_string => query_string)
        end

        def recv_validate_query()
          result = receive_message(Validate_query_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validate_query failed: unknown result')
        end

      end

      class Processor < ::Liveramp::Types::Servile::ServileService::Processor 
        include ::Thrift::Processor

        def process_request_query(seqid, iprot, oprot)
          args = read_args(iprot, Request_query_args)
          result = Request_query_result.new()
          begin
            result.success = @handler.request_query(args.config, args.options)
          rescue ::Liveramp::Types::Servile::InvalidConfigException => ice
            result.ice = ice
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'request_query', seqid)
        end

        def process_get_config(seqid, iprot, oprot)
          args = read_args(iprot, Get_config_args)
          result = Get_config_result.new()
          result.success = @handler.get_config(args.request_id)
          write_result(result, oprot, 'get_config', seqid)
        end

        def process_get_configs(seqid, iprot, oprot)
          args = read_args(iprot, Get_configs_args)
          result = Get_configs_result.new()
          result.success = @handler.get_configs(args.request_ids)
          write_result(result, oprot, 'get_configs', seqid)
        end

        def process_run_query(seqid, iprot, oprot)
          args = read_args(iprot, Run_query_args)
          result = Run_query_result.new()
          begin
            result.success = @handler.run_query(args.query_string)
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'run_query', seqid)
        end

        def process_validate_query(seqid, iprot, oprot)
          args = read_args(iprot, Validate_query_args)
          result = Validate_query_result.new()
          result.success = @handler.validate_query(args.query_string)
          write_result(result, oprot, 'validate_query', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Request_query_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CONFIG = 1
        OPTIONS = 2

        FIELDS = {
          CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::RedshiftIngester::QueryRunnerConfig},
          OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'options', :class => ::Liveramp::Types::Servile::RequestOptions}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Request_query_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ICE = 1
        IOE = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          ICE => {:type => ::Thrift::Types::STRUCT, :name => 'ice', :class => ::Liveramp::Types::Servile::InvalidConfigException},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_config_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_config_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::RedshiftIngester::QueryRunnerConfig}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_configs_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_IDS = 1

        FIELDS = {
          REQUEST_IDS => {:type => ::Thrift::Types::LIST, :name => 'request_ids', :element => {:type => ::Thrift::Types::I64}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_configs_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::RedshiftIngester::QueryRunnerConfig}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Run_query_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        QUERY_STRING = 1

        FIELDS = {
          QUERY_STRING => {:type => ::Thrift::Types::STRING, :name => 'query_string'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Run_query_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::RedshiftIngester::QueryResponse},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Validate_query_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        QUERY_STRING = 1

        FIELDS = {
          QUERY_STRING => {:type => ::Thrift::Types::STRING, :name => 'query_string'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Validate_query_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
