#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'identifier_only_import_service_types'

module Liveramp
  module Importer
    module IdentifierOnly
      module IdentifierOnlyImportService
        class Client
          include ::Thrift::Client

          def prepare_identifier_only_import(path_to_parsed_file_records, file_configuration, options)
            send_prepare_identifier_only_import(path_to_parsed_file_records, file_configuration, options)
            return recv_prepare_identifier_only_import()
          end

          def send_prepare_identifier_only_import(path_to_parsed_file_records, file_configuration, options)
            send_message('prepare_identifier_only_import', Prepare_identifier_only_import_args, :path_to_parsed_file_records => path_to_parsed_file_records, :file_configuration => file_configuration, :options => options)
          end

          def recv_prepare_identifier_only_import()
            result = receive_message(Prepare_identifier_only_import_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'prepare_identifier_only_import failed: unknown result')
          end

          def get_import_status(identifier_only_import_request_id)
            send_get_import_status(identifier_only_import_request_id)
            return recv_get_import_status()
          end

          def send_get_import_status(identifier_only_import_request_id)
            send_message('get_import_status', Get_import_status_args, :identifier_only_import_request_id => identifier_only_import_request_id)
          end

          def recv_get_import_status()
            result = receive_message(Get_import_status_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_import_status failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_prepare_identifier_only_import(seqid, iprot, oprot)
            args = read_args(iprot, Prepare_identifier_only_import_args)
            result = Prepare_identifier_only_import_result.new()
            result.success = @handler.prepare_identifier_only_import(args.path_to_parsed_file_records, args.file_configuration, args.options)
            write_result(result, oprot, 'prepare_identifier_only_import', seqid)
          end

          def process_get_import_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_import_status_args)
            result = Get_import_status_result.new()
            result.success = @handler.get_import_status(args.identifier_only_import_request_id)
            write_result(result, oprot, 'get_import_status', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Prepare_identifier_only_import_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PATH_TO_PARSED_FILE_RECORDS = 1
          FILE_CONFIGURATION = 2
          OPTIONS = 4

          FIELDS = {
            PATH_TO_PARSED_FILE_RECORDS => {:type => ::Thrift::Types::STRING, :name => 'path_to_parsed_file_records'},
            FILE_CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'file_configuration', :class => ::Liveramp::Types::ParcService::FileConfiguration},
            OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'options', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportPreparationOptions}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Prepare_identifier_only_import_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_import_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          IDENTIFIER_ONLY_IMPORT_REQUEST_ID = 1

          FIELDS = {
            IDENTIFIER_ONLY_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'identifier_only_import_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_import_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportStatusResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
