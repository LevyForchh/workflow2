#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 's2s_health_monitor_types'

module Liveramp
  module S2s
    module HealthMonitor
      module HealthMonitor
        class Client
          include ::Thrift::Client

          def getAllStatuses()
            send_getAllStatuses()
            return recv_getAllStatuses()
          end

          def send_getAllStatuses()
            send_message('getAllStatuses', GetAllStatuses_args)
          end

          def recv_getAllStatuses()
            result = receive_message(GetAllStatuses_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllStatuses failed: unknown result')
          end

          def getStatus(process)
            send_getStatus(process)
            return recv_getStatus()
          end

          def send_getStatus(process)
            send_message('getStatus', GetStatus_args, :process => process)
          end

          def recv_getStatus()
            result = receive_message(GetStatus_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getStatus failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_getAllStatuses(seqid, iprot, oprot)
            args = read_args(iprot, GetAllStatuses_args)
            result = GetAllStatuses_result.new()
            result.success = @handler.getAllStatuses()
            write_result(result, oprot, 'getAllStatuses', seqid)
          end

          def process_getStatus(seqid, iprot, oprot)
            args = read_args(iprot, GetStatus_args)
            result = GetStatus_result.new()
            result.success = @handler.getStatus(args.process)
            write_result(result, oprot, 'getStatus', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class GetAllStatuses_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetAllStatuses_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::S2s::HealthMonitor::S2sProcess}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::S2s::HealthMonitor::S2sProcessStatus}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetStatus_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PROCESS = 1

          FIELDS = {
            PROCESS => {:type => ::Thrift::Types::I32, :name => 'process', :enum_class => ::Liveramp::S2s::HealthMonitor::S2sProcess}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @process.nil? || ::Liveramp::S2s::HealthMonitor::S2sProcess::VALID_VALUES.include?(@process)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field process!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetStatus_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::S2s::HealthMonitor::S2sProcessStatus}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
