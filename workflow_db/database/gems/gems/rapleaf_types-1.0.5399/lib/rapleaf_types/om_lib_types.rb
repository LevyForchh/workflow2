#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'liveramp_importer_types'


module Liveramp
  module OfflineMatching
    module Lib
      module DaemonRunRequestStatus
        PENDING = 1
        RUNNING = 2
        FINISHED = 3
        FAILED = 4
        CANCELLED = 5
        VALUE_MAP = {1 => "PENDING", 2 => "RUNNING", 3 => "FINISHED", 4 => "FAILED", 5 => "CANCELLED"}
        VALID_VALUES = Set.new([PENDING, RUNNING, FINISHED, FAILED, CANCELLED]).freeze
      end

      module DaemonRunRequestPriority
        VERY_LOW = 1
        LOW = 2
        NORMAL = 3
        HIGH = 4
        VERY_HIGH = 5
        VALUE_MAP = {1 => "VERY_LOW", 2 => "LOW", 3 => "NORMAL", 4 => "HIGH", 5 => "VERY_HIGH"}
        VALID_VALUES = Set.new([VERY_LOW, LOW, NORMAL, HIGH, VERY_HIGH]).freeze
      end

      class DaemonRunRequestInfoId; end

      class DaemonRunRequestInfo; end

      class DaemonRunRequestInfoId
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1
        APP_TYPE = 2

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'},
          APP_TYPE => {:type => ::Thrift::Types::I32, :name => 'app_type', :enum_class => ::Liveramp::Importer::AppType}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field request_id is unset!') unless @request_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field app_type is unset!') unless @app_type
          unless @app_type.nil? || ::Liveramp::Importer::AppType::VALID_VALUES.include?(@app_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field app_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DaemonRunRequestInfo
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        STATUS = 2
        PRIORITY = 3
        RETRIES = 4
        CREATED_AT = 5
        METADATA = 6

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Liveramp::OfflineMatching::Lib::DaemonRunRequestInfoId},
          STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::OfflineMatching::Lib::DaemonRunRequestStatus},
          PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => ::Liveramp::OfflineMatching::Lib::DaemonRunRequestPriority},
          RETRIES => {:type => ::Thrift::Types::I64, :name => 'retries'},
          CREATED_AT => {:type => ::Thrift::Types::I64, :name => 'created_at'},
          METADATA => {:type => ::Thrift::Types::MAP, :name => 'metadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field status is unset!') unless @status
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priority is unset!') unless @priority
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field retries is unset!') unless @retries
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field created_at is unset!') unless @created_at
          unless @status.nil? || ::Liveramp::OfflineMatching::Lib::DaemonRunRequestStatus::VALID_VALUES.include?(@status)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
          end
          unless @priority.nil? || ::Liveramp::OfflineMatching::Lib::DaemonRunRequestPriority::VALID_VALUES.include?(@priority)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
