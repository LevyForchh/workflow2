#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'graph_explorer_types'

module Liveramp
  module Types
    module GraphExplorer
      module GraphExplorerService
        class Client
          include ::Thrift::Client

          def getSupportedNodeTypes()
            send_getSupportedNodeTypes()
            return recv_getSupportedNodeTypes()
          end

          def send_getSupportedNodeTypes()
            send_message('getSupportedNodeTypes', GetSupportedNodeTypes_args)
          end

          def recv_getSupportedNodeTypes()
            result = receive_message(GetSupportedNodeTypes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSupportedNodeTypes failed: unknown result')
          end

          def getSupportedEdgeTypes()
            send_getSupportedEdgeTypes()
            return recv_getSupportedEdgeTypes()
          end

          def send_getSupportedEdgeTypes()
            send_message('getSupportedEdgeTypes', GetSupportedEdgeTypes_args)
          end

          def recv_getSupportedEdgeTypes()
            result = receive_message(GetSupportedEdgeTypes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSupportedEdgeTypes failed: unknown result')
          end

          def getChildTypes(parent)
            send_getChildTypes(parent)
            return recv_getChildTypes()
          end

          def send_getChildTypes(parent)
            send_message('getChildTypes', GetChildTypes_args, :parent => parent)
          end

          def recv_getChildTypes()
            result = receive_message(GetChildTypes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChildTypes failed: unknown result')
          end

          def getChildTypesFromNodeType(parentType)
            send_getChildTypesFromNodeType(parentType)
            return recv_getChildTypesFromNodeType()
          end

          def send_getChildTypesFromNodeType(parentType)
            send_message('getChildTypesFromNodeType', GetChildTypesFromNodeType_args, :parentType => parentType)
          end

          def recv_getChildTypesFromNodeType()
            result = receive_message(GetChildTypesFromNodeType_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChildTypesFromNodeType failed: unknown result')
          end

          def getPoolsForIdentifier(fieldId, availability)
            send_getPoolsForIdentifier(fieldId, availability)
            return recv_getPoolsForIdentifier()
          end

          def send_getPoolsForIdentifier(fieldId, availability)
            send_message('getPoolsForIdentifier', GetPoolsForIdentifier_args, :fieldId => fieldId, :availability => availability)
          end

          def recv_getPoolsForIdentifier()
            result = receive_message(GetPoolsForIdentifier_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPoolsForIdentifier failed: unknown result')
          end

          def getOutgoingEdges(parent, childrenType)
            send_getOutgoingEdges(parent, childrenType)
            return recv_getOutgoingEdges()
          end

          def send_getOutgoingEdges(parent, childrenType)
            send_message('getOutgoingEdges', GetOutgoingEdges_args, :parent => parent, :childrenType => childrenType)
          end

          def recv_getOutgoingEdges()
            result = receive_message(GetOutgoingEdges_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getOutgoingEdges failed: unknown result')
          end

          def getMetadata(id)
            send_getMetadata(id)
            return recv_getMetadata()
          end

          def send_getMetadata(id)
            send_message('getMetadata', GetMetadata_args, :id => id)
          end

          def recv_getMetadata()
            result = receive_message(GetMetadata_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getMetadata failed: unknown result')
          end

          def getSampleOfType(fieldId, poolId, numSamples)
            send_getSampleOfType(fieldId, poolId, numSamples)
            return recv_getSampleOfType()
          end

          def send_getSampleOfType(fieldId, poolId, numSamples)
            send_message('getSampleOfType', GetSampleOfType_args, :fieldId => fieldId, :poolId => poolId, :numSamples => numSamples)
          end

          def recv_getSampleOfType()
            result = receive_message(GetSampleOfType_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSampleOfType failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_getSupportedNodeTypes(seqid, iprot, oprot)
            args = read_args(iprot, GetSupportedNodeTypes_args)
            result = GetSupportedNodeTypes_result.new()
            result.success = @handler.getSupportedNodeTypes()
            write_result(result, oprot, 'getSupportedNodeTypes', seqid)
          end

          def process_getSupportedEdgeTypes(seqid, iprot, oprot)
            args = read_args(iprot, GetSupportedEdgeTypes_args)
            result = GetSupportedEdgeTypes_result.new()
            result.success = @handler.getSupportedEdgeTypes()
            write_result(result, oprot, 'getSupportedEdgeTypes', seqid)
          end

          def process_getChildTypes(seqid, iprot, oprot)
            args = read_args(iprot, GetChildTypes_args)
            result = GetChildTypes_result.new()
            result.success = @handler.getChildTypes(args.parent)
            write_result(result, oprot, 'getChildTypes', seqid)
          end

          def process_getChildTypesFromNodeType(seqid, iprot, oprot)
            args = read_args(iprot, GetChildTypesFromNodeType_args)
            result = GetChildTypesFromNodeType_result.new()
            result.success = @handler.getChildTypesFromNodeType(args.parentType)
            write_result(result, oprot, 'getChildTypesFromNodeType', seqid)
          end

          def process_getPoolsForIdentifier(seqid, iprot, oprot)
            args = read_args(iprot, GetPoolsForIdentifier_args)
            result = GetPoolsForIdentifier_result.new()
            result.success = @handler.getPoolsForIdentifier(args.fieldId, args.availability)
            write_result(result, oprot, 'getPoolsForIdentifier', seqid)
          end

          def process_getOutgoingEdges(seqid, iprot, oprot)
            args = read_args(iprot, GetOutgoingEdges_args)
            result = GetOutgoingEdges_result.new()
            result.success = @handler.getOutgoingEdges(args.parent, args.childrenType)
            write_result(result, oprot, 'getOutgoingEdges', seqid)
          end

          def process_getMetadata(seqid, iprot, oprot)
            args = read_args(iprot, GetMetadata_args)
            result = GetMetadata_result.new()
            result.success = @handler.getMetadata(args.id)
            write_result(result, oprot, 'getMetadata', seqid)
          end

          def process_getSampleOfType(seqid, iprot, oprot)
            args = read_args(iprot, GetSampleOfType_args)
            result = GetSampleOfType_result.new()
            result.success = @handler.getSampleOfType(args.fieldId, args.poolId, args.numSamples)
            write_result(result, oprot, 'getSampleOfType', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class GetSupportedNodeTypes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSupportedNodeTypes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSupportedEdgeTypes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSupportedEdgeTypes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::Types::Bang::BangEdgeType}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetChildTypes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARENT = 1

          FIELDS = {
            PARENT => {:type => ::Thrift::Types::STRUCT, :name => 'parent', :class => ::Liveramp::Types::Bang::AnonymousIdentifier}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetChildTypes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::GraphExplorer::GraphExplorerNodeType}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetChildTypesFromNodeType_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARENTTYPE = 1

          FIELDS = {
            PARENTTYPE => {:type => ::Thrift::Types::STRUCT, :name => 'parentType', :class => ::Liveramp::Types::GraphExplorer::GraphExplorerNodeType}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetChildTypesFromNodeType_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::GraphExplorer::GraphExplorerNodeType}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPoolsForIdentifier_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FIELDID = 1
          AVAILABILITY = 2

          FIELDS = {
            FIELDID => {:type => ::Thrift::Types::I16, :name => 'fieldId'},
            AVAILABILITY => {:type => ::Thrift::Types::BOOL, :name => 'availability'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetPoolsForIdentifier_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::GraphExplorer::GraphExplorerNodeType}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetOutgoingEdges_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARENT = 1
          CHILDRENTYPE = 2

          FIELDS = {
            PARENT => {:type => ::Thrift::Types::STRUCT, :name => 'parent', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
            CHILDRENTYPE => {:type => ::Thrift::Types::STRUCT, :name => 'childrenType', :class => ::Liveramp::Types::GraphExplorer::GraphExplorerNodeType}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetOutgoingEdges_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::BangEdge}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetMetadata_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ID = 1

          FIELDS = {
            ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Liveramp::Types::Bang::AnonymousIdentifier}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetMetadata_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::AnonymousIdentifierMetadata}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSampleOfType_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FIELDID = 1
          POOLID = 2
          NUMSAMPLES = 3

          FIELDS = {
            FIELDID => {:type => ::Thrift::Types::I16, :name => 'fieldId'},
            POOLID => {:type => ::Thrift::Types::I64, :name => 'poolId'},
            NUMSAMPLES => {:type => ::Thrift::Types::I32, :name => 'numSamples'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetSampleOfType_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::AnonymousIdentifier}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
