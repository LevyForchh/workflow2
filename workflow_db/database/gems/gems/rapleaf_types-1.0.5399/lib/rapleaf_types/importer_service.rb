#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'importer_service_types'

module Rapleaf
  module ImporterService
    module ImporterService
      class Client
        include ::Thrift::Client

        def createImporterServiceRequest(file_paths, liveramp_customer_account_id, user_id, hints, import_type, import_name)
          send_createImporterServiceRequest(file_paths, liveramp_customer_account_id, user_id, hints, import_type, import_name)
          return recv_createImporterServiceRequest()
        end

        def send_createImporterServiceRequest(file_paths, liveramp_customer_account_id, user_id, hints, import_type, import_name)
          send_message('createImporterServiceRequest', CreateImporterServiceRequest_args, :file_paths => file_paths, :liveramp_customer_account_id => liveramp_customer_account_id, :user_id => user_id, :hints => hints, :import_type => import_type, :import_name => import_name)
        end

        def recv_createImporterServiceRequest()
          result = receive_message(CreateImporterServiceRequest_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createImporterServiceRequest failed: unknown result')
        end

        def createImporterServiceRequestV2(file_paths, liveramp_customer_account_id, user_id, hints, import_type, import_name, is_online_import_request)
          send_createImporterServiceRequestV2(file_paths, liveramp_customer_account_id, user_id, hints, import_type, import_name, is_online_import_request)
          return recv_createImporterServiceRequestV2()
        end

        def send_createImporterServiceRequestV2(file_paths, liveramp_customer_account_id, user_id, hints, import_type, import_name, is_online_import_request)
          send_message('createImporterServiceRequestV2', CreateImporterServiceRequestV2_args, :file_paths => file_paths, :liveramp_customer_account_id => liveramp_customer_account_id, :user_id => user_id, :hints => hints, :import_type => import_type, :import_name => import_name, :is_online_import_request => is_online_import_request)
        end

        def recv_createImporterServiceRequestV2()
          result = receive_message(CreateImporterServiceRequestV2_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createImporterServiceRequestV2 failed: unknown result')
        end

        def getImporterServiceRequest(importer_service_request_id)
          send_getImporterServiceRequest(importer_service_request_id)
          return recv_getImporterServiceRequest()
        end

        def send_getImporterServiceRequest(importer_service_request_id)
          send_message('getImporterServiceRequest', GetImporterServiceRequest_args, :importer_service_request_id => importer_service_request_id)
        end

        def recv_getImporterServiceRequest()
          result = receive_message(GetImporterServiceRequest_result)
          return result.success unless result.success.nil?
          raise result.isrnfe unless result.isrnfe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getImporterServiceRequest failed: unknown result')
        end

        def updateLiverampImportSpec(spec, importer_service_request_id, user_id)
          send_updateLiverampImportSpec(spec, importer_service_request_id, user_id)
          recv_updateLiverampImportSpec()
        end

        def send_updateLiverampImportSpec(spec, importer_service_request_id, user_id)
          send_message('updateLiverampImportSpec', UpdateLiverampImportSpec_args, :spec => spec, :importer_service_request_id => importer_service_request_id, :user_id => user_id)
        end

        def recv_updateLiverampImportSpec()
          result = receive_message(UpdateLiverampImportSpec_result)
          raise result.ioe unless result.ioe.nil?
          return
        end

        def runImport(importer_service_request_id, user_id)
          send_runImport(importer_service_request_id, user_id)
          recv_runImport()
        end

        def send_runImport(importer_service_request_id, user_id)
          send_message('runImport', RunImport_args, :importer_service_request_id => importer_service_request_id, :user_id => user_id)
        end

        def recv_runImport()
          result = receive_message(RunImport_result)
          return
        end

        def validateImport(importer_service_request_id)
          send_validateImport(importer_service_request_id)
          return recv_validateImport()
        end

        def send_validateImport(importer_service_request_id)
          send_message('validateImport', ValidateImport_args, :importer_service_request_id => importer_service_request_id)
        end

        def recv_validateImport()
          result = receive_message(ValidateImport_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'validateImport failed: unknown result')
        end

        def getCustomerImporterServiceRequests(liveramp_customer_account_id)
          send_getCustomerImporterServiceRequests(liveramp_customer_account_id)
          return recv_getCustomerImporterServiceRequests()
        end

        def send_getCustomerImporterServiceRequests(liveramp_customer_account_id)
          send_message('getCustomerImporterServiceRequests', GetCustomerImporterServiceRequests_args, :liveramp_customer_account_id => liveramp_customer_account_id)
        end

        def recv_getCustomerImporterServiceRequests()
          result = receive_message(GetCustomerImporterServiceRequests_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCustomerImporterServiceRequests failed: unknown result')
        end

        def getBasicImportInfo(query)
          send_getBasicImportInfo(query)
          return recv_getBasicImportInfo()
        end

        def send_getBasicImportInfo(query)
          send_message('getBasicImportInfo', GetBasicImportInfo_args, :query => query)
        end

        def recv_getBasicImportInfo()
          result = receive_message(GetBasicImportInfo_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBasicImportInfo failed: unknown result')
        end

        def getBasicImportInfoForImport(liveramp_import_request_id)
          send_getBasicImportInfoForImport(liveramp_import_request_id)
          return recv_getBasicImportInfoForImport()
        end

        def send_getBasicImportInfoForImport(liveramp_import_request_id)
          send_message('getBasicImportInfoForImport', GetBasicImportInfoForImport_args, :liveramp_import_request_id => liveramp_import_request_id)
        end

        def recv_getBasicImportInfoForImport()
          result = receive_message(GetBasicImportInfoForImport_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBasicImportInfoForImport failed: unknown result')
        end

        def runAutoDetection(importer_service_request_id, import_type)
          send_runAutoDetection(importer_service_request_id, import_type)
        end

        def send_runAutoDetection(importer_service_request_id, import_type)
          send_oneway_message('runAutoDetection', RunAutoDetection_args, :importer_service_request_id => importer_service_request_id, :import_type => import_type)
        end
        def runAutoDetectionV2(importer_service_request_id, import_type, import_data_type)
          send_runAutoDetectionV2(importer_service_request_id, import_type, import_data_type)
        end

        def send_runAutoDetectionV2(importer_service_request_id, import_type, import_data_type)
          send_oneway_message('runAutoDetectionV2', RunAutoDetectionV2_args, :importer_service_request_id => importer_service_request_id, :import_type => import_type, :import_data_type => import_data_type)
        end
        def getReformattedFiles(auto_import_request_id, working_dir)
          send_getReformattedFiles(auto_import_request_id, working_dir)
          return recv_getReformattedFiles()
        end

        def send_getReformattedFiles(auto_import_request_id, working_dir)
          send_message('getReformattedFiles', GetReformattedFiles_args, :auto_import_request_id => auto_import_request_id, :working_dir => working_dir)
        end

        def recv_getReformattedFiles()
          result = receive_message(GetReformattedFiles_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getReformattedFiles failed: unknown result')
        end

        def getHeadersForFile(file_path)
          send_getHeadersForFile(file_path)
          return recv_getHeadersForFile()
        end

        def send_getHeadersForFile(file_path)
          send_message('getHeadersForFile', GetHeadersForFile_args, :file_path => file_path)
        end

        def recv_getHeadersForFile()
          result = receive_message(GetHeadersForFile_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getHeadersForFile failed: unknown result')
        end

        def getPathToPreprocessedRecords(liveramp_import_request_id)
          send_getPathToPreprocessedRecords(liveramp_import_request_id)
          return recv_getPathToPreprocessedRecords()
        end

        def send_getPathToPreprocessedRecords(liveramp_import_request_id)
          send_message('getPathToPreprocessedRecords', GetPathToPreprocessedRecords_args, :liveramp_import_request_id => liveramp_import_request_id)
        end

        def recv_getPathToPreprocessedRecords()
          result = receive_message(GetPathToPreprocessedRecords_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPathToPreprocessedRecords failed: unknown result')
        end

        def getPathToIrcs(liveramp_import_request_id)
          send_getPathToIrcs(liveramp_import_request_id)
          return recv_getPathToIrcs()
        end

        def send_getPathToIrcs(liveramp_import_request_id)
          send_message('getPathToIrcs', GetPathToIrcs_args, :liveramp_import_request_id => liveramp_import_request_id)
        end

        def recv_getPathToIrcs()
          result = receive_message(GetPathToIrcs_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPathToIrcs failed: unknown result')
        end

        def getPathToCopiedFiles(liveramp_import_request_id)
          send_getPathToCopiedFiles(liveramp_import_request_id)
          return recv_getPathToCopiedFiles()
        end

        def send_getPathToCopiedFiles(liveramp_import_request_id)
          send_message('getPathToCopiedFiles', GetPathToCopiedFiles_args, :liveramp_import_request_id => liveramp_import_request_id)
        end

        def recv_getPathToCopiedFiles()
          result = receive_message(GetPathToCopiedFiles_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPathToCopiedFiles failed: unknown result')
        end

        def getFileSpecForImport(liveramp_import_request_id)
          send_getFileSpecForImport(liveramp_import_request_id)
          return recv_getFileSpecForImport()
        end

        def send_getFileSpecForImport(liveramp_import_request_id)
          send_message('getFileSpecForImport', GetFileSpecForImport_args, :liveramp_import_request_id => liveramp_import_request_id)
        end

        def recv_getFileSpecForImport()
          result = receive_message(GetFileSpecForImport_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFileSpecForImport failed: unknown result')
        end

        def createSimpleOnboardLegacyImportModel(feed_id, liveramp_file_id, field_id, field_value_id, app_type, request_id)
          send_createSimpleOnboardLegacyImportModel(feed_id, liveramp_file_id, field_id, field_value_id, app_type, request_id)
          return recv_createSimpleOnboardLegacyImportModel()
        end

        def send_createSimpleOnboardLegacyImportModel(feed_id, liveramp_file_id, field_id, field_value_id, app_type, request_id)
          send_message('createSimpleOnboardLegacyImportModel', CreateSimpleOnboardLegacyImportModel_args, :feed_id => feed_id, :liveramp_file_id => liveramp_file_id, :field_id => field_id, :field_value_id => field_value_id, :app_type => app_type, :request_id => request_id)
        end

        def recv_createSimpleOnboardLegacyImportModel()
          result = receive_message(CreateSimpleOnboardLegacyImportModel_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSimpleOnboardLegacyImportModel failed: unknown result')
        end

        def addFileSpecToImportSpecs(liveramp_import_request_id, new_file_spec)
          send_addFileSpecToImportSpecs(liveramp_import_request_id, new_file_spec)
          recv_addFileSpecToImportSpecs()
        end

        def send_addFileSpecToImportSpecs(liveramp_import_request_id, new_file_spec)
          send_message('addFileSpecToImportSpecs', AddFileSpecToImportSpecs_args, :liveramp_import_request_id => liveramp_import_request_id, :new_file_spec => new_file_spec)
        end

        def recv_addFileSpecToImportSpecs()
          result = receive_message(AddFileSpecToImportSpecs_result)
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_createImporterServiceRequest(seqid, iprot, oprot)
          args = read_args(iprot, CreateImporterServiceRequest_args)
          result = CreateImporterServiceRequest_result.new()
          begin
            result.success = @handler.createImporterServiceRequest(args.file_paths, args.liveramp_customer_account_id, args.user_id, args.hints, args.import_type, args.import_name)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'createImporterServiceRequest', seqid)
        end

        def process_createImporterServiceRequestV2(seqid, iprot, oprot)
          args = read_args(iprot, CreateImporterServiceRequestV2_args)
          result = CreateImporterServiceRequestV2_result.new()
          begin
            result.success = @handler.createImporterServiceRequestV2(args.file_paths, args.liveramp_customer_account_id, args.user_id, args.hints, args.import_type, args.import_name, args.is_online_import_request)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'createImporterServiceRequestV2', seqid)
        end

        def process_getImporterServiceRequest(seqid, iprot, oprot)
          args = read_args(iprot, GetImporterServiceRequest_args)
          result = GetImporterServiceRequest_result.new()
          begin
            result.success = @handler.getImporterServiceRequest(args.importer_service_request_id)
          rescue ::Rapleaf::ImporterService::InputOutputException => isrnfe
            result.isrnfe = isrnfe
          end
          write_result(result, oprot, 'getImporterServiceRequest', seqid)
        end

        def process_updateLiverampImportSpec(seqid, iprot, oprot)
          args = read_args(iprot, UpdateLiverampImportSpec_args)
          result = UpdateLiverampImportSpec_result.new()
          begin
            @handler.updateLiverampImportSpec(args.spec, args.importer_service_request_id, args.user_id)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'updateLiverampImportSpec', seqid)
        end

        def process_runImport(seqid, iprot, oprot)
          args = read_args(iprot, RunImport_args)
          result = RunImport_result.new()
          @handler.runImport(args.importer_service_request_id, args.user_id)
          write_result(result, oprot, 'runImport', seqid)
        end

        def process_validateImport(seqid, iprot, oprot)
          args = read_args(iprot, ValidateImport_args)
          result = ValidateImport_result.new()
          begin
            result.success = @handler.validateImport(args.importer_service_request_id)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'validateImport', seqid)
        end

        def process_getCustomerImporterServiceRequests(seqid, iprot, oprot)
          args = read_args(iprot, GetCustomerImporterServiceRequests_args)
          result = GetCustomerImporterServiceRequests_result.new()
          begin
            result.success = @handler.getCustomerImporterServiceRequests(args.liveramp_customer_account_id)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'getCustomerImporterServiceRequests', seqid)
        end

        def process_getBasicImportInfo(seqid, iprot, oprot)
          args = read_args(iprot, GetBasicImportInfo_args)
          result = GetBasicImportInfo_result.new()
          begin
            result.success = @handler.getBasicImportInfo(args.query)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'getBasicImportInfo', seqid)
        end

        def process_getBasicImportInfoForImport(seqid, iprot, oprot)
          args = read_args(iprot, GetBasicImportInfoForImport_args)
          result = GetBasicImportInfoForImport_result.new()
          result.success = @handler.getBasicImportInfoForImport(args.liveramp_import_request_id)
          write_result(result, oprot, 'getBasicImportInfoForImport', seqid)
        end

        def process_runAutoDetection(seqid, iprot, oprot)
          args = read_args(iprot, RunAutoDetection_args)
          @handler.runAutoDetection(args.importer_service_request_id, args.import_type)
          return
        end

        def process_runAutoDetectionV2(seqid, iprot, oprot)
          args = read_args(iprot, RunAutoDetectionV2_args)
          @handler.runAutoDetectionV2(args.importer_service_request_id, args.import_type, args.import_data_type)
          return
        end

        def process_getReformattedFiles(seqid, iprot, oprot)
          args = read_args(iprot, GetReformattedFiles_args)
          result = GetReformattedFiles_result.new()
          begin
            result.success = @handler.getReformattedFiles(args.auto_import_request_id, args.working_dir)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'getReformattedFiles', seqid)
        end

        def process_getHeadersForFile(seqid, iprot, oprot)
          args = read_args(iprot, GetHeadersForFile_args)
          result = GetHeadersForFile_result.new()
          begin
            result.success = @handler.getHeadersForFile(args.file_path)
          rescue ::Rapleaf::ImporterService::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'getHeadersForFile', seqid)
        end

        def process_getPathToPreprocessedRecords(seqid, iprot, oprot)
          args = read_args(iprot, GetPathToPreprocessedRecords_args)
          result = GetPathToPreprocessedRecords_result.new()
          result.success = @handler.getPathToPreprocessedRecords(args.liveramp_import_request_id)
          write_result(result, oprot, 'getPathToPreprocessedRecords', seqid)
        end

        def process_getPathToIrcs(seqid, iprot, oprot)
          args = read_args(iprot, GetPathToIrcs_args)
          result = GetPathToIrcs_result.new()
          result.success = @handler.getPathToIrcs(args.liveramp_import_request_id)
          write_result(result, oprot, 'getPathToIrcs', seqid)
        end

        def process_getPathToCopiedFiles(seqid, iprot, oprot)
          args = read_args(iprot, GetPathToCopiedFiles_args)
          result = GetPathToCopiedFiles_result.new()
          result.success = @handler.getPathToCopiedFiles(args.liveramp_import_request_id)
          write_result(result, oprot, 'getPathToCopiedFiles', seqid)
        end

        def process_getFileSpecForImport(seqid, iprot, oprot)
          args = read_args(iprot, GetFileSpecForImport_args)
          result = GetFileSpecForImport_result.new()
          result.success = @handler.getFileSpecForImport(args.liveramp_import_request_id)
          write_result(result, oprot, 'getFileSpecForImport', seqid)
        end

        def process_createSimpleOnboardLegacyImportModel(seqid, iprot, oprot)
          args = read_args(iprot, CreateSimpleOnboardLegacyImportModel_args)
          result = CreateSimpleOnboardLegacyImportModel_result.new()
          result.success = @handler.createSimpleOnboardLegacyImportModel(args.feed_id, args.liveramp_file_id, args.field_id, args.field_value_id, args.app_type, args.request_id)
          write_result(result, oprot, 'createSimpleOnboardLegacyImportModel', seqid)
        end

        def process_addFileSpecToImportSpecs(seqid, iprot, oprot)
          args = read_args(iprot, AddFileSpecToImportSpecs_args)
          result = AddFileSpecToImportSpecs_result.new()
          @handler.addFileSpecToImportSpecs(args.liveramp_import_request_id, args.new_file_spec)
          write_result(result, oprot, 'addFileSpecToImportSpecs', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class CreateImporterServiceRequest_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FILE_PATHS = 1
        LIVERAMP_CUSTOMER_ACCOUNT_ID = 2
        USER_ID = 3
        HINTS = 4
        IMPORT_TYPE = 5
        IMPORT_NAME = 6

        FIELDS = {
          FILE_PATHS => {:type => ::Thrift::Types::LIST, :name => 'file_paths', :element => {:type => ::Thrift::Types::STRING}},
          LIVERAMP_CUSTOMER_ACCOUNT_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_customer_account_id'},
          USER_ID => {:type => ::Thrift::Types::I32, :name => 'user_id'},
          HINTS => {:type => ::Thrift::Types::STRUCT, :name => 'hints', :class => ::Rapleaf::ImporterService::HintsForAutodetection},
          IMPORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_type', :enum_class => ::Rapleaf::ImporterService::ImportType},
          IMPORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'import_name'}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @import_type.nil? || ::Rapleaf::ImporterService::ImportType::VALID_VALUES.include?(@import_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateImporterServiceRequest_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateImporterServiceRequestV2_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FILE_PATHS = 1
        LIVERAMP_CUSTOMER_ACCOUNT_ID = 2
        USER_ID = 3
        HINTS = 4
        IMPORT_TYPE = 5
        IMPORT_NAME = 6
        IS_ONLINE_IMPORT_REQUEST = 7

        FIELDS = {
          FILE_PATHS => {:type => ::Thrift::Types::LIST, :name => 'file_paths', :element => {:type => ::Thrift::Types::STRING}},
          LIVERAMP_CUSTOMER_ACCOUNT_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_customer_account_id'},
          USER_ID => {:type => ::Thrift::Types::I32, :name => 'user_id'},
          HINTS => {:type => ::Thrift::Types::STRUCT, :name => 'hints', :class => ::Rapleaf::ImporterService::HintsForAutodetection},
          IMPORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_type', :enum_class => ::Rapleaf::ImporterService::ImportType},
          IMPORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'import_name'},
          IS_ONLINE_IMPORT_REQUEST => {:type => ::Thrift::Types::BOOL, :name => 'is_online_import_request'}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @import_type.nil? || ::Rapleaf::ImporterService::ImportType::VALID_VALUES.include?(@import_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateImporterServiceRequestV2_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetImporterServiceRequest_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IMPORTER_SERVICE_REQUEST_ID = 1

        FIELDS = {
          IMPORTER_SERVICE_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'importer_service_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetImporterServiceRequest_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ISRNFE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::ImporterService::ImporterServiceRequest},
          ISRNFE => {:type => ::Thrift::Types::STRUCT, :name => 'isrnfe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateLiverampImportSpec_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SPEC = 1
        IMPORTER_SERVICE_REQUEST_ID = 2
        USER_ID = 3

        FIELDS = {
          SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spec', :class => ::Rapleaf::ImporterService::LiverampImportSpec},
          IMPORTER_SERVICE_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'importer_service_request_id'},
          USER_ID => {:type => ::Thrift::Types::I32, :name => 'user_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UpdateLiverampImportSpec_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IOE = 1

        FIELDS = {
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RunImport_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IMPORTER_SERVICE_REQUEST_ID = 1
        USER_ID = 2

        FIELDS = {
          IMPORTER_SERVICE_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'importer_service_request_id'},
          USER_ID => {:type => ::Thrift::Types::I32, :name => 'user_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RunImport_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ValidateImport_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IMPORTER_SERVICE_REQUEST_ID = 1

        FIELDS = {
          IMPORTER_SERVICE_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'importer_service_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ValidateImport_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::ImporterService::ImportValidationResult},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetCustomerImporterServiceRequests_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_CUSTOMER_ACCOUNT_ID = 1

        FIELDS = {
          LIVERAMP_CUSTOMER_ACCOUNT_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_customer_account_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetCustomerImporterServiceRequests_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ImporterServiceRequest}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetBasicImportInfo_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        QUERY = 1

        FIELDS = {
          QUERY => {:type => ::Thrift::Types::STRUCT, :name => 'query', :class => ::Rapleaf::ImporterService::BasicImportInfoQuery}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetBasicImportInfo_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::BasicImportInfo}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetBasicImportInfoForImport_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_IMPORT_REQUEST_ID = 1

        FIELDS = {
          LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetBasicImportInfoForImport_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::ImporterService::BasicImportInfo}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RunAutoDetection_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IMPORTER_SERVICE_REQUEST_ID = 1
        IMPORT_TYPE = 2

        FIELDS = {
          IMPORTER_SERVICE_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'importer_service_request_id'},
          IMPORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_type', :enum_class => ::Rapleaf::ImporterService::ImportType}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @import_type.nil? || ::Rapleaf::ImporterService::ImportType::VALID_VALUES.include?(@import_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RunAutoDetection_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RunAutoDetectionV2_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IMPORTER_SERVICE_REQUEST_ID = 1
        IMPORT_TYPE = 2
        IMPORT_DATA_TYPE = 3

        FIELDS = {
          IMPORTER_SERVICE_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'importer_service_request_id'},
          IMPORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_type', :enum_class => ::Rapleaf::ImporterService::ImportType},
          IMPORT_DATA_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_data_type', :enum_class => ::Rapleaf::ImporterService::ImportDataType}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @import_type.nil? || ::Rapleaf::ImporterService::ImportType::VALID_VALUES.include?(@import_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_type!')
          end
          unless @import_data_type.nil? || ::Rapleaf::ImporterService::ImportDataType::VALID_VALUES.include?(@import_data_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_data_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RunAutoDetectionV2_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetReformattedFiles_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUTO_IMPORT_REQUEST_ID = 1
        WORKING_DIR = 2

        FIELDS = {
          AUTO_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'auto_import_request_id'},
          WORKING_DIR => {:type => ::Thrift::Types::STRING, :name => 'working_dir'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetReformattedFiles_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetHeadersForFile_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FILE_PATH = 1

        FIELDS = {
          FILE_PATH => {:type => ::Thrift::Types::STRING, :name => 'file_path'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetHeadersForFile_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Rapleaf::ImporterService::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPathToPreprocessedRecords_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_IMPORT_REQUEST_ID = 1

        FIELDS = {
          LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPathToPreprocessedRecords_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPathToIrcs_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_IMPORT_REQUEST_ID = 1

        FIELDS = {
          LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPathToIrcs_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPathToCopiedFiles_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_IMPORT_REQUEST_ID = 1

        FIELDS = {
          LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetPathToCopiedFiles_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetFileSpecForImport_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_IMPORT_REQUEST_ID = 1

        FIELDS = {
          LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GetFileSpecForImport_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::ImporterService::FileSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateSimpleOnboardLegacyImportModel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FEED_ID = -1
        LIVERAMP_FILE_ID = -2
        FIELD_ID = -3
        FIELD_VALUE_ID = -4
        APP_TYPE = -5
        REQUEST_ID = -6

        FIELDS = {
          FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
          LIVERAMP_FILE_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_file_id'},
          FIELD_ID => {:type => ::Thrift::Types::I64, :name => 'field_id'},
          FIELD_VALUE_ID => {:type => ::Thrift::Types::I64, :name => 'field_value_id'},
          APP_TYPE => {:type => ::Thrift::Types::I32, :name => 'app_type'},
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateSimpleOnboardLegacyImportModel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AddFileSpecToImportSpecs_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LIVERAMP_IMPORT_REQUEST_ID = -1
        NEW_FILE_SPEC = -2

        FIELDS = {
          LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request_id'},
          NEW_FILE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'new_file_spec', :class => ::Rapleaf::ImporterService::FileSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AddFileSpecToImportSpecs_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
