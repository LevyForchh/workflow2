#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'util_types'


module Liveramp
  module Sweeper
    module ResourceType
      LOCAL = 1
      NFS = 2
      HDFS = 3
      DB = 4
      S3 = 5
      VALUE_MAP = {1 => "LOCAL", 2 => "NFS", 3 => "HDFS", 4 => "DB", 5 => "S3"}
      VALID_VALUES = Set.new([LOCAL, NFS, HDFS, DB, S3]).freeze
    end

    module SweeperAction
      DELETE = 1
      ARCHIVE = 2
      VALUE_MAP = {1 => "DELETE", 2 => "ARCHIVE"}
      VALID_VALUES = Set.new([DELETE, ARCHIVE]).freeze
    end

    class LocalSweepConfig; end

    class NfsSweepConfig; end

    class HdfsSweepConfig; end

    class DbSweepConfig; end

    class S3SweepConfig; end

    class DeleteConfig; end

    class ArchiveConfig; end

    class ResourceConfig < ::Thrift::Union; end

    class ActionConfig < ::Thrift::Union; end

    class SweeperPolicyConfig; end

    class SweeperResult; end

    class LocalSweepConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HOST = 1
      PATH = 2
      PATTERN = 3
      SIZE = 4

      FIELDS = {
        HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        PATTERN => {:type => ::Thrift::Types::STRING, :name => 'pattern'},
        SIZE => {:type => ::Thrift::Types::I64, :name => 'size', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NfsSweepConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PATH = 1
      PATTERN = 2
      SIZE = 3

      FIELDS = {
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        PATTERN => {:type => ::Thrift::Types::STRING, :name => 'pattern'},
        SIZE => {:type => ::Thrift::Types::I64, :name => 'size', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HdfsSweepConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PATH = 1
      PATTERN = 2
      SIZE = 3

      FIELDS = {
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        PATTERN => {:type => ::Thrift::Types::STRING, :name => 'pattern'},
        SIZE => {:type => ::Thrift::Types::I64, :name => 'size', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DbSweepConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TABLE = 1

      FIELDS = {
        TABLE => {:type => ::Thrift::Types::STRING, :name => 'table'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class S3SweepConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BUCKET = 1
      PREFIX = 2
      PATTERN = 3

      FIELDS = {
        BUCKET => {:type => ::Thrift::Types::STRING, :name => 'bucket'},
        PREFIX => {:type => ::Thrift::Types::STRING, :name => 'prefix'},
        PATTERN => {:type => ::Thrift::Types::STRING, :name => 'pattern'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeleteConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ArchiveConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TARGET_PATH = 1

      FIELDS = {
        TARGET_PATH => {:type => ::Thrift::Types::STRING, :name => 'target_path'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ResourceConfig < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def local(val)
          ResourceConfig.new(:local, val)
        end

        def nfs(val)
          ResourceConfig.new(:nfs, val)
        end

        def hdfs(val)
          ResourceConfig.new(:hdfs, val)
        end

        def db(val)
          ResourceConfig.new(:db, val)
        end

        def s3(val)
          ResourceConfig.new(:s3, val)
        end
      end

      LOCAL = 1
      NFS = 2
      HDFS = 3
      DB = 4
      S3 = 5

      FIELDS = {
        LOCAL => {:type => ::Thrift::Types::STRUCT, :name => 'local', :class => ::Liveramp::Sweeper::LocalSweepConfig, :optional => true},
        NFS => {:type => ::Thrift::Types::STRUCT, :name => 'nfs', :class => ::Liveramp::Sweeper::NfsSweepConfig, :optional => true},
        HDFS => {:type => ::Thrift::Types::STRUCT, :name => 'hdfs', :class => ::Liveramp::Sweeper::HdfsSweepConfig, :optional => true},
        DB => {:type => ::Thrift::Types::STRUCT, :name => 'db', :class => ::Liveramp::Sweeper::DbSweepConfig, :optional => true},
        S3 => {:type => ::Thrift::Types::STRUCT, :name => 's3', :class => ::Liveramp::Sweeper::S3SweepConfig, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class ActionConfig < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def delete_config(val)
          ActionConfig.new(:delete_config, val)
        end

        def archive_config(val)
          ActionConfig.new(:archive_config, val)
        end
      end

      DELETE_CONFIG = 1
      ARCHIVE_CONFIG = 2

      FIELDS = {
        DELETE_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'delete_config', :class => ::Liveramp::Sweeper::DeleteConfig, :optional => true},
        ARCHIVE_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'archive_config', :class => ::Liveramp::Sweeper::ArchiveConfig, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class SweeperPolicyConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RESOURCE_CONFIG = 1
      ACTION_CONFIG = 2
      RETENTION_PERIOD = 3

      FIELDS = {
        RESOURCE_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'resource_config', :class => ::Liveramp::Sweeper::ResourceConfig},
        ACTION_CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'action_config', :class => ::Liveramp::Sweeper::ActionConfig},
        RETENTION_PERIOD => {:type => ::Thrift::Types::I64, :name => 'retention_period'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SweeperResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 1
      START_AT = 2
      END_AT = 3
      ENTRY_SWEPT = 4

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
        START_AT => {:type => ::Thrift::Types::I64, :name => 'start_at'},
        END_AT => {:type => ::Thrift::Types::I64, :name => 'end_at'},
        ENTRY_SWEPT => {:type => ::Thrift::Types::I32, :name => 'entry_swept'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
