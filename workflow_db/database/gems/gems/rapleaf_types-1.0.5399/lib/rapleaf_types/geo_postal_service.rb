#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'geo_postal_types'

module Rapleaf
  module Types
    module GeoPostal
      module GeoPostalService
        class Client
          include ::Thrift::Client

          def query(query)
            send_query(query)
            return recv_query()
          end

          def send_query(query)
            send_message('query', Query_args, :query => query)
          end

          def recv_query()
            result = receive_message(Query_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'query failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_query(seqid, iprot, oprot)
            args = read_args(iprot, Query_args)
            result = Query_result.new()
            result.success = @handler.query(args.query)
            write_result(result, oprot, 'query', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Query_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          QUERY = 1

          FIELDS = {
            QUERY => {:type => ::Thrift::Types::STRUCT, :name => 'query', :class => ::Rapleaf::Types::GeoPostal::GeoPostalQuery}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Query_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::Types::GeoPostal::GeoPostalResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
