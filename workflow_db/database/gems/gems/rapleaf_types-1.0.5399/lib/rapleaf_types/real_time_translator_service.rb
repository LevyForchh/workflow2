#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'translation_zone_types'

module Liveramp
  module OfflineMatching
    module TranslationZone
      module RealTimeTranslatorService
        class Client
          include ::Thrift::Client

          def translate(pii_records, use_case, matching)
            send_translate(pii_records, use_case, matching)
            return recv_translate()
          end

          def send_translate(pii_records, use_case, matching)
            send_message('translate', Translate_args, :pii_records => pii_records, :use_case => use_case, :matching => matching)
          end

          def recv_translate()
            result = receive_message(Translate_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'translate failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_translate(seqid, iprot, oprot)
            args = read_args(iprot, Translate_args)
            result = Translate_result.new()
            result.success = @handler.translate(args.pii_records, args.use_case, args.matching)
            write_result(result, oprot, 'translate', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Translate_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PII_RECORDS = 1
          USE_CASE = 2
          MATCHING = 3

          FIELDS = {
            PII_RECORDS => {:type => ::Thrift::Types::SET, :name => 'pii_records', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::OfflineMatching::TranslationZone::TranslatorPiiRecord}},
            USE_CASE => {:type => ::Thrift::Types::I32, :name => 'use_case', :enum_class => ::Liveramp::OfflineMatching::TranslationZone::TranslatorUseCase},
            MATCHING => {:type => ::Thrift::Types::I32, :name => 'matching', :enum_class => ::Liveramp::OfflineMatching::TranslationZone::RealTimeTranslatorMatching}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @use_case.nil? || ::Liveramp::OfflineMatching::TranslationZone::TranslatorUseCase::VALID_VALUES.include?(@use_case)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field use_case!')
            end
            unless @matching.nil? || ::Liveramp::OfflineMatching::TranslationZone::RealTimeTranslatorMatching::VALID_VALUES.include?(@matching)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field matching!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Translate_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::OfflineMatching::TranslationZone::RealTimeTranslatorResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
