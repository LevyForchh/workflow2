#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'bang_types'
require File.join File.dirname(__FILE__), 'audience_types'
require File.join File.dirname(__FILE__), 'anonymous_identifier_mapping_types'


module Liveramp
  module Types
    module AIFConnector
      class AnonymouslyIdentifiedFields; end

      class PartitionedStoreHandle; end

      class StoreHandle < ::Thrift::Union; end

      class AnonymouslyIdentifiedFields
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ANONYMOUS_IDENTIFIER = 1
        FIELDS = 2
        HASHED_AUDIENCE_KEY_BY_AUDIENCE_ID = 3
        ANONYMOUS_IDENTIFIER_METADATA = 4
        COLLECTION_ID = 6
        AUDIENCE_VERSION_BY_AUDIENCE_ID = 7
        CONFIDENCE = 8
        IDENTIFIERS_BY_NAME = 9

        FIELDS = {
          ANONYMOUS_IDENTIFIER => {:type => ::Thrift::Types::STRUCT, :name => 'anonymous_identifier', :class => ::Liveramp::Types::Bang::AnonymousIdentifier},
          FIELDS => {:type => ::Thrift::Types::LIST, :name => 'fields', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::NewPersonData::LRCField}},
          HASHED_AUDIENCE_KEY_BY_AUDIENCE_ID => {:type => ::Thrift::Types::MAP, :name => 'hashed_audience_key_by_audience_id', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING, :binary => true}, :optional => true},
          ANONYMOUS_IDENTIFIER_METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'anonymous_identifier_metadata', :class => ::Liveramp::Types::Bang::AnonymousIdentifierMetadata, :optional => true},
          COLLECTION_ID => {:type => ::Thrift::Types::I64, :name => 'collection_id', :optional => true},
          AUDIENCE_VERSION_BY_AUDIENCE_ID => {:type => ::Thrift::Types::MAP, :name => 'audience_version_by_audience_id', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::I32}, :optional => true},
          CONFIDENCE => {:type => ::Thrift::Types::I32, :name => 'confidence', :optional => true},
          IDENTIFIERS_BY_NAME => {:type => ::Thrift::Types::MAP, :name => 'identifiers_by_name', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::AnonymousIdentifier}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field anonymous_identifier is unset!') unless @anonymous_identifier
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fields is unset!') unless @fields
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PartitionedStoreHandle
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ROOT = 1
        PARTITIONS = 2

        FIELDS = {
          ROOT => {:type => ::Thrift::Types::STRING, :name => 'root'},
          PARTITIONS => {:type => ::Thrift::Types::SET, :name => 'partitions', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field root is unset!') unless @root
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field partitions is unset!') unless @partitions
        end

        ::Thrift::Struct.generate_accessors self
      end

      class StoreHandle < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def bucket_data_store_path(val)
            StoreHandle.new(:bucket_data_store_path, val)
          end

          def partitioned_store_handle(val)
            StoreHandle.new(:partitioned_store_handle, val)
          end
        end

        BUCKET_DATA_STORE_PATH = 1
        PARTITIONED_STORE_HANDLE = 2

        FIELDS = {
          BUCKET_DATA_STORE_PATH => {:type => ::Thrift::Types::STRING, :name => 'bucket_data_store_path', :optional => true},
          PARTITIONED_STORE_HANDLE => {:type => ::Thrift::Types::STRUCT, :name => 'partitioned_store_handle', :class => ::Liveramp::Types::AIFConnector::PartitionedStoreHandle, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

    end
  end
end
