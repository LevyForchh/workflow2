#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'parc_service_types'
require File.join File.dirname(__FILE__), 'parc_types'
require File.join File.dirname(__FILE__), 'importer_types'
require File.join File.dirname(__FILE__), 'identifier_only_importer_types'


module Liveramp
  module Importer
    module IdentifierOnly
      module IdentifierOnlyImportRequestStatusValue
        PENDING = 0
        RUNNING = 1
        COMPLETED = 2
        CONFIGURATION_ERROR = 3
        DELETED = 4
        FAILED = 5
        IRRECOVERABLY_FAILED = 6
        CANCELLED = 7
        VALUE_MAP = {0 => "PENDING", 1 => "RUNNING", 2 => "COMPLETED", 3 => "CONFIGURATION_ERROR", 4 => "DELETED", 5 => "FAILED", 6 => "IRRECOVERABLY_FAILED", 7 => "CANCELLED"}
        VALID_VALUES = Set.new([PENDING, RUNNING, COMPLETED, CONFIGURATION_ERROR, DELETED, FAILED, IRRECOVERABLY_FAILED, CANCELLED]).freeze
      end

      class IdentifierOnlyImportExpiration < ::Thrift::Union; end

      class IdentifierOnlyImportRequestReady; end

      class IdentifierOnlyImportRequestFailureEvent; end

      class IdentifierOnlyImportRequestProcessing; end

      class IdentifierOnlyImportRequestConfigurationError; end

      class IdentifierOnlyImportRequestExpired; end

      class IdentifierOnlyImportRequestStatus < ::Thrift::Union; end

      class IdentifierOnlyJobletOutput; end

      class IdentifierOnlyImportStatusResponse; end

      class IdentifierOnlyImportRequestAccepted; end

      class IdentifierOnlyImportRequestRejected; end

      class IdentifierOnlyImportRequestResponse < ::Thrift::Union; end

      class IdentifierOnlyImportRefreshAccepted; end

      class IdentifierOnlyImportRefreshRejected; end

      class IdentifierOnlyImportRefreshResponse < ::Thrift::Union; end

      class IdentifierOnlyImportPreparationOptions; end

      class IdentifierOnlyImportExpiration < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def utc_time_of_expiry(val)
            IdentifierOnlyImportExpiration.new(:utc_time_of_expiry, val)
          end

          def never_expire(val)
            IdentifierOnlyImportExpiration.new(:never_expire, val)
          end
        end

        UTC_TIME_OF_EXPIRY = 1
        NEVER_EXPIRE = 2

        FIELDS = {
          UTC_TIME_OF_EXPIRY => {:type => ::Thrift::Types::I64, :name => 'utc_time_of_expiry', :optional => true},
          NEVER_EXPIRE => {:type => ::Thrift::Types::BOOL, :name => 'never_expire', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IdentifierOnlyImportRequestReady
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IDENTIFIER_ONLY_IMPORT_REQUEST_ID = 1
        PATH_TO_PII_IDENTIFIER_RECORDS = 2
        PATH_TO_ANONYMOUS_IDENTIFIER_RECORDS = 3
        EXPIRATION = 5
        TOTAL_RECORDS = 6

        FIELDS = {
          IDENTIFIER_ONLY_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'identifier_only_import_request_id'},
          PATH_TO_PII_IDENTIFIER_RECORDS => {:type => ::Thrift::Types::STRING, :name => 'path_to_pii_identifier_records'},
          PATH_TO_ANONYMOUS_IDENTIFIER_RECORDS => {:type => ::Thrift::Types::STRING, :name => 'path_to_anonymous_identifier_records'},
          EXPIRATION => {:type => ::Thrift::Types::STRUCT, :name => 'expiration', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportExpiration},
          TOTAL_RECORDS => {:type => ::Thrift::Types::I64, :name => 'total_records'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field identifier_only_import_request_id is unset!') unless @identifier_only_import_request_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field path_to_pii_identifier_records is unset!') unless @path_to_pii_identifier_records
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field path_to_anonymous_identifier_records is unset!') unless @path_to_anonymous_identifier_records
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field expiration is unset!') unless @expiration
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field total_records is unset!') unless @total_records
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestFailureEvent
        include ::Thrift::Struct, ::Thrift::Struct_Union
        UTC_TIME_OF_LAST_FAILURE = 1
        DESCRIPTION = 2

        FIELDS = {
          UTC_TIME_OF_LAST_FAILURE => {:type => ::Thrift::Types::I64, :name => 'utc_time_of_last_failure'},
          DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field utc_time_of_last_failure is unset!') unless @utc_time_of_last_failure
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field description is unset!') unless @description
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestProcessing
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IDENTIFIER_ONLY_IMPORT_REQUEST_ID = 1
        MOST_RECENT_PROCESSING_FAILURE = 2

        FIELDS = {
          IDENTIFIER_ONLY_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'identifier_only_import_request_id'},
          MOST_RECENT_PROCESSING_FAILURE => {:type => ::Thrift::Types::STRUCT, :name => 'most_recent_processing_failure', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestFailureEvent, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field identifier_only_import_request_id is unset!') unless @identifier_only_import_request_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestConfigurationError
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IDENTIFIER_ONLY_IMPORT_REQUEST_ID = 1
        DESCRIPTION = 2

        FIELDS = {
          IDENTIFIER_ONLY_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'identifier_only_import_request_id'},
          DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field identifier_only_import_request_id is unset!') unless @identifier_only_import_request_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field description is unset!') unless @description
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestExpired
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestStatus < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def processing(val)
            IdentifierOnlyImportRequestStatus.new(:processing, val)
          end

          def ready(val)
            IdentifierOnlyImportRequestStatus.new(:ready, val)
          end

          def configuration_error(val)
            IdentifierOnlyImportRequestStatus.new(:configuration_error, val)
          end

          def expired(val)
            IdentifierOnlyImportRequestStatus.new(:expired, val)
          end
        end

        PROCESSING = 1
        READY = 2
        CONFIGURATION_ERROR = 3
        EXPIRED = 4

        FIELDS = {
          PROCESSING => {:type => ::Thrift::Types::STRUCT, :name => 'processing', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestProcessing, :optional => true},
          READY => {:type => ::Thrift::Types::STRUCT, :name => 'ready', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestReady, :optional => true},
          CONFIGURATION_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'configuration_error', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestConfigurationError, :optional => true},
          EXPIRED => {:type => ::Thrift::Types::STRUCT, :name => 'expired', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestExpired, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IdentifierOnlyJobletOutput
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NUM_RECORDS = 1

        FIELDS = {
          NUM_RECORDS => {:type => ::Thrift::Types::I64, :name => 'num_records'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_records is unset!') unless @num_records
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportStatusResponse
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STATUS = 1

        FIELDS = {
          STATUS => {:type => ::Thrift::Types::STRUCT, :name => 'status', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestStatus}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestAccepted
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IDENTIFIER_ONLY_IMPORT_REQUEST_ID = 1

        FIELDS = {
          IDENTIFIER_ONLY_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'identifier_only_import_request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field identifier_only_import_request_id is unset!') unless @identifier_only_import_request_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestRejected
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REASON_FOR_REJECTION = 1

        FIELDS = {
          REASON_FOR_REJECTION => {:type => ::Thrift::Types::STRING, :name => 'reason_for_rejection'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reason_for_rejection is unset!') unless @reason_for_rejection
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRequestResponse < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def accepted(val)
            IdentifierOnlyImportRequestResponse.new(:accepted, val)
          end

          def rejected(val)
            IdentifierOnlyImportRequestResponse.new(:rejected, val)
          end
        end

        ACCEPTED = 1
        REJECTED = 2

        FIELDS = {
          ACCEPTED => {:type => ::Thrift::Types::STRUCT, :name => 'accepted', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestAccepted, :optional => true},
          REJECTED => {:type => ::Thrift::Types::STRUCT, :name => 'rejected', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRequestRejected, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IdentifierOnlyImportRefreshAccepted
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRefreshRejected
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REASON_FOR_REJECTION = 1

        FIELDS = {
          REASON_FOR_REJECTION => {:type => ::Thrift::Types::STRING, :name => 'reason_for_rejection'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reason_for_rejection is unset!') unless @reason_for_rejection
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IdentifierOnlyImportRefreshResponse < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def accepted(val)
            IdentifierOnlyImportRefreshResponse.new(:accepted, val)
          end

          def rejected(val)
            IdentifierOnlyImportRefreshResponse.new(:rejected, val)
          end
        end

        ACCEPTED = 1
        REJECTED = 2

        FIELDS = {
          ACCEPTED => {:type => ::Thrift::Types::STRUCT, :name => 'accepted', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRefreshAccepted, :optional => true},
          REJECTED => {:type => ::Thrift::Types::STRUCT, :name => 'rejected', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportRefreshRejected, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IdentifierOnlyImportPreparationOptions
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EXPIRATION = 1

        FIELDS = {
          EXPIRATION => {:type => ::Thrift::Types::STRUCT, :name => 'expiration', :class => ::Liveramp::Importer::IdentifierOnly::IdentifierOnlyImportExpiration}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
