#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'ipwaterfalling_types'

module Rapleaf
  module Types
    module IpMatching
      module IpMatching
        class Client
          include ::Thrift::Client

          def get_sample_versions()
            send_get_sample_versions()
            return recv_get_sample_versions()
          end

          def send_get_sample_versions()
            send_message('get_sample_versions', Get_sample_versions_args)
          end

          def recv_get_sample_versions()
            result = receive_message(Get_sample_versions_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_sample_versions failed: unknown result')
          end

          def get_ip_addresses_in_sample(version_id)
            send_get_ip_addresses_in_sample(version_id)
            return recv_get_ip_addresses_in_sample()
          end

          def send_get_ip_addresses_in_sample(version_id)
            send_message('get_ip_addresses_in_sample', Get_ip_addresses_in_sample_args, :version_id => version_id)
          end

          def recv_get_ip_addresses_in_sample()
            result = receive_message(Get_ip_addresses_in_sample_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_ip_addresses_in_sample failed: unknown result')
          end

          def get_summary_for_ip(version_id, ip_address)
            send_get_summary_for_ip(version_id, ip_address)
            return recv_get_summary_for_ip()
          end

          def send_get_summary_for_ip(version_id, ip_address)
            send_message('get_summary_for_ip', Get_summary_for_ip_args, :version_id => version_id, :ip_address => ip_address)
          end

          def recv_get_summary_for_ip()
            result = receive_message(Get_summary_for_ip_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_summary_for_ip failed: unknown result')
          end

          def get_isps_in_sample(version_id)
            send_get_isps_in_sample(version_id)
            return recv_get_isps_in_sample()
          end

          def send_get_isps_in_sample(version_id)
            send_message('get_isps_in_sample', Get_isps_in_sample_args, :version_id => version_id)
          end

          def recv_get_isps_in_sample()
            result = receive_message(Get_isps_in_sample_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_isps_in_sample failed: unknown result')
          end

          def get_ips_with_isp(version_id, isp)
            send_get_ips_with_isp(version_id, isp)
            return recv_get_ips_with_isp()
          end

          def send_get_ips_with_isp(version_id, isp)
            send_message('get_ips_with_isp', Get_ips_with_isp_args, :version_id => version_id, :isp => isp)
          end

          def recv_get_ips_with_isp()
            result = receive_message(Get_ips_with_isp_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_ips_with_isp failed: unknown result')
          end

          def get_matching_summary_overviews(version_id)
            send_get_matching_summary_overviews(version_id)
            return recv_get_matching_summary_overviews()
          end

          def send_get_matching_summary_overviews(version_id)
            send_message('get_matching_summary_overviews', Get_matching_summary_overviews_args, :version_id => version_id)
          end

          def recv_get_matching_summary_overviews()
            result = receive_message(Get_matching_summary_overviews_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_matching_summary_overviews failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_get_sample_versions(seqid, iprot, oprot)
            args = read_args(iprot, Get_sample_versions_args)
            result = Get_sample_versions_result.new()
            result.success = @handler.get_sample_versions()
            write_result(result, oprot, 'get_sample_versions', seqid)
          end

          def process_get_ip_addresses_in_sample(seqid, iprot, oprot)
            args = read_args(iprot, Get_ip_addresses_in_sample_args)
            result = Get_ip_addresses_in_sample_result.new()
            result.success = @handler.get_ip_addresses_in_sample(args.version_id)
            write_result(result, oprot, 'get_ip_addresses_in_sample', seqid)
          end

          def process_get_summary_for_ip(seqid, iprot, oprot)
            args = read_args(iprot, Get_summary_for_ip_args)
            result = Get_summary_for_ip_result.new()
            result.success = @handler.get_summary_for_ip(args.version_id, args.ip_address)
            write_result(result, oprot, 'get_summary_for_ip', seqid)
          end

          def process_get_isps_in_sample(seqid, iprot, oprot)
            args = read_args(iprot, Get_isps_in_sample_args)
            result = Get_isps_in_sample_result.new()
            result.success = @handler.get_isps_in_sample(args.version_id)
            write_result(result, oprot, 'get_isps_in_sample', seqid)
          end

          def process_get_ips_with_isp(seqid, iprot, oprot)
            args = read_args(iprot, Get_ips_with_isp_args)
            result = Get_ips_with_isp_result.new()
            result.success = @handler.get_ips_with_isp(args.version_id, args.isp)
            write_result(result, oprot, 'get_ips_with_isp', seqid)
          end

          def process_get_matching_summary_overviews(seqid, iprot, oprot)
            args = read_args(iprot, Get_matching_summary_overviews_args)
            result = Get_matching_summary_overviews_result.new()
            result.success = @handler.get_matching_summary_overviews(args.version_id)
            write_result(result, oprot, 'get_matching_summary_overviews', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Get_sample_versions_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_sample_versions_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_ip_addresses_in_sample_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          VERSION_ID = 1

          FIELDS = {
            VERSION_ID => {:type => ::Thrift::Types::I64, :name => 'version_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_ip_addresses_in_sample_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_summary_for_ip_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          VERSION_ID = 1
          IP_ADDRESS = 2

          FIELDS = {
            VERSION_ID => {:type => ::Thrift::Types::I64, :name => 'version_id'},
            IP_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'ip_address'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_summary_for_ip_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::Types::IpMatching::IpmMatchingSummary}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_isps_in_sample_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          VERSION_ID = 1

          FIELDS = {
            VERSION_ID => {:type => ::Thrift::Types::I64, :name => 'version_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_isps_in_sample_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_ips_with_isp_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          VERSION_ID = 1
          ISP = 2

          FIELDS = {
            VERSION_ID => {:type => ::Thrift::Types::I64, :name => 'version_id'},
            ISP => {:type => ::Thrift::Types::STRING, :name => 'isp'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_ips_with_isp_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_matching_summary_overviews_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          VERSION_ID = 1

          FIELDS = {
            VERSION_ID => {:type => ::Thrift::Types::I64, :name => 'version_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_matching_summary_overviews_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::IpMatching::IpmMatchingSummaryOverview}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
