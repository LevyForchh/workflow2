#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'


module Liveramp
  module AcxiomAPI
    module QueryEndpoint
      MATCH_PEOPLE_POSTAL = 1
      MATCH_PLACES_POSTAL = 2
      MATCH_PEOPLE_CONSUMERLINK = 3
      LOOKUP_SHA1_CONSUMERLINK = 4
      LOOKUP_MD5_CONSUMERLINK = 5
      LOOKUP_SHA256_CONSUMERLINK = 6
      LOOKUP_BY_CLINK = 7
      ENTITIES_MATCH = 8
      ENTITIES_MD5 = 9
      ENTITIES_SHA1 = 10
      ENTITIES_SHA256 = 11
      PEOPLE_MATCH = 12
      PEOPLE_MD5 = 13
      PEOPLE_SHA1 = 14
      PEOPLE_SHA256 = 15
      VALUE_MAP = {1 => "MATCH_PEOPLE_POSTAL", 2 => "MATCH_PLACES_POSTAL", 3 => "MATCH_PEOPLE_CONSUMERLINK", 4 => "LOOKUP_SHA1_CONSUMERLINK", 5 => "LOOKUP_MD5_CONSUMERLINK", 6 => "LOOKUP_SHA256_CONSUMERLINK", 7 => "LOOKUP_BY_CLINK", 8 => "ENTITIES_MATCH", 9 => "ENTITIES_MD5", 10 => "ENTITIES_SHA1", 11 => "ENTITIES_SHA256", 12 => "PEOPLE_MATCH", 13 => "PEOPLE_MD5", 14 => "PEOPLE_SHA1", 15 => "PEOPLE_SHA256"}
      VALID_VALUES = Set.new([MATCH_PEOPLE_POSTAL, MATCH_PLACES_POSTAL, MATCH_PEOPLE_CONSUMERLINK, LOOKUP_SHA1_CONSUMERLINK, LOOKUP_MD5_CONSUMERLINK, LOOKUP_SHA256_CONSUMERLINK, LOOKUP_BY_CLINK, ENTITIES_MATCH, ENTITIES_MD5, ENTITIES_SHA1, ENTITIES_SHA256, PEOPLE_MATCH, PEOPLE_MD5, PEOPLE_SHA1, PEOPLE_SHA256]).freeze
    end

    module DataBundle
      POSTAL_CONTACT = 1
      EMAIL_CONTACT = 2
      PHONE_CONTACT = 3
      BASIC_DEMOGRAPHICS = 4
      DOB = 5
      ABILITEC = 6
      HOUSEHOLD_ID = 7
      ID = 8
      PERSON_IDS = 9
      PLACE_ID = 10
      GEO_CODES = 11
      EMAIL_ADDRESS = 12
      PHONE_NUMBER = 13
      POSTAL_ADDRESS = 14
      POSTAL_DELIVERABILITY = 15
      INPUT_METADATA = 16
      MATCH_METADATA = 17
      NODE_ATTRIBUTES = 18
      ALTERNATE_GRAPH_PERSON_IDS = 19
      VALUE_MAP = {1 => "POSTAL_CONTACT", 2 => "EMAIL_CONTACT", 3 => "PHONE_CONTACT", 4 => "BASIC_DEMOGRAPHICS", 5 => "DOB", 6 => "ABILITEC", 7 => "HOUSEHOLD_ID", 8 => "ID", 9 => "PERSON_IDS", 10 => "PLACE_ID", 11 => "GEO_CODES", 12 => "EMAIL_ADDRESS", 13 => "PHONE_NUMBER", 14 => "POSTAL_ADDRESS", 15 => "POSTAL_DELIVERABILITY", 16 => "INPUT_METADATA", 17 => "MATCH_METADATA", 18 => "NODE_ATTRIBUTES", 19 => "ALTERNATE_GRAPH_PERSON_IDS"}
      VALID_VALUES = Set.new([POSTAL_CONTACT, EMAIL_CONTACT, PHONE_CONTACT, BASIC_DEMOGRAPHICS, DOB, ABILITEC, HOUSEHOLD_ID, ID, PERSON_IDS, PLACE_ID, GEO_CODES, EMAIL_ADDRESS, PHONE_NUMBER, POSTAL_ADDRESS, POSTAL_DELIVERABILITY, INPUT_METADATA, MATCH_METADATA, NODE_ATTRIBUTES, ALTERNATE_GRAPH_PERSON_IDS]).freeze
    end

    module DataServicesQueryPriority
      HIGH = 1
      MEDIUM = 2
      LOW = 3
      VALUE_MAP = {1 => "HIGH", 2 => "MEDIUM", 3 => "LOW"}
      VALID_VALUES = Set.new([HIGH, MEDIUM, LOW]).freeze
    end

    module DataServicesQueryMatchLevel
      DEFAULT = 0
      STRICT = 1
      VALUE_MAP = {0 => "DEFAULT", 1 => "STRICT"}
      VALID_VALUES = Set.new([DEFAULT, STRICT]).freeze
    end

    module ResponseStatus
      FOUND = 0
      UNMATCHED = 1
      BAD_REQUEST = 2
      FAILED_TO_RESPOND = 3
      VALUE_MAP = {0 => "FOUND", 1 => "UNMATCHED", 2 => "BAD_REQUEST", 3 => "FAILED_TO_RESPOND"}
      VALID_VALUES = Set.new([FOUND, UNMATCHED, BAD_REQUEST, FAILED_TO_RESPOND]).freeze
    end

    class DataServicesQuery; end

    class DataServicesResponse; end

    class PinWithStatus; end

    class NapWithStatus; end

    class DataServicesQuery
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIRST_NAME = 1
      LAST_NAME = 2
      MIDDLE_NAME = 3
      FULL_NAME = 4
      GENERATION_SUFFIX = 5
      STREET_NUMBER = 6
      PRE_DIRECTIONAL = 7
      STREET_NAME = 8
      STREET_SUFFIX = 9
      POST_DIRECTIONAL = 10
      UNIT_DESIGNATOR = 11
      APARTMENT_NUMBER = 12
      FULL_STREET_ADDRESS = 13
      CITY = 14
      STATE = 15
      ZIP_CODE = 16
      EMAIL = 17
      IP_ADDRESS = 18
      DOMAIN_NAME = 19
      PHONE_NUMBER_AREA_CODE = 20
      PHONE_NUMBER_EXCHANGE_CODE = 21
      PHONE_NUMBER_SUBSCRIBER_NUMBER = 22
      PHONE_NUMBER = 23
      LATITUDE = 24
      LONGITUDE = 25
      SHA1 = 26
      MD5 = 27
      BUNDLES = 28
      SHA256 = 29
      CLINK = 30
      PRIORITY = 31
      EMAIL_MD5 = 32
      MATCH_LEVEL = 33
      LIMIT = 34

      FIELDS = {
        FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name', :optional => true},
        LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name', :optional => true},
        MIDDLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'middle_name', :optional => true},
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name', :optional => true},
        GENERATION_SUFFIX => {:type => ::Thrift::Types::STRING, :name => 'generation_suffix', :optional => true},
        STREET_NUMBER => {:type => ::Thrift::Types::STRING, :name => 'street_number', :optional => true},
        PRE_DIRECTIONAL => {:type => ::Thrift::Types::STRING, :name => 'pre_directional', :optional => true},
        STREET_NAME => {:type => ::Thrift::Types::STRING, :name => 'street_name', :optional => true},
        STREET_SUFFIX => {:type => ::Thrift::Types::STRING, :name => 'street_suffix', :optional => true},
        POST_DIRECTIONAL => {:type => ::Thrift::Types::STRING, :name => 'post_directional', :optional => true},
        UNIT_DESIGNATOR => {:type => ::Thrift::Types::STRING, :name => 'unit_designator', :optional => true},
        APARTMENT_NUMBER => {:type => ::Thrift::Types::STRING, :name => 'apartment_number', :optional => true},
        FULL_STREET_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'full_street_address', :optional => true},
        CITY => {:type => ::Thrift::Types::STRING, :name => 'city', :optional => true},
        STATE => {:type => ::Thrift::Types::STRING, :name => 'state', :optional => true},
        ZIP_CODE => {:type => ::Thrift::Types::STRING, :name => 'zip_code', :optional => true},
        EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email', :optional => true},
        IP_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'ip_address', :optional => true},
        DOMAIN_NAME => {:type => ::Thrift::Types::STRING, :name => 'domain_name', :optional => true},
        PHONE_NUMBER_AREA_CODE => {:type => ::Thrift::Types::STRING, :name => 'phone_number_area_code', :optional => true},
        PHONE_NUMBER_EXCHANGE_CODE => {:type => ::Thrift::Types::STRING, :name => 'phone_number_exchange_code', :optional => true},
        PHONE_NUMBER_SUBSCRIBER_NUMBER => {:type => ::Thrift::Types::STRING, :name => 'phone_number_subscriber_number', :optional => true},
        PHONE_NUMBER => {:type => ::Thrift::Types::STRING, :name => 'phone_number', :optional => true},
        LATITUDE => {:type => ::Thrift::Types::STRING, :name => 'latitude', :optional => true},
        LONGITUDE => {:type => ::Thrift::Types::STRING, :name => 'longitude', :optional => true},
        SHA1 => {:type => ::Thrift::Types::STRING, :name => 'sha1', :optional => true},
        MD5 => {:type => ::Thrift::Types::STRING, :name => 'md5', :optional => true},
        BUNDLES => {:type => ::Thrift::Types::LIST, :name => 'bundles', :element => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::AcxiomAPI::DataBundle}, :optional => true},
        SHA256 => {:type => ::Thrift::Types::STRING, :name => 'sha256', :optional => true},
        CLINK => {:type => ::Thrift::Types::STRING, :name => 'clink', :optional => true},
        # Null is interpreted as LOW priority.
# 
        PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :optional => true, :enum_class => ::Liveramp::AcxiomAPI::DataServicesQueryPriority},
        EMAIL_MD5 => {:type => ::Thrift::Types::STRING, :name => 'email_md5', :optional => true},
        MATCH_LEVEL => {:type => ::Thrift::Types::I32, :name => 'match_level', :optional => true, :enum_class => ::Liveramp::AcxiomAPI::DataServicesQueryMatchLevel},
        LIMIT => {:type => ::Thrift::Types::STRING, :name => 'limit', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @priority.nil? || ::Liveramp::AcxiomAPI::DataServicesQueryPriority::VALID_VALUES.include?(@priority)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
        end
        unless @match_level.nil? || ::Liveramp::AcxiomAPI::DataServicesQueryMatchLevel::VALID_VALUES.include?(@match_level)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field match_level!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DataServicesResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RAW_JSON = 1

      FIELDS = {
        RAW_JSON => {:type => ::Thrift::Types::STRING, :name => 'raw_json'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field raw_json is unset!') unless @raw_json
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PinWithStatus
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NORMALIZED_PIN = 1
      STATUS = 2

      FIELDS = {
        NORMALIZED_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'normalized_pin', :class => ::Rapleaf::Types::NewPersonData::PIN},
        STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::AcxiomAPI::ResponseStatus}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @status.nil? || ::Liveramp::AcxiomAPI::ResponseStatus::VALID_VALUES.include?(@status)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NapWithStatus
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NORMALIZED_NAP = 1
      STATUS = 2

      FIELDS = {
        NORMALIZED_NAP => {:type => ::Thrift::Types::STRUCT, :name => 'normalized_nap', :class => ::Rapleaf::Types::NewPersonData::NAPkin},
        STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::AcxiomAPI::ResponseStatus}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @status.nil? || ::Liveramp::AcxiomAPI::ResponseStatus::VALID_VALUES.include?(@status)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
