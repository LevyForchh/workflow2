#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'


module Liveramp
  module Types
    module CustomId
      class CustomId; end

      class CustomIdMapping; end

      class TmpCustomIdPinMapping; end

      class OptOutCustomId; end

      # An online identifier provided by one of our custom id partners. The ana_id identifies the
# partner and the partner_id string is provided by them. This identifying string corresponds
# to a user within their system and we use it in delivering data for this person to the custom id
# partner.
      class CustomId
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ANA_ID = 1
        PARTNER_ID = 2

        FIELDS = {
          ANA_ID => {:type => ::Thrift::Types::I32, :name => 'ana_id'},
          PARTNER_ID => {:type => ::Thrift::Types::STRING, :name => 'partner_id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ana_id is unset!') unless @ana_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field partner_id is unset!') unless @partner_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      # The mapping between an online identifier that a custom id partner uses to refer to a person
# and the online identifier that LiveRamp uses for that same person.
      class CustomIdMapping
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CUSTOM_ID = 1
        HEID = 2

        FIELDS = {
          CUSTOM_ID => {:type => ::Thrift::Types::STRUCT, :name => 'custom_id', :class => ::Liveramp::Types::CustomId::CustomId},
          HEID => {:type => ::Thrift::Types::STRING, :name => 'heid', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field custom_id is unset!') unless @custom_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heid is unset!') unless @heid
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Temporary store used in joining PIN/customid with PE map
      class TmpCustomIdPinMapping
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CUSTOM_ID = 1
        PIN = 2

        FIELDS = {
          CUSTOM_ID => {:type => ::Thrift::Types::STRUCT, :name => 'custom_id', :class => ::Liveramp::Types::CustomId::CustomId},
          PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field custom_id is unset!') unless @custom_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin is unset!') unless @pin
        end

        ::Thrift::Struct.generate_accessors self
      end

      class OptOutCustomId
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CUSTOM_ID = 1

        FIELDS = {
          CUSTOM_ID => {:type => ::Thrift::Types::STRUCT, :name => 'custom_id', :class => ::Liveramp::Types::CustomId::CustomId}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field custom_id is unset!') unless @custom_id
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
