#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'field_creation_service_types'

module Liveramp
  module Types
    module FieldCreationService
      module ParcToArcConversionService
        class Client
          include ::Thrift::Client

          def convert_parc_with_field_whitelist(audienceId, sourceId, parcIds, onboarding_request_id, output_type, whitelisted_lrc_field_ids)
            send_convert_parc_with_field_whitelist(audienceId, sourceId, parcIds, onboarding_request_id, output_type, whitelisted_lrc_field_ids)
            return recv_convert_parc_with_field_whitelist()
          end

          def send_convert_parc_with_field_whitelist(audienceId, sourceId, parcIds, onboarding_request_id, output_type, whitelisted_lrc_field_ids)
            send_message('convert_parc_with_field_whitelist', Convert_parc_with_field_whitelist_args, :audienceId => audienceId, :sourceId => sourceId, :parcIds => parcIds, :onboarding_request_id => onboarding_request_id, :output_type => output_type, :whitelisted_lrc_field_ids => whitelisted_lrc_field_ids)
          end

          def recv_convert_parc_with_field_whitelist()
            result = receive_message(Convert_parc_with_field_whitelist_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'convert_parc_with_field_whitelist failed: unknown result')
          end

          def convert_parc_to_arc(audienceId, sourceId, parcIds, onboarding_request_id)
            send_convert_parc_to_arc(audienceId, sourceId, parcIds, onboarding_request_id)
            return recv_convert_parc_to_arc()
          end

          def send_convert_parc_to_arc(audienceId, sourceId, parcIds, onboarding_request_id)
            send_message('convert_parc_to_arc', Convert_parc_to_arc_args, :audienceId => audienceId, :sourceId => sourceId, :parcIds => parcIds, :onboarding_request_id => onboarding_request_id)
          end

          def recv_convert_parc_to_arc()
            result = receive_message(Convert_parc_to_arc_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'convert_parc_to_arc failed: unknown result')
          end

          def convert_parc_to_arc_v2(onboardingConfig)
            send_convert_parc_to_arc_v2(onboardingConfig)
            return recv_convert_parc_to_arc_v2()
          end

          def send_convert_parc_to_arc_v2(onboardingConfig)
            send_message('convert_parc_to_arc_v2', Convert_parc_to_arc_v2_args, :onboardingConfig => onboardingConfig)
          end

          def recv_convert_parc_to_arc_v2()
            result = receive_message(Convert_parc_to_arc_v2_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'convert_parc_to_arc_v2 failed: unknown result')
          end

          def convert_parc(audienceId, sourceId, parcIds, onboarding_request_id, output_type)
            send_convert_parc(audienceId, sourceId, parcIds, onboarding_request_id, output_type)
            return recv_convert_parc()
          end

          def send_convert_parc(audienceId, sourceId, parcIds, onboarding_request_id, output_type)
            send_message('convert_parc', Convert_parc_args, :audienceId => audienceId, :sourceId => sourceId, :parcIds => parcIds, :onboarding_request_id => onboarding_request_id, :output_type => output_type)
          end

          def recv_convert_parc()
            result = receive_message(Convert_parc_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'convert_parc failed: unknown result')
          end

          def get_status(request_id)
            send_get_status(request_id)
            return recv_get_status()
          end

          def send_get_status(request_id)
            send_message('get_status', Get_status_args, :request_id => request_id)
          end

          def recv_get_status()
            result = receive_message(Get_status_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_status failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_convert_parc_with_field_whitelist(seqid, iprot, oprot)
            args = read_args(iprot, Convert_parc_with_field_whitelist_args)
            result = Convert_parc_with_field_whitelist_result.new()
            result.success = @handler.convert_parc_with_field_whitelist(args.audienceId, args.sourceId, args.parcIds, args.onboarding_request_id, args.output_type, args.whitelisted_lrc_field_ids)
            write_result(result, oprot, 'convert_parc_with_field_whitelist', seqid)
          end

          def process_convert_parc_to_arc(seqid, iprot, oprot)
            args = read_args(iprot, Convert_parc_to_arc_args)
            result = Convert_parc_to_arc_result.new()
            result.success = @handler.convert_parc_to_arc(args.audienceId, args.sourceId, args.parcIds, args.onboarding_request_id)
            write_result(result, oprot, 'convert_parc_to_arc', seqid)
          end

          def process_convert_parc_to_arc_v2(seqid, iprot, oprot)
            args = read_args(iprot, Convert_parc_to_arc_v2_args)
            result = Convert_parc_to_arc_v2_result.new()
            result.success = @handler.convert_parc_to_arc_v2(args.onboardingConfig)
            write_result(result, oprot, 'convert_parc_to_arc_v2', seqid)
          end

          def process_convert_parc(seqid, iprot, oprot)
            args = read_args(iprot, Convert_parc_args)
            result = Convert_parc_result.new()
            result.success = @handler.convert_parc(args.audienceId, args.sourceId, args.parcIds, args.onboarding_request_id, args.output_type)
            write_result(result, oprot, 'convert_parc', seqid)
          end

          def process_get_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_status_args)
            result = Get_status_result.new()
            result.success = @handler.get_status(args.request_id)
            write_result(result, oprot, 'get_status', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Convert_parc_with_field_whitelist_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUDIENCEID = 1
          SOURCEID = 2
          PARCIDS = 3
          ONBOARDING_REQUEST_ID = 4
          OUTPUT_TYPE = 5
          WHITELISTED_LRC_FIELD_IDS = 6

          FIELDS = {
            AUDIENCEID => {:type => ::Thrift::Types::I64, :name => 'audienceId'},
            SOURCEID => {:type => ::Thrift::Types::I64, :name => 'sourceId'},
            PARCIDS => {:type => ::Thrift::Types::SET, :name => 'parcIds', :element => {:type => ::Thrift::Types::I64}},
            ONBOARDING_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'onboarding_request_id'},
            OUTPUT_TYPE => {:type => ::Thrift::Types::I32, :name => 'output_type', :enum_class => ::Liveramp::Types::OnboardingService::OnboardingDataType},
            WHITELISTED_LRC_FIELD_IDS => {:type => ::Thrift::Types::SET, :name => 'whitelisted_lrc_field_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @output_type.nil? || ::Liveramp::Types::OnboardingService::OnboardingDataType::VALID_VALUES.include?(@output_type)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field output_type!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_with_field_whitelist_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_to_arc_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUDIENCEID = 1
          SOURCEID = 2
          PARCIDS = 3
          ONBOARDING_REQUEST_ID = 4

          FIELDS = {
            AUDIENCEID => {:type => ::Thrift::Types::I64, :name => 'audienceId'},
            SOURCEID => {:type => ::Thrift::Types::I64, :name => 'sourceId'},
            PARCIDS => {:type => ::Thrift::Types::SET, :name => 'parcIds', :element => {:type => ::Thrift::Types::I64}},
            ONBOARDING_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'onboarding_request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_to_arc_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_to_arc_v2_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ONBOARDINGCONFIG = 1

          FIELDS = {
            ONBOARDINGCONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'onboardingConfig', :class => ::Liveramp::Types::OnboardingService::OnboardingConfig}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_to_arc_v2_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUDIENCEID = 1
          SOURCEID = 2
          PARCIDS = 3
          ONBOARDING_REQUEST_ID = 4
          OUTPUT_TYPE = 5

          FIELDS = {
            AUDIENCEID => {:type => ::Thrift::Types::I64, :name => 'audienceId'},
            SOURCEID => {:type => ::Thrift::Types::I64, :name => 'sourceId'},
            PARCIDS => {:type => ::Thrift::Types::SET, :name => 'parcIds', :element => {:type => ::Thrift::Types::I64}},
            ONBOARDING_REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'onboarding_request_id'},
            OUTPUT_TYPE => {:type => ::Thrift::Types::I32, :name => 'output_type', :enum_class => ::Liveramp::Types::OnboardingService::OnboardingDataType}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @output_type.nil? || ::Liveramp::Types::OnboardingService::OnboardingDataType::VALID_VALUES.include?(@output_type)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field output_type!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Convert_parc_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::FieldCreationService::ParcToArcConversionStatusResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
