#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'online_data_types'
require File.join File.dirname(__FILE__), 'bang_types'
require File.join File.dirname(__FILE__), 'custom_id_types'


module Liveramp
  module Types
    module Ingestion
      module LogStat
        UNSERVED_UNIQUES_MISSING = 10
        UNSERVED_INSTANCES_MISSING = 20
        SERVED_UNIQUES_MISSING = 30
        SERVED_INSTANCES_MISSING = 40
        UNSERVED_INSTANCES_MATCHED = 50
        SERVED_INSTANCES_MATCHED = 60
        UNSERVED_UNIQUES_MATCHED = 70
        SERVED_UNIQUES_MATCHED = 80
        VALUE_MAP = {10 => "UNSERVED_UNIQUES_MISSING", 20 => "UNSERVED_INSTANCES_MISSING", 30 => "SERVED_UNIQUES_MISSING", 40 => "SERVED_INSTANCES_MISSING", 50 => "UNSERVED_INSTANCES_MATCHED", 60 => "SERVED_INSTANCES_MATCHED", 70 => "UNSERVED_UNIQUES_MATCHED", 80 => "SERVED_UNIQUES_MATCHED"}
        VALID_VALUES = Set.new([UNSERVED_UNIQUES_MISSING, UNSERVED_INSTANCES_MISSING, SERVED_UNIQUES_MISSING, SERVED_INSTANCES_MISSING, UNSERVED_INSTANCES_MATCHED, SERVED_INSTANCES_MATCHED, UNSERVED_UNIQUES_MATCHED, SERVED_UNIQUES_MATCHED]).freeze
      end

      class DoubleHashedPinToAnonId; end

      class AnonLogMapping; end

      class LogMapping; end

      class PinToClink; end

      class DoubleHashedPinToAnonId
        include ::Thrift::Struct, ::Thrift::Struct_Union
        DOUBLE_HASHED_PIN = 1
        ANON_ID = 2

        FIELDS = {
          DOUBLE_HASHED_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'double_hashed_pin', :class => ::Liveramp::OnlineData::DoubleHashedPin},
          ANON_ID => {:type => ::Thrift::Types::STRUCT, :name => 'anon_id', :class => ::Liveramp::Types::Bang::AnonymousIdentifier}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field double_hashed_pin is unset!') unless @double_hashed_pin
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field anon_id is unset!') unless @anon_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonLogMapping
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PUBLISHER_ID = 1
        ASH_ID = 2
        COOKIE_ID = 3
        TIMESTAMP = 4
        CUSTOM_ID = 5

        FIELDS = {
          PUBLISHER_ID => {:type => ::Thrift::Types::I64, :name => 'publisher_id'},
          ASH_ID => {:type => ::Thrift::Types::STRING, :name => 'ash_id', :binary => true, :optional => true},
          COOKIE_ID => {:type => ::Thrift::Types::STRING, :name => 'cookie_id', :binary => true},
          TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
          CUSTOM_ID => {:type => ::Thrift::Types::STRUCT, :name => 'custom_id', :class => ::Liveramp::Types::CustomId::CustomId, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field publisher_id is unset!') unless @publisher_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cookie_id is unset!') unless @cookie_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field timestamp is unset!') unless @timestamp
        end

        ::Thrift::Struct.generate_accessors self
      end

      class LogMapping
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PUBLISHER_ID = 1
        DOUBLE_HASHED_PIN = 2
        COOKIE_ID = 3
        TIMESTAMP = 4
        SERVED_DATA = 5

        FIELDS = {
          PUBLISHER_ID => {:type => ::Thrift::Types::I64, :name => 'publisher_id'},
          DOUBLE_HASHED_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'double_hashed_pin', :class => ::Liveramp::OnlineData::DoubleHashedPin},
          COOKIE_ID => {:type => ::Thrift::Types::STRING, :name => 'cookie_id', :binary => true},
          TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
          SERVED_DATA => {:type => ::Thrift::Types::BOOL, :name => 'served_data'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field publisher_id is unset!') unless @publisher_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field double_hashed_pin is unset!') unless @double_hashed_pin
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cookie_id is unset!') unless @cookie_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field timestamp is unset!') unless @timestamp
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field served_data is unset!') if @served_data.nil?
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PinToClink
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PIN = 1
        CLINK = 2

        FIELDS = {
          PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN},
          CLINK => {:type => ::Thrift::Types::STRUCT, :name => 'clink', :class => ::Rapleaf::Types::NewPersonData::AbiliTecId}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin is unset!') unless @pin
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field clink is unset!') unless @clink
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
