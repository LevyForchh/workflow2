#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Liveramp
  module Types
    module PiiIntegration
      module HashingAlgorithm
        SHA256 = 1
        VALUE_MAP = {1 => "SHA256"}
        VALID_VALUES = Set.new([SHA256]).freeze
      end

      class EncryptedHashedEmail; end

      class EncryptedHashedNap; end

      class EncryptedHashedPhone; end

      class EncryptedHash < ::Thrift::Union; end

      class EncryptedHashedPii; end

      class SHA256Nap; end

      class EncSHA256Nap; end

      class HPii < ::Thrift::Union; end

      class EHPii; end

      class EncryptedHashedEmail
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EMAIL = 1

        FIELDS = {
          EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field email is unset!') unless @email
        end

        ::Thrift::Struct.generate_accessors self
      end

      class EncryptedHashedNap
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST = 1
        LAST = 2
        CITY = 3
        STATE = 4
        ZIP5 = 5
        UNHASHED_ENCRYPTED_ZIP = 6

        FIELDS = {
          FIRST => {:type => ::Thrift::Types::STRING, :name => 'first', :binary => true, :optional => true},
          LAST => {:type => ::Thrift::Types::STRING, :name => 'last', :binary => true, :optional => true},
          CITY => {:type => ::Thrift::Types::STRING, :name => 'city', :binary => true, :optional => true},
          STATE => {:type => ::Thrift::Types::STRING, :name => 'state', :binary => true, :optional => true},
          ZIP5 => {:type => ::Thrift::Types::STRING, :name => 'zip5', :binary => true, :optional => true},
          UNHASHED_ENCRYPTED_ZIP => {:type => ::Thrift::Types::STRING, :name => 'unhashed_encrypted_zip', :binary => true, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class EncryptedHashedPhone
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PHONE = 1

        FIELDS = {
          PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field phone is unset!') unless @phone
        end

        ::Thrift::Struct.generate_accessors self
      end

      class EncryptedHash < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def email(val)
            EncryptedHash.new(:email, val)
          end

          def nap(val)
            EncryptedHash.new(:nap, val)
          end

          def phone(val)
            EncryptedHash.new(:phone, val)
          end
        end

        EMAIL = 1
        NAP = 2
        PHONE = 3

        FIELDS = {
          EMAIL => {:type => ::Thrift::Types::STRUCT, :name => 'email', :class => ::Liveramp::Types::PiiIntegration::EncryptedHashedEmail, :optional => true},
          NAP => {:type => ::Thrift::Types::STRUCT, :name => 'nap', :class => ::Liveramp::Types::PiiIntegration::EncryptedHashedNap, :optional => true},
          PHONE => {:type => ::Thrift::Types::STRUCT, :name => 'phone', :class => ::Liveramp::Types::PiiIntegration::EncryptedHashedPhone, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class EncryptedHashedPii
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HASHING_ALGORITHM = 1
        ENCRYPTED_HASH = 2

        FIELDS = {
          HASHING_ALGORITHM => {:type => ::Thrift::Types::I32, :name => 'hashing_algorithm', :enum_class => ::Liveramp::Types::PiiIntegration::HashingAlgorithm},
          ENCRYPTED_HASH => {:type => ::Thrift::Types::STRUCT, :name => 'encrypted_hash', :class => ::Liveramp::Types::PiiIntegration::EncryptedHash}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @hashing_algorithm.nil? || ::Liveramp::Types::PiiIntegration::HashingAlgorithm::VALID_VALUES.include?(@hashing_algorithm)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field hashing_algorithm!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Unencrypted SHA256-hashed name and postal
      class SHA256Nap
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME = 1
        LAST_NAME = 2
        STATE = 3
        ZIP5 = 4

        FIELDS = {
          FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name', :binary => true, :optional => true},
          LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name', :binary => true, :optional => true},
          STATE => {:type => ::Thrift::Types::STRING, :name => 'state', :binary => true, :optional => true},
          ZIP5 => {:type => ::Thrift::Types::STRING, :name => 'zip5', :binary => true, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Deprecated
# Encrypted SHA256-hashed name and postal
      class EncSHA256Nap
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME = 1
        LAST_NAME = 2
        STATE = 3
        ZIP5 = 4
        CITY = 5
        PHONE_NUMBER = 6
        MOBILE_ID = 7

        FIELDS = {
          FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name', :binary => true, :optional => true},
          LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name', :binary => true, :optional => true},
          STATE => {:type => ::Thrift::Types::STRING, :name => 'state', :binary => true, :optional => true},
          ZIP5 => {:type => ::Thrift::Types::STRING, :name => 'zip5', :binary => true, :optional => true},
          CITY => {:type => ::Thrift::Types::STRING, :name => 'city', :binary => true, :optional => true},
          PHONE_NUMBER => {:type => ::Thrift::Types::STRING, :name => 'phone_number', :binary => true, :optional => true},
          MOBILE_ID => {:type => ::Thrift::Types::STRING, :name => 'mobile_id', :binary => true, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Unencrypted SHA256-hashed PII
      class HPii < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def sha256_email(val)
            HPii.new(:sha256_email, val)
          end

          def sha256_nap(val)
            HPii.new(:sha256_nap, val)
          end
        end

        SHA256_EMAIL = 1
        SHA256_NAP = 2

        FIELDS = {
          SHA256_EMAIL => {:type => ::Thrift::Types::STRING, :name => 'sha256_email', :binary => true, :optional => true},
          SHA256_NAP => {:type => ::Thrift::Types::STRUCT, :name => 'sha256_nap', :class => ::Liveramp::Types::PiiIntegration::SHA256Nap, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      # Deprecated
# Encrypted SHA256-hashed PII
# It's a struct instead of a union, because currently DIST can't aggregate on data and combine different PINs into one line
# Hopefully we work out something long-term
      class EHPii
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ENC_SHA256_EMAIL = 1
        ENC_SHA256_NAP = 2

        FIELDS = {
          ENC_SHA256_EMAIL => {:type => ::Thrift::Types::STRING, :name => 'enc_sha256_email', :binary => true, :optional => true},
          ENC_SHA256_NAP => {:type => ::Thrift::Types::STRUCT, :name => 'enc_sha256_nap', :class => ::Liveramp::Types::PiiIntegration::EncSHA256Nap, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
