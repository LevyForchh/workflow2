#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Liveramp
  module Types
    module CidKeyService
      module CidSecretType
        AES_KEY = 1
        HASH_SALT = 2
        VALUE_MAP = {1 => "AES_KEY", 2 => "HASH_SALT"}
        VALID_VALUES = Set.new([AES_KEY, HASH_SALT]).freeze
      end

      module AuthErrorCode
        USER_DOES_NOT_EXST = 1
        NOT_AUTHORIZED_FOR_CID_KEYS = 2
        VALUE_MAP = {1 => "USER_DOES_NOT_EXST", 2 => "NOT_AUTHORIZED_FOR_CID_KEYS"}
        VALID_VALUES = Set.new([USER_DOES_NOT_EXST, NOT_AUTHORIZED_FOR_CID_KEYS]).freeze
      end

      class NoSuchSecretException < ::Thrift::Exception; end

      class CksInternalError < ::Thrift::Exception; end

      class AuthException < ::Thrift::Exception; end

      class SecretCreationResult; end

      class SecretIdOptional; end

      class NoSuchSecretException < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CksInternalError < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union
        def initialize(message=nil)
          super()
          self.message = message
        end

        MESSAGE = 1

        FIELDS = {
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AuthException < ::Thrift::Exception
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ERROR_CODE = 1
        MESSAGE = 2

        FIELDS = {
          ERROR_CODE => {:type => ::Thrift::Types::I32, :name => 'error_code', :enum_class => ::Liveramp::Types::CidKeyService::AuthErrorCode},
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_code is unset!') unless @error_code
          unless @error_code.nil? || ::Liveramp::Types::CidKeyService::AuthErrorCode::VALID_VALUES.include?(@error_code)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field error_code!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SecretCreationResult
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ALREADY_EXISTED = 1
        SECRET_ID = 2

        FIELDS = {
          ALREADY_EXISTED => {:type => ::Thrift::Types::BOOL, :name => 'already_existed'},
          SECRET_ID => {:type => ::Thrift::Types::I32, :name => 'secret_id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field already_existed is unset!') if @already_existed.nil?
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secret_id is unset!') unless @secret_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class SecretIdOptional
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SECRET_ID = 1

        FIELDS = {
          SECRET_ID => {:type => ::Thrift::Types::I32, :name => 'secret_id', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
