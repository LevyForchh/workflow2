#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'bang_types'
require File.join File.dirname(__FILE__), 'ipwaterfalling_types'


module Liveramp
  module Types
    module IdentityScience
      module IsOlEdgeType
        COOKIE_SYNCING = 1
        COOKIE_IDENTIFICATION = 2
        MOBILE_IDENTIFICATION = 3
        COOKIE_OBSERVATION = 4
        MOBILE_OBSERVATION = 5
        EMAIL_PEL_MERGING = 6
        HOUSEHOLD = 7
        ZIP4 = 8
        OFFLINE_SR = 9
        THIRD_PARTY_GRAPH = 10
        CID_IDENTIFICATION = 11
        VALUE_MAP = {1 => "COOKIE_SYNCING", 2 => "COOKIE_IDENTIFICATION", 3 => "MOBILE_IDENTIFICATION", 4 => "COOKIE_OBSERVATION", 5 => "MOBILE_OBSERVATION", 6 => "EMAIL_PEL_MERGING", 7 => "HOUSEHOLD", 8 => "ZIP4", 9 => "OFFLINE_SR", 10 => "THIRD_PARTY_GRAPH", 11 => "CID_IDENTIFICATION"}
        VALID_VALUES = Set.new([COOKIE_SYNCING, COOKIE_IDENTIFICATION, MOBILE_IDENTIFICATION, COOKIE_OBSERVATION, MOBILE_OBSERVATION, EMAIL_PEL_MERGING, HOUSEHOLD, ZIP4, OFFLINE_SR, THIRD_PARTY_GRAPH, CID_IDENTIFICATION]).freeze
      end

      module IsGsEdgeType
        DS_API = 1
        PII_AK = 2
        DEVICE_IDENTIFICATION = 3
        EMAIL_EQUIV = 4
        VALUE_MAP = {1 => "DS_API", 2 => "PII_AK", 3 => "DEVICE_IDENTIFICATION", 4 => "EMAIL_EQUIV"}
        VALID_VALUES = Set.new([DS_API, PII_AK, DEVICE_IDENTIFICATION, EMAIL_EQUIV]).freeze
      end

      class PiiGraphEdge; end

      class PiiGraphPath; end

      class IsOlNode < ::Thrift::Union; end

      class IsOlEdge; end

      class IsOlPath; end

      class IsGGEdge; end

      class IsGGPath; end

      class IsGGComponent; end

      class IsGsAudienceKey; end

      class IsGsHashedCid; end

      class IsGsNode < ::Thrift::Union; end

      class IsGsEdge; end

      class IsGsSegmentData; end

      class IsGsNodeMetadata < ::Thrift::Union; end

      class IsGsNodeAndMetadata; end

      class AudienceKeysMap; end

      class PINAndAudienceKeys; end

      class AnonymizedHashedEmail; end

      class AnonymziedName; end

      class AnonymizedNap; end

      class AnonymizedNameAndEmail; end

      class AnonymizedNameAndHashedEmail; end

      class AnonymizedNameAndPhone; end

      class FirstLastNameHashes; end

      class ArlWithAnonymizedName; end

      class AnonymizedPIN < ::Thrift::Union; end

      class AnonymizedPINHaksAndPels; end

      class PelIndexAnonymizedPINAndHAKs; end

      class PelIndexAnonymizedPINAndHAKsList; end

      class PelPelEdgeWithAnonymizedPins; end

      class LabeledPelEntry; end

      class LabeledPelEdge; end

      class ExpandedLabeledPelEntry; end

      class IxGraphAdjacency; end

      class IxGraphAdjacencyList; end

      class IxGraphEdge; end

      class IxGraphPath; end

      class IxGraphComponent; end

      class IxGraphPathAndTerminal; end

      class IxGraphSrcAggregation < ::Thrift::Union; end

      class IxGraphNode; end

      class PiiGraphEdge
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SOURCE = 1
        TARGET = 2
        OWNERS = 3

        FIELDS = {
          SOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'source', :class => ::Rapleaf::Types::NewPersonData::PIN},
          TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'target', :class => ::Rapleaf::Types::NewPersonData::PIN},
          OWNERS => {:type => ::Thrift::Types::SET, :name => 'owners', :element => {:type => ::Thrift::Types::I64}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PiiGraphPath
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EDGES = 1
        LABEL = 2

        FIELDS = {
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::PiiGraphEdge}},
          LABEL => {:type => ::Thrift::Types::STRING, :name => 'label', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsOlNode < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def anonymous_identifier(val)
            IsOlNode.new(:anonymous_identifier, val)
          end

          def ip_address(val)
            IsOlNode.new(:ip_address, val)
          end

          def ip_location(val)
            IsOlNode.new(:ip_location, val)
          end

          def dummy(val)
            IsOlNode.new(:dummy, val)
          end

          def third_party_graph_group_id(val)
            IsOlNode.new(:third_party_graph_group_id, val)
          end
        end

        ANONYMOUS_IDENTIFIER = 1
        IP_ADDRESS = 2
        IP_LOCATION = 3
        DUMMY = 4
        THIRD_PARTY_GRAPH_GROUP_ID = 5

        FIELDS = {
          ANONYMOUS_IDENTIFIER => {:type => ::Thrift::Types::STRUCT, :name => 'anonymous_identifier', :class => ::Liveramp::Types::Bang::AnonymousIdentifier, :optional => true},
          IP_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'ip_address', :optional => true},
          IP_LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'ip_location', :class => ::Rapleaf::Types::IpMatching::IPLocation, :optional => true},
          DUMMY => {:type => ::Thrift::Types::STRING, :name => 'dummy', :optional => true},
          THIRD_PARTY_GRAPH_GROUP_ID => {:type => ::Thrift::Types::STRING, :name => 'third_party_graph_group_id', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IsOlEdge
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SOURCE = 1
        TARGET = 2
        TYPE = 3
        TIMESTAMPS_BY_PARTNERS = 4

        FIELDS = {
          SOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'source', :class => ::Liveramp::Types::IdentityScience::IsOlNode},
          TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'target', :class => ::Liveramp::Types::IdentityScience::IsOlNode},
          TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::Liveramp::Types::IdentityScience::IsOlEdgeType},
          TIMESTAMPS_BY_PARTNERS => {:type => ::Thrift::Types::MAP, :name => 'timestamps_by_partners', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @type.nil? || ::Liveramp::Types::IdentityScience::IsOlEdgeType::VALID_VALUES.include?(@type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsOlPath
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EDGES = 1
        LABEL = 2

        FIELDS = {
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IsOlEdge}},
          LABEL => {:type => ::Thrift::Types::STRING, :name => 'label', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGGEdge
        include ::Thrift::Struct, ::Thrift::Struct_Union
        A = 1
        B = 2
        METADATA = 3

        FIELDS = {
          A => {:type => ::Thrift::Types::STRING, :name => 'a'},
          B => {:type => ::Thrift::Types::STRING, :name => 'b'},
          METADATA => {:type => ::Thrift::Types::STRING, :name => 'metadata', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGGPath
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EDGES = 1
        LABEL = 2

        FIELDS = {
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IsGGEdge}},
          LABEL => {:type => ::Thrift::Types::STRING, :name => 'label', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGGComponent
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        EDGES = 2
        NODE_METADATA = 3

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IsGGEdge}},
          NODE_METADATA => {:type => ::Thrift::Types::MAP, :name => 'node_metadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGsAudienceKey
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_ID = 1
        KEY = 2

        FIELDS = {
          AUDIENCE_ID => {:type => ::Thrift::Types::I32, :name => 'audience_id'},
          KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGsHashedCid
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ANA_ID = 1
        HASHED_PARTNER_ID = 2

        FIELDS = {
          ANA_ID => {:type => ::Thrift::Types::I32, :name => 'ana_id'},
          HASHED_PARTNER_ID => {:type => ::Thrift::Types::STRING, :name => 'hashed_partner_id', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGsNode < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def pin(val)
            IsGsNode.new(:pin, val)
          end

          def r_doc_id(val)
            IsGsNode.new(:r_doc_id, val)
          end

          def audience_key(val)
            IsGsNode.new(:audience_key, val)
          end

          def hashed_cookie_id(val)
            IsGsNode.new(:hashed_cookie_id, val)
          end

          def hashed_mobile_id(val)
            IsGsNode.new(:hashed_mobile_id, val)
          end

          def hashed_custom_id(val)
            IsGsNode.new(:hashed_custom_id, val)
          end
        end

        PIN = 1
        R_DOC_ID = 2
        AUDIENCE_KEY = 3
        HASHED_COOKIE_ID = 4
        HASHED_MOBILE_ID = 5
        HASHED_CUSTOM_ID = 6

        FIELDS = {
          PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN, :optional => true},
          R_DOC_ID => {:type => ::Thrift::Types::STRING, :name => 'r_doc_id', :optional => true},
          AUDIENCE_KEY => {:type => ::Thrift::Types::STRUCT, :name => 'audience_key', :class => ::Liveramp::Types::IdentityScience::IsGsAudienceKey, :optional => true},
          HASHED_COOKIE_ID => {:type => ::Thrift::Types::STRING, :name => 'hashed_cookie_id', :binary => true, :optional => true},
          HASHED_MOBILE_ID => {:type => ::Thrift::Types::STRING, :name => 'hashed_mobile_id', :binary => true, :optional => true},
          HASHED_CUSTOM_ID => {:type => ::Thrift::Types::STRUCT, :name => 'hashed_custom_id', :class => ::Liveramp::Types::IdentityScience::IsGsHashedCid, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IsGsEdge
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SOURCE = 1
        TARGET = 2
        TYPE = 3
        TIMESTAMPS_BY_PARTNERS = 4

        FIELDS = {
          SOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'source', :class => ::Liveramp::Types::IdentityScience::IsGsNode},
          TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'target', :class => ::Liveramp::Types::IdentityScience::IsGsNode},
          TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::Liveramp::Types::IdentityScience::IsGsEdgeType},
          TIMESTAMPS_BY_PARTNERS => {:type => ::Thrift::Types::MAP, :name => 'timestamps_by_partners', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::I64}}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @type.nil? || ::Liveramp::Types::IdentityScience::IsGsEdgeType::VALID_VALUES.include?(@type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGsSegmentData
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIELD_ID = 1
        VALUE_ID = 2

        FIELDS = {
          FIELD_ID => {:type => ::Thrift::Types::I32, :name => 'field_id'},
          VALUE_ID => {:type => ::Thrift::Types::I32, :name => 'value_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IsGsNodeMetadata < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def mdoc_strength(val)
            IsGsNodeMetadata.new(:mdoc_strength, val)
          end

          def segment_data(val)
            IsGsNodeMetadata.new(:segment_data, val)
          end
        end

        MDOC_STRENGTH = 1
        SEGMENT_DATA = 2

        FIELDS = {
          MDOC_STRENGTH => {:type => ::Thrift::Types::BOOL, :name => 'mdoc_strength', :optional => true},
          SEGMENT_DATA => {:type => ::Thrift::Types::LIST, :name => 'segment_data', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IsGsSegmentData}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IsGsNodeAndMetadata
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NODE = 1
        METADATA = 2

        FIELDS = {
          NODE => {:type => ::Thrift::Types::STRUCT, :name => 'node', :class => ::Liveramp::Types::IdentityScience::IsGsNode},
          METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'metadata', :class => ::Liveramp::Types::IdentityScience::IsGsNodeMetadata}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AudienceKeysMap
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_KEYS = 1

        FIELDS = {
          AUDIENCE_KEYS => {:type => ::Thrift::Types::MAP, :name => 'audience_keys', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING, :binary => true}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PINAndAudienceKeys
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PIN = 1
        AUDIENCE_KEYS = 2

        FIELDS = {
          PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN},
          AUDIENCE_KEYS => {:type => ::Thrift::Types::STRUCT, :name => 'audience_keys', :class => ::Liveramp::Types::IdentityScience::AudienceKeysMap}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymizedHashedEmail
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HASH_TYPE = 1
        DOUBLE_HASH = 2

        FIELDS = {
          HASH_TYPE => {:type => ::Thrift::Types::STRING, :name => 'hash_type'},
          DOUBLE_HASH => {:type => ::Thrift::Types::STRING, :name => 'double_hash', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymziedName
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LENGTH = 1
        HASH = 2

        FIELDS = {
          LENGTH => {:type => ::Thrift::Types::I32, :name => 'length'},
          HASH => {:type => ::Thrift::Types::I32, :name => 'hash'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymizedNap
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME = 1
        LAST_NAME = 2
        HASHED_STREET = 3
        HASHED_CITY = 4
        STATE = 5
        HASHED_ZIP5 = 6
        HASHED_ZIP9 = 7
        HASHED_ZIP_OTHER = 8

        FIELDS = {
          FIRST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'first_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          LAST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'last_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          HASHED_STREET => {:type => ::Thrift::Types::STRING, :name => 'hashed_street', :binary => true, :optional => true},
          HASHED_CITY => {:type => ::Thrift::Types::STRING, :name => 'hashed_city', :binary => true, :optional => true},
          STATE => {:type => ::Thrift::Types::STRING, :name => 'state', :optional => true},
          HASHED_ZIP5 => {:type => ::Thrift::Types::STRING, :name => 'hashed_zip5', :binary => true, :optional => true},
          HASHED_ZIP9 => {:type => ::Thrift::Types::STRING, :name => 'hashed_zip9', :binary => true, :optional => true},
          HASHED_ZIP_OTHER => {:type => ::Thrift::Types::STRING, :name => 'hashed_zip_other', :binary => true, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymizedNameAndEmail
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME = 1
        LAST_NAME = 2
        HASHED_EMAIL = 3

        FIELDS = {
          FIRST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'first_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          LAST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'last_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          HASHED_EMAIL => {:type => ::Thrift::Types::STRING, :name => 'hashed_email', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymizedNameAndHashedEmail
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME = 1
        LAST_NAME = 2
        ANONYMIZED_HASHED_EMAIL = 3

        FIELDS = {
          FIRST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'first_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          LAST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'last_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          ANONYMIZED_HASHED_EMAIL => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_hashed_email', :class => ::Liveramp::Types::IdentityScience::AnonymizedHashedEmail}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymizedNameAndPhone
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME = 1
        LAST_NAME = 2
        HASHED_PHONE = 3

        FIELDS = {
          FIRST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'first_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          LAST_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'last_name', :class => ::Liveramp::Types::IdentityScience::AnonymziedName, :optional => true},
          HASHED_PHONE => {:type => ::Thrift::Types::STRING, :name => 'hashed_phone', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class FirstLastNameHashes
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FIRST_NAME_HASH = 1
        LAST_NAME_HASH = 2

        FIELDS = {
          FIRST_NAME_HASH => {:type => ::Thrift::Types::I32, :name => 'first_name_hash', :optional => true},
          LAST_NAME_HASH => {:type => ::Thrift::Types::I32, :name => 'last_name_hash', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ArlWithAnonymizedName
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARL = 1
        FIRST_LAST_NAME_HASHES = 2

        FIELDS = {
          ARL => {:type => ::Thrift::Types::STRING, :name => 'arl', :binary => true},
          FIRST_LAST_NAME_HASHES => {:type => ::Thrift::Types::LIST, :name => 'first_last_name_hashes', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::FirstLastNameHashes}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnonymizedPIN < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def anonymized_email(val)
            AnonymizedPIN.new(:anonymized_email, val)
          end

          def anonymized_hashed_email(val)
            AnonymizedPIN.new(:anonymized_hashed_email, val)
          end

          def anonymized_phone(val)
            AnonymizedPIN.new(:anonymized_phone, val)
          end

          def anonymized_nap(val)
            AnonymizedPIN.new(:anonymized_nap, val)
          end

          def anonymized_name_and_email(val)
            AnonymizedPIN.new(:anonymized_name_and_email, val)
          end

          def anonymized_name_and_hashed_email(val)
            AnonymizedPIN.new(:anonymized_name_and_hashed_email, val)
          end

          def anonymized_name_and_phone(val)
            AnonymizedPIN.new(:anonymized_name_and_phone, val)
          end

          def arl_with_anonymized_name(val)
            AnonymizedPIN.new(:arl_with_anonymized_name, val)
          end
        end

        ANONYMIZED_EMAIL = 1
        ANONYMIZED_HASHED_EMAIL = 2
        ANONYMIZED_PHONE = 3
        ANONYMIZED_NAP = 4
        ANONYMIZED_NAME_AND_EMAIL = 5
        ANONYMIZED_NAME_AND_HASHED_EMAIL = 6
        ANONYMIZED_NAME_AND_PHONE = 7
        ARL_WITH_ANONYMIZED_NAME = 8

        FIELDS = {
          ANONYMIZED_EMAIL => {:type => ::Thrift::Types::STRING, :name => 'anonymized_email', :binary => true, :optional => true},
          ANONYMIZED_HASHED_EMAIL => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_hashed_email', :class => ::Liveramp::Types::IdentityScience::AnonymizedHashedEmail, :optional => true},
          ANONYMIZED_PHONE => {:type => ::Thrift::Types::STRING, :name => 'anonymized_phone', :binary => true, :optional => true},
          ANONYMIZED_NAP => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_nap', :class => ::Liveramp::Types::IdentityScience::AnonymizedNap, :optional => true},
          ANONYMIZED_NAME_AND_EMAIL => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_name_and_email', :class => ::Liveramp::Types::IdentityScience::AnonymizedNameAndEmail, :optional => true},
          ANONYMIZED_NAME_AND_HASHED_EMAIL => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_name_and_hashed_email', :class => ::Liveramp::Types::IdentityScience::AnonymizedNameAndHashedEmail, :optional => true},
          ANONYMIZED_NAME_AND_PHONE => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_name_and_phone', :class => ::Liveramp::Types::IdentityScience::AnonymizedNameAndPhone, :optional => true},
          ARL_WITH_ANONYMIZED_NAME => {:type => ::Thrift::Types::STRUCT, :name => 'arl_with_anonymized_name', :class => ::Liveramp::Types::IdentityScience::ArlWithAnonymizedName, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class AnonymizedPINHaksAndPels
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ANONYMIZED_PIN = 1
        HASHED_AUDIENCE_KEYS = 2
        PELS = 3

        FIELDS = {
          ANONYMIZED_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_pin', :class => ::Liveramp::Types::IdentityScience::AnonymizedPIN},
          HASHED_AUDIENCE_KEYS => {:type => ::Thrift::Types::STRUCT, :name => 'hashed_audience_keys', :class => ::Liveramp::Types::IdentityScience::AudienceKeysMap},
          PELS => {:type => ::Thrift::Types::LIST, :name => 'pels', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PelIndexAnonymizedPINAndHAKs
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ANONYMIZED_PIN = 1
        PEL_INDEX = 2
        HAKS = 3

        FIELDS = {
          ANONYMIZED_PIN => {:type => ::Thrift::Types::STRUCT, :name => 'anonymized_pin', :class => ::Liveramp::Types::IdentityScience::AnonymizedPIN},
          PEL_INDEX => {:type => ::Thrift::Types::I32, :name => 'pel_index'},
          HAKS => {:type => ::Thrift::Types::STRUCT, :name => 'haks', :class => ::Liveramp::Types::IdentityScience::AudienceKeysMap}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PelIndexAnonymizedPINAndHAKsList
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ANONYMIZED_PINS_AND_AUDIENCES = 1

        FIELDS = {
          ANONYMIZED_PINS_AND_AUDIENCES => {:type => ::Thrift::Types::LIST, :name => 'anonymized_pins_and_audiences', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::PelIndexAnonymizedPINAndHAKs}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class PelPelEdgeWithAnonymizedPins
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PEL_A = 1
        PEL_B = 2
        ANONYMIZED_PINS_AND_AUDIENCES_A = 3
        ANONYMIZED_PINS_AND_AUDIENCES_B = 4

        FIELDS = {
          PEL_A => {:type => ::Thrift::Types::STRING, :name => 'pel_a'},
          PEL_B => {:type => ::Thrift::Types::STRING, :name => 'pel_b'},
          ANONYMIZED_PINS_AND_AUDIENCES_A => {:type => ::Thrift::Types::LIST, :name => 'anonymized_pins_and_audiences_a', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::PelIndexAnonymizedPINAndHAKs}},
          ANONYMIZED_PINS_AND_AUDIENCES_B => {:type => ::Thrift::Types::LIST, :name => 'anonymized_pins_and_audiences_b', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::PelIndexAnonymizedPINAndHAKs}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class LabeledPelEntry
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PEL = 1
        LABEL = 2
        ENTRY_ID = 3

        FIELDS = {
          PEL => {:type => ::Thrift::Types::STRING, :name => 'pel'},
          LABEL => {:type => ::Thrift::Types::STRING, :name => 'label'},
          ENTRY_ID => {:type => ::Thrift::Types::STRING, :name => 'entry_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class LabeledPelEdge
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PEL_A = 1
        PEL_B = 2
        LABEL = 3

        FIELDS = {
          PEL_A => {:type => ::Thrift::Types::STRING, :name => 'pel_a'},
          PEL_B => {:type => ::Thrift::Types::STRING, :name => 'pel_b'},
          LABEL => {:type => ::Thrift::Types::STRING, :name => 'label'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ExpandedLabeledPelEntry
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PEL = 1
        RECORD_LABEL = 2
        EDGE_LABEL = 3
        RECORD_ID = 4

        FIELDS = {
          PEL => {:type => ::Thrift::Types::STRING, :name => 'pel'},
          RECORD_LABEL => {:type => ::Thrift::Types::STRING, :name => 'record_label'},
          EDGE_LABEL => {:type => ::Thrift::Types::STRING, :name => 'edge_label'},
          RECORD_ID => {:type => ::Thrift::Types::STRING, :name => 'record_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphAdjacency
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TARGET = 1
        METADATA = 2

        FIELDS = {
          TARGET => {:type => ::Thrift::Types::I64, :name => 'target'},
          METADATA => {:type => ::Thrift::Types::I64, :name => 'metadata'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphAdjacencyList
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SOURCE = 1
        ADJACENCIES = 2

        FIELDS = {
          SOURCE => {:type => ::Thrift::Types::I64, :name => 'source'},
          ADJACENCIES => {:type => ::Thrift::Types::LIST, :name => 'adjacencies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IxGraphAdjacency}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphEdge
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NODE = 1
        METADATA = 2

        FIELDS = {
          NODE => {:type => ::Thrift::Types::I64, :name => 'node'},
          METADATA => {:type => ::Thrift::Types::I64, :name => 'metadata'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphPath
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SOURCE = 1
        EDGES = 2

        FIELDS = {
          SOURCE => {:type => ::Thrift::Types::I64, :name => 'source'},
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IxGraphEdge}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphComponent
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EDGES = 1

        FIELDS = {
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IxGraphEdge}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphPathAndTerminal
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TERMINAL = 1
        EDGES = 2

        FIELDS = {
          TERMINAL => {:type => ::Thrift::Types::BOOL, :name => 'terminal'},
          EDGES => {:type => ::Thrift::Types::LIST, :name => 'edges', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IxGraphEdge}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class IxGraphSrcAggregation < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def found_lower_node(val)
            IxGraphSrcAggregation.new(:found_lower_node, val)
          end

          def paths(val)
            IxGraphSrcAggregation.new(:paths, val)
          end

          def too_large(val)
            IxGraphSrcAggregation.new(:too_large, val)
          end
        end

        FOUND_LOWER_NODE = 1
        PATHS = 2
        TOO_LARGE = 3

        FIELDS = {
          FOUND_LOWER_NODE => {:type => ::Thrift::Types::I64, :name => 'found_lower_node', :optional => true},
          PATHS => {:type => ::Thrift::Types::LIST, :name => 'paths', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::IdentityScience::IxGraphPathAndTerminal}, :optional => true},
          TOO_LARGE => {:type => ::Thrift::Types::BOOL, :name => 'too_large', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class IxGraphNode
        include ::Thrift::Struct, ::Thrift::Struct_Union
        INDEX = 1
        VALUE = 2

        FIELDS = {
          INDEX => {:type => ::Thrift::Types::I64, :name => 'index'},
          VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
