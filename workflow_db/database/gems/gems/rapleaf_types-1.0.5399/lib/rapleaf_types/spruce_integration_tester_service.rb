#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'servile_service'
require File.join File.dirname(__FILE__), 'spruce_integration_tester_types'

module Liveramp
  module SpruceIntegrationTester
    module SpruceIntegrationTesterService
      class Client < ::Liveramp::Types::Servile::ServileService::Client 
        include ::Thrift::Client

        def submit(config, options)
          send_submit(config, options)
          return recv_submit()
        end

        def send_submit(config, options)
          send_message('submit', Submit_args, :config => config, :options => options)
        end

        def recv_submit()
          result = receive_message(Submit_result)
          return result.success unless result.success.nil?
          raise result.se unless result.se.nil?
          raise result.ice unless result.ice.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'submit failed: unknown result')
        end

        def get_config(request_id)
          send_get_config(request_id)
          return recv_get_config()
        end

        def send_get_config(request_id)
          send_message('get_config', Get_config_args, :request_id => request_id)
        end

        def recv_get_config()
          result = receive_message(Get_config_result)
          return result.success unless result.success.nil?
          raise result.se unless result.se.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_config failed: unknown result')
        end

        def get_configs(request_id)
          send_get_configs(request_id)
          return recv_get_configs()
        end

        def send_get_configs(request_id)
          send_message('get_configs', Get_configs_args, :request_id => request_id)
        end

        def recv_get_configs()
          result = receive_message(Get_configs_result)
          return result.success unless result.success.nil?
          raise result.se unless result.se.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_configs failed: unknown result')
        end

        def get_output(request_id)
          send_get_output(request_id)
          return recv_get_output()
        end

        def send_get_output(request_id)
          send_message('get_output', Get_output_args, :request_id => request_id)
        end

        def recv_get_output()
          result = receive_message(Get_output_result)
          return result.success unless result.success.nil?
          raise result.se unless result.se.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_output failed: unknown result')
        end

        def get_report_url(request_id)
          send_get_report_url(request_id)
          return recv_get_report_url()
        end

        def send_get_report_url(request_id)
          send_message('get_report_url', Get_report_url_args, :request_id => request_id)
        end

        def recv_get_report_url()
          result = receive_message(Get_report_url_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_report_url failed: unknown result')
        end

        def get_emailable_report(request_id)
          send_get_emailable_report(request_id)
          return recv_get_emailable_report()
        end

        def send_get_emailable_report(request_id)
          send_message('get_emailable_report', Get_emailable_report_args, :request_id => request_id)
        end

        def recv_get_emailable_report()
          result = receive_message(Get_emailable_report_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_emailable_report failed: unknown result')
        end

      end

      class Processor < ::Liveramp::Types::Servile::ServileService::Processor 
        include ::Thrift::Processor

        def process_submit(seqid, iprot, oprot)
          args = read_args(iprot, Submit_args)
          result = Submit_result.new()
          begin
            result.success = @handler.submit(args.config, args.options)
          rescue ::Liveramp::Types::Servile::ServileException => se
            result.se = se
          rescue ::Liveramp::Types::Servile::InvalidConfigException => ice
            result.ice = ice
          end
          write_result(result, oprot, 'submit', seqid)
        end

        def process_get_config(seqid, iprot, oprot)
          args = read_args(iprot, Get_config_args)
          result = Get_config_result.new()
          begin
            result.success = @handler.get_config(args.request_id)
          rescue ::Liveramp::Types::Servile::ServileException => se
            result.se = se
          end
          write_result(result, oprot, 'get_config', seqid)
        end

        def process_get_configs(seqid, iprot, oprot)
          args = read_args(iprot, Get_configs_args)
          result = Get_configs_result.new()
          begin
            result.success = @handler.get_configs(args.request_id)
          rescue ::Liveramp::Types::Servile::ServileException => se
            result.se = se
          end
          write_result(result, oprot, 'get_configs', seqid)
        end

        def process_get_output(seqid, iprot, oprot)
          args = read_args(iprot, Get_output_args)
          result = Get_output_result.new()
          begin
            result.success = @handler.get_output(args.request_id)
          rescue ::Liveramp::Types::Servile::ServileException => se
            result.se = se
          end
          write_result(result, oprot, 'get_output', seqid)
        end

        def process_get_report_url(seqid, iprot, oprot)
          args = read_args(iprot, Get_report_url_args)
          result = Get_report_url_result.new()
          begin
            result.success = @handler.get_report_url(args.request_id)
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_report_url', seqid)
        end

        def process_get_emailable_report(seqid, iprot, oprot)
          args = read_args(iprot, Get_emailable_report_args)
          result = Get_emailable_report_result.new()
          begin
            result.success = @handler.get_emailable_report(args.request_id)
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_emailable_report', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Submit_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CONFIG = 1
        OPTIONS = 2

        FIELDS = {
          CONFIG => {:type => ::Thrift::Types::STRUCT, :name => 'config', :class => ::Liveramp::SpruceIntegrationTester::TesterConfig},
          OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'options', :class => ::Liveramp::Types::Servile::RequestOptions}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Submit_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        SE = 1
        ICE = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException},
          ICE => {:type => ::Thrift::Types::STRUCT, :name => 'ice', :class => ::Liveramp::Types::Servile::InvalidConfigException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_config_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_config_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        SE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::SpruceIntegrationTester::TesterConfig},
          SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_configs_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::LIST, :name => 'request_id', :element => {:type => ::Thrift::Types::I64}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_configs_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        SE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::SpruceIntegrationTester::TesterConfig}},
          SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_output_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_output_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        SE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::SpruceIntegrationTester::TestResult},
          SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_report_url_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_report_url_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_emailable_report_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_emailable_report_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
