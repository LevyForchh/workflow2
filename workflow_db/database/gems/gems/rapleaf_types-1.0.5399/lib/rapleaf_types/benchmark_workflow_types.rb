#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

class BenchmarkDatum; end

class BenchmarkDatum2; end

class StringKey; end

class BenchmarkDatum
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEY = 1
  PAYLOAD = 2
  QUALIFIER = 3

  FIELDS = {
    KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
    PAYLOAD => {:type => ::Thrift::Types::STRING, :name => 'payload'},
    QUALIFIER => {:type => ::Thrift::Types::STRING, :name => 'qualifier', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field payload is unset!') unless @payload
  end

  ::Thrift::Struct.generate_accessors self
end

class BenchmarkDatum2
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEY = 1
  PAYLOAD = 2
  QUALIFIER = 3

  FIELDS = {
    KEY => {:type => ::Thrift::Types::STRING, :name => 'key', :binary => true},
    PAYLOAD => {:type => ::Thrift::Types::STRING, :name => 'payload'},
    QUALIFIER => {:type => ::Thrift::Types::STRING, :name => 'qualifier', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field payload is unset!') unless @payload
  end

  ::Thrift::Struct.generate_accessors self
end

class StringKey
  include ::Thrift::Struct, ::Thrift::Struct_Union
  KEY = 1

  FIELDS = {
    KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key is unset!') unless @key
  end

  ::Thrift::Struct.generate_accessors self
end

