#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'abilitec_appender_types'

module Liveramp
  module AbilitecAppender
    module AbilitecAppender
      class Client
        include ::Thrift::Client

        def append(request)
          send_append(request)
          recv_append()
        end

        def send_append(request)
          send_message('append', Append_args, :request => request)
        end

        def recv_append()
          result = receive_message(Append_result)
          return
        end

        def retrieve(ids_to_retrieve)
          send_retrieve(ids_to_retrieve)
          return recv_retrieve()
        end

        def send_retrieve(ids_to_retrieve)
          send_message('retrieve', Retrieve_args, :ids_to_retrieve => ids_to_retrieve)
        end

        def recv_retrieve()
          result = receive_message(Retrieve_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'retrieve failed: unknown result')
        end

        def submit_request(request)
          send_submit_request(request)
          return recv_submit_request()
        end

        def send_submit_request(request)
          send_message('submit_request', Submit_request_args, :request => request)
        end

        def recv_submit_request()
          result = receive_message(Submit_request_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'submit_request failed: unknown result')
        end

        def retrieve_request(request_id)
          send_retrieve_request(request_id)
          return recv_retrieve_request()
        end

        def send_retrieve_request(request_id)
          send_message('retrieve_request', Retrieve_request_args, :request_id => request_id)
        end

        def recv_retrieve_request()
          result = receive_message(Retrieve_request_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'retrieve_request failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_append(seqid, iprot, oprot)
          args = read_args(iprot, Append_args)
          result = Append_result.new()
          @handler.append(args.request)
          write_result(result, oprot, 'append', seqid)
        end

        def process_retrieve(seqid, iprot, oprot)
          args = read_args(iprot, Retrieve_args)
          result = Retrieve_result.new()
          result.success = @handler.retrieve(args.ids_to_retrieve)
          write_result(result, oprot, 'retrieve', seqid)
        end

        def process_submit_request(seqid, iprot, oprot)
          args = read_args(iprot, Submit_request_args)
          result = Submit_request_result.new()
          result.success = @handler.submit_request(args.request)
          write_result(result, oprot, 'submit_request', seqid)
        end

        def process_retrieve_request(seqid, iprot, oprot)
          args = read_args(iprot, Retrieve_request_args)
          result = Retrieve_request_result.new()
          result.success = @handler.retrieve_request(args.request_id)
          write_result(result, oprot, 'retrieve_request', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Append_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Liveramp::AbilitecAppender::AppendRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Append_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Retrieve_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        IDS_TO_RETRIEVE = 1

        FIELDS = {
          IDS_TO_RETRIEVE => {:type => ::Thrift::Types::LIST, :name => 'ids_to_retrieve', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::AbilitecAppender::AppendId}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Retrieve_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::AbilitecAppender::AppendId}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::AbilitecAppender::AppendInfo}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Submit_request_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Liveramp::AbilitecAppender::AppendRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Submit_request_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Retrieve_request_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST_ID = 1

        FIELDS = {
          REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Retrieve_request_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::AbilitecAppender::AppendInfo}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
