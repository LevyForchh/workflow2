#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'pek_service_types'

module LiveRamp
  module PekService
    module PekService
      class Client
        include ::Thrift::Client

        def createAndSaveNewPek(inbound_customer_id, outbound_customer_id, partner_identifier, updated_by)
          send_createAndSaveNewPek(inbound_customer_id, outbound_customer_id, partner_identifier, updated_by)
          recv_createAndSaveNewPek()
        end

        def send_createAndSaveNewPek(inbound_customer_id, outbound_customer_id, partner_identifier, updated_by)
          send_message('createAndSaveNewPek', CreateAndSaveNewPek_args, :inbound_customer_id => inbound_customer_id, :outbound_customer_id => outbound_customer_id, :partner_identifier => partner_identifier, :updated_by => updated_by)
        end

        def recv_createAndSaveNewPek()
          result = receive_message(CreateAndSaveNewPek_result)
          raise result.pekExistsError unless result.pekExistsError.nil?
          raise result.pekServiceError unless result.pekServiceError.nil?
          return
        end

        def exportPelEncryptionKey(partner_identifier)
          send_exportPelEncryptionKey(partner_identifier)
          return recv_exportPelEncryptionKey()
        end

        def send_exportPelEncryptionKey(partner_identifier)
          send_message('exportPelEncryptionKey', ExportPelEncryptionKey_args, :partner_identifier => partner_identifier)
        end

        def recv_exportPelEncryptionKey()
          result = receive_message(ExportPelEncryptionKey_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exportPelEncryptionKey failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_createAndSaveNewPek(seqid, iprot, oprot)
          args = read_args(iprot, CreateAndSaveNewPek_args)
          result = CreateAndSaveNewPek_result.new()
          begin
            @handler.createAndSaveNewPek(args.inbound_customer_id, args.outbound_customer_id, args.partner_identifier, args.updated_by)
          rescue ::LiveRamp::PekService::PekExistsError => pekExistsError
            result.pekExistsError = pekExistsError
          rescue ::LiveRamp::PekService::PekServiceError => pekServiceError
            result.pekServiceError = pekServiceError
          end
          write_result(result, oprot, 'createAndSaveNewPek', seqid)
        end

        def process_exportPelEncryptionKey(seqid, iprot, oprot)
          args = read_args(iprot, ExportPelEncryptionKey_args)
          result = ExportPelEncryptionKey_result.new()
          result.success = @handler.exportPelEncryptionKey(args.partner_identifier)
          write_result(result, oprot, 'exportPelEncryptionKey', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class CreateAndSaveNewPek_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        INBOUND_CUSTOMER_ID = 1
        OUTBOUND_CUSTOMER_ID = 2
        PARTNER_IDENTIFIER = 3
        UPDATED_BY = 4

        FIELDS = {
          INBOUND_CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'inbound_customer_id'},
          OUTBOUND_CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'outbound_customer_id'},
          PARTNER_IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'partner_identifier'},
          UPDATED_BY => {:type => ::Thrift::Types::I64, :name => 'updated_by'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CreateAndSaveNewPek_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PEKEXISTSERROR = 1
        PEKSERVICEERROR = 2

        FIELDS = {
          PEKEXISTSERROR => {:type => ::Thrift::Types::STRUCT, :name => 'pekExistsError', :class => ::LiveRamp::PekService::PekExistsError},
          PEKSERVICEERROR => {:type => ::Thrift::Types::STRUCT, :name => 'pekServiceError', :class => ::LiveRamp::PekService::PekServiceError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ExportPelEncryptionKey_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PARTNER_IDENTIFIER = 1

        FIELDS = {
          PARTNER_IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'partner_identifier'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class ExportPelEncryptionKey_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LiveRamp::PekService::KeyExportReport}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
