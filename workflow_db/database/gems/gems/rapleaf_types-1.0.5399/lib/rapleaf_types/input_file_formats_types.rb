#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Liveramp
  module Types
    module ParcService
      class ColumnDelimitedFileFormat; end

      class KeyValueFileFormat; end

      class GoogleDdsFileFormat; end

      class SegmentFileFormat; end

      class ColumnDelimitedFileFormat
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        DELIMITER = 2
        COLUMN_INDEX_TO_HEADER = 3

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::LIST, :name => 'headers', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
          DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'delimiter'},
          COLUMN_INDEX_TO_HEADER => {:type => ::Thrift::Types::MAP, :name => 'column_index_to_header', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field delimiter is unset!') unless @delimiter
        end

        ::Thrift::Struct.generate_accessors self
      end

      class KeyValueFileFormat
        include ::Thrift::Struct, ::Thrift::Struct_Union
        KEY_VALUE_PAIR_DELIMITER = 1
        EQUALITY_DELIMITER = 2
        NUM_IDENTIFIERS = 3
        IDENTIFIER_DELIMITER = 4
        KEYS = 5
        LEGACY_COLUMN_INDEX_TO_HEADER = 6

        FIELDS = {
          KEY_VALUE_PAIR_DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'key_value_pair_delimiter'},
          EQUALITY_DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'equality_delimiter'},
          NUM_IDENTIFIERS => {:type => ::Thrift::Types::I32, :name => 'num_identifiers'},
          IDENTIFIER_DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'identifier_delimiter', :optional => true},
          KEYS => {:type => ::Thrift::Types::SET, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
          LEGACY_COLUMN_INDEX_TO_HEADER => {:type => ::Thrift::Types::MAP, :name => 'legacy_column_index_to_header', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key_value_pair_delimiter is unset!') unless @key_value_pair_delimiter
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field equality_delimiter is unset!') unless @equality_delimiter
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_identifiers is unset!') unless @num_identifiers
        end

        ::Thrift::Struct.generate_accessors self
      end

      class GoogleDdsFileFormat
        include ::Thrift::Struct, ::Thrift::Struct_Union
        DELETE_ONLY = 1
        KEY_VALUE_FILE_FORMAT = 2

        FIELDS = {
          DELETE_ONLY => {:type => ::Thrift::Types::BOOL, :name => 'delete_only'},
          KEY_VALUE_FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'key_value_file_format', :class => ::Liveramp::Types::ParcService::KeyValueFileFormat}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field delete_only is unset!') if @delete_only.nil?
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key_value_file_format is unset!') unless @key_value_file_format
        end

        ::Thrift::Struct.generate_accessors self
      end

      # File preprocessing only uses the first 3 parameters
      class SegmentFileFormat
        include ::Thrift::Struct, ::Thrift::Struct_Union
        DELIMITER = 1
        NUM_IDENTIFIER_COLUMNS = 2
        SEGMENT_DELIMITER = 3
        KEYS = 4

        FIELDS = {
          DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'delimiter'},
          NUM_IDENTIFIER_COLUMNS => {:type => ::Thrift::Types::I32, :name => 'num_identifier_columns'},
          SEGMENT_DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'segment_delimiter', :optional => true},
          KEYS => {:type => ::Thrift::Types::LIST, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field delimiter is unset!') unless @delimiter
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_identifier_columns is unset!') unless @num_identifier_columns
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
