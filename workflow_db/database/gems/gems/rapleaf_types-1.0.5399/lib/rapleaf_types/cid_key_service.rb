#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'cid_key_service_types'

module Liveramp
  module Types
    module CidKeyService
      module CidKeyService
        class Client
          include ::Thrift::Client

          def write_secret_to_nfs(secret_id, ldap_name)
            send_write_secret_to_nfs(secret_id, ldap_name)
            return recv_write_secret_to_nfs()
          end

          def send_write_secret_to_nfs(secret_id, ldap_name)
            send_message('write_secret_to_nfs', Write_secret_to_nfs_args, :secret_id => secret_id, :ldap_name => ldap_name)
          end

          def recv_write_secret_to_nfs()
            result = receive_message(Write_secret_to_nfs_result)
            return result.success unless result.success.nil?
            raise result.auth_exception unless result.auth_exception.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise result.no_such_secret unless result.no_such_secret.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'write_secret_to_nfs failed: unknown result')
          end

          def write_md5_of_secret_to_nfs(secret_id, ldap_name)
            send_write_md5_of_secret_to_nfs(secret_id, ldap_name)
            return recv_write_md5_of_secret_to_nfs()
          end

          def send_write_md5_of_secret_to_nfs(secret_id, ldap_name)
            send_message('write_md5_of_secret_to_nfs', Write_md5_of_secret_to_nfs_args, :secret_id => secret_id, :ldap_name => ldap_name)
          end

          def recv_write_md5_of_secret_to_nfs()
            result = receive_message(Write_md5_of_secret_to_nfs_result)
            return result.success unless result.success.nil?
            raise result.auth_exception unless result.auth_exception.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise result.no_such_secret unless result.no_such_secret.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'write_md5_of_secret_to_nfs failed: unknown result')
          end

          def generate_secret_if_not_exist(secret_type, customer_id, ldap_name, comments)
            send_generate_secret_if_not_exist(secret_type, customer_id, ldap_name, comments)
            return recv_generate_secret_if_not_exist()
          end

          def send_generate_secret_if_not_exist(secret_type, customer_id, ldap_name, comments)
            send_message('generate_secret_if_not_exist', Generate_secret_if_not_exist_args, :secret_type => secret_type, :customer_id => customer_id, :ldap_name => ldap_name, :comments => comments)
          end

          def recv_generate_secret_if_not_exist()
            result = receive_message(Generate_secret_if_not_exist_result)
            return result.success unless result.success.nil?
            raise result.auth_exception unless result.auth_exception.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generate_secret_if_not_exist failed: unknown result')
          end

          def get_secret_type(secret_id)
            send_get_secret_type(secret_id)
            return recv_get_secret_type()
          end

          def send_get_secret_type(secret_id)
            send_message('get_secret_type', Get_secret_type_args, :secret_id => secret_id)
          end

          def recv_get_secret_type()
            result = receive_message(Get_secret_type_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise result.no_such_secret unless result.no_such_secret.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_secret_type failed: unknown result')
          end

          def get_secret_if_exists(secret_type, customer_id)
            send_get_secret_if_exists(secret_type, customer_id)
            return recv_get_secret_if_exists()
          end

          def send_get_secret_if_exists(secret_type, customer_id)
            send_message('get_secret_if_exists', Get_secret_if_exists_args, :secret_type => secret_type, :customer_id => customer_id)
          end

          def recv_get_secret_if_exists()
            result = receive_message(Get_secret_if_exists_result)
            return result.success unless result.success.nil?
            raise result.internal_error unless result.internal_error.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_secret_if_exists failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_write_secret_to_nfs(seqid, iprot, oprot)
            args = read_args(iprot, Write_secret_to_nfs_args)
            result = Write_secret_to_nfs_result.new()
            begin
              result.success = @handler.write_secret_to_nfs(args.secret_id, args.ldap_name)
            rescue ::Liveramp::Types::CidKeyService::AuthException => auth_exception
              result.auth_exception = auth_exception
            rescue ::Liveramp::Types::CidKeyService::CksInternalError => internal_error
              result.internal_error = internal_error
            rescue ::Liveramp::Types::CidKeyService::NoSuchSecretException => no_such_secret
              result.no_such_secret = no_such_secret
            end
            write_result(result, oprot, 'write_secret_to_nfs', seqid)
          end

          def process_write_md5_of_secret_to_nfs(seqid, iprot, oprot)
            args = read_args(iprot, Write_md5_of_secret_to_nfs_args)
            result = Write_md5_of_secret_to_nfs_result.new()
            begin
              result.success = @handler.write_md5_of_secret_to_nfs(args.secret_id, args.ldap_name)
            rescue ::Liveramp::Types::CidKeyService::AuthException => auth_exception
              result.auth_exception = auth_exception
            rescue ::Liveramp::Types::CidKeyService::CksInternalError => internal_error
              result.internal_error = internal_error
            rescue ::Liveramp::Types::CidKeyService::NoSuchSecretException => no_such_secret
              result.no_such_secret = no_such_secret
            end
            write_result(result, oprot, 'write_md5_of_secret_to_nfs', seqid)
          end

          def process_generate_secret_if_not_exist(seqid, iprot, oprot)
            args = read_args(iprot, Generate_secret_if_not_exist_args)
            result = Generate_secret_if_not_exist_result.new()
            begin
              result.success = @handler.generate_secret_if_not_exist(args.secret_type, args.customer_id, args.ldap_name, args.comments)
            rescue ::Liveramp::Types::CidKeyService::AuthException => auth_exception
              result.auth_exception = auth_exception
            rescue ::Liveramp::Types::CidKeyService::CksInternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'generate_secret_if_not_exist', seqid)
          end

          def process_get_secret_type(seqid, iprot, oprot)
            args = read_args(iprot, Get_secret_type_args)
            result = Get_secret_type_result.new()
            begin
              result.success = @handler.get_secret_type(args.secret_id)
            rescue ::Liveramp::Types::CidKeyService::CksInternalError => internal_error
              result.internal_error = internal_error
            rescue ::Liveramp::Types::CidKeyService::NoSuchSecretException => no_such_secret
              result.no_such_secret = no_such_secret
            end
            write_result(result, oprot, 'get_secret_type', seqid)
          end

          def process_get_secret_if_exists(seqid, iprot, oprot)
            args = read_args(iprot, Get_secret_if_exists_args)
            result = Get_secret_if_exists_result.new()
            begin
              result.success = @handler.get_secret_if_exists(args.secret_type, args.customer_id)
            rescue ::Liveramp::Types::CidKeyService::CksInternalError => internal_error
              result.internal_error = internal_error
            end
            write_result(result, oprot, 'get_secret_if_exists', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Write_secret_to_nfs_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SECRET_ID = 1
          LDAP_NAME = 2

          FIELDS = {
            SECRET_ID => {:type => ::Thrift::Types::I32, :name => 'secret_id'},
            LDAP_NAME => {:type => ::Thrift::Types::STRING, :name => 'ldap_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Write_secret_to_nfs_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          AUTH_EXCEPTION = 1
          INTERNAL_ERROR = 2
          NO_SUCH_SECRET = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            AUTH_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'auth_exception', :class => ::Liveramp::Types::CidKeyService::AuthException},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::CidKeyService::CksInternalError},
            NO_SUCH_SECRET => {:type => ::Thrift::Types::STRUCT, :name => 'no_such_secret', :class => ::Liveramp::Types::CidKeyService::NoSuchSecretException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Write_md5_of_secret_to_nfs_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SECRET_ID = 1
          LDAP_NAME = 2

          FIELDS = {
            SECRET_ID => {:type => ::Thrift::Types::I32, :name => 'secret_id'},
            LDAP_NAME => {:type => ::Thrift::Types::STRING, :name => 'ldap_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Write_md5_of_secret_to_nfs_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          AUTH_EXCEPTION = 1
          INTERNAL_ERROR = 2
          NO_SUCH_SECRET = 3

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            AUTH_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'auth_exception', :class => ::Liveramp::Types::CidKeyService::AuthException},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::CidKeyService::CksInternalError},
            NO_SUCH_SECRET => {:type => ::Thrift::Types::STRUCT, :name => 'no_such_secret', :class => ::Liveramp::Types::CidKeyService::NoSuchSecretException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Generate_secret_if_not_exist_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SECRET_TYPE = 1
          CUSTOMER_ID = 2
          LDAP_NAME = 3
          COMMENTS = 4

          FIELDS = {
            SECRET_TYPE => {:type => ::Thrift::Types::I32, :name => 'secret_type', :enum_class => ::Liveramp::Types::CidKeyService::CidSecretType},
            CUSTOMER_ID => {:type => ::Thrift::Types::I32, :name => 'customer_id'},
            LDAP_NAME => {:type => ::Thrift::Types::STRING, :name => 'ldap_name'},
            COMMENTS => {:type => ::Thrift::Types::STRING, :name => 'comments'}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @secret_type.nil? || ::Liveramp::Types::CidKeyService::CidSecretType::VALID_VALUES.include?(@secret_type)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field secret_type!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Generate_secret_if_not_exist_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          AUTH_EXCEPTION = 1
          INTERNAL_ERROR = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::CidKeyService::SecretCreationResult},
            AUTH_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'auth_exception', :class => ::Liveramp::Types::CidKeyService::AuthException},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::CidKeyService::CksInternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_secret_type_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SECRET_ID = 1

          FIELDS = {
            SECRET_ID => {:type => ::Thrift::Types::I32, :name => 'secret_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_secret_type_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1
          NO_SUCH_SECRET = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::CidKeyService::CidSecretType},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::CidKeyService::CksInternalError},
            NO_SUCH_SECRET => {:type => ::Thrift::Types::STRUCT, :name => 'no_such_secret', :class => ::Liveramp::Types::CidKeyService::NoSuchSecretException}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::CidKeyService::CidSecretType::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_secret_if_exists_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SECRET_TYPE = 1
          CUSTOMER_ID = 2

          FIELDS = {
            SECRET_TYPE => {:type => ::Thrift::Types::I32, :name => 'secret_type', :enum_class => ::Liveramp::Types::CidKeyService::CidSecretType},
            CUSTOMER_ID => {:type => ::Thrift::Types::I32, :name => 'customer_id'}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @secret_type.nil? || ::Liveramp::Types::CidKeyService::CidSecretType::VALID_VALUES.include?(@secret_type)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field secret_type!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_secret_if_exists_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          INTERNAL_ERROR = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::CidKeyService::SecretIdOptional},
            INTERNAL_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'internal_error', :class => ::Liveramp::Types::CidKeyService::CksInternalError}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
