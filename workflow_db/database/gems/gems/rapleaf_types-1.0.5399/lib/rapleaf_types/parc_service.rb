#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'parc_service_types'

module Liveramp
  module Types
    module ParcService
      module ParcService
        class Client
          include ::Thrift::Client

          def create_feed(customer_id, feed_options)
            send_create_feed(customer_id, feed_options)
            return recv_create_feed()
          end

          def send_create_feed(customer_id, feed_options)
            send_message('create_feed', Create_feed_args, :customer_id => customer_id, :feed_options => feed_options)
          end

          def recv_create_feed()
            result = receive_message(Create_feed_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_feed failed: unknown result')
          end

          def get_feed_info(feed_id)
            send_get_feed_info(feed_id)
            return recv_get_feed_info()
          end

          def send_get_feed_info(feed_id)
            send_message('get_feed_info', Get_feed_info_args, :feed_id => feed_id)
          end

          def recv_get_feed_info()
            result = receive_message(Get_feed_info_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_feed_info failed: unknown result')
          end

          def get_feed_infos(feed_ids)
            send_get_feed_infos(feed_ids)
            return recv_get_feed_infos()
          end

          def send_get_feed_infos(feed_ids)
            send_message('get_feed_infos', Get_feed_infos_args, :feed_ids => feed_ids)
          end

          def recv_get_feed_infos()
            result = receive_message(Get_feed_infos_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_feed_infos failed: unknown result')
          end

          def update_feed(feed_id, feed_options)
            send_update_feed(feed_id, feed_options)
            recv_update_feed()
          end

          def send_update_feed(feed_id, feed_options)
            send_message('update_feed', Update_feed_args, :feed_id => feed_id, :feed_options => feed_options)
          end

          def recv_update_feed()
            result = receive_message(Update_feed_result)
            raise result.e unless result.e.nil?
            return
          end

          def get_key_configuration(feed_id)
            send_get_key_configuration(feed_id)
            return recv_get_key_configuration()
          end

          def send_get_key_configuration(feed_id)
            send_message('get_key_configuration', Get_key_configuration_args, :feed_id => feed_id)
          end

          def recv_get_key_configuration()
            result = receive_message(Get_key_configuration_result)
            return result.success unless result.success.nil?
            raise result.feed_not_found unless result.feed_not_found.nil?
            raise result.unsupported_identifier unless result.unsupported_identifier.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_key_configuration failed: unknown result')
          end

          def update_key_configuration(feed_id, key_configuration)
            send_update_key_configuration(feed_id, key_configuration)
            recv_update_key_configuration()
          end

          def send_update_key_configuration(feed_id, key_configuration)
            send_message('update_key_configuration', Update_key_configuration_args, :feed_id => feed_id, :key_configuration => key_configuration)
          end

          def recv_update_key_configuration()
            result = receive_message(Update_key_configuration_result)
            raise result.e1 unless result.e1.nil?
            raise result.e2 unless result.e2.nil?
            raise result.e3 unless result.e3.nil?
            return
          end

          def add_plaintext_keys_to_feed(feed_id, plaintext_keys)
            send_add_plaintext_keys_to_feed(feed_id, plaintext_keys)
            recv_add_plaintext_keys_to_feed()
          end

          def send_add_plaintext_keys_to_feed(feed_id, plaintext_keys)
            send_message('add_plaintext_keys_to_feed', Add_plaintext_keys_to_feed_args, :feed_id => feed_id, :plaintext_keys => plaintext_keys)
          end

          def recv_add_plaintext_keys_to_feed()
            result = receive_message(Add_plaintext_keys_to_feed_result)
            raise result.e unless result.e.nil?
            return
          end

          def store_sample_values(feed_id, values_per_key)
            send_store_sample_values(feed_id, values_per_key)
            recv_store_sample_values()
          end

          def send_store_sample_values(feed_id, values_per_key)
            send_message('store_sample_values', Store_sample_values_args, :feed_id => feed_id, :values_per_key => values_per_key)
          end

          def recv_store_sample_values()
            result = receive_message(Store_sample_values_result)
            raise result.e unless result.e.nil?
            return
          end

          def get_unmapped_keys(feed_id)
            send_get_unmapped_keys(feed_id)
            return recv_get_unmapped_keys()
          end

          def send_get_unmapped_keys(feed_id)
            send_message('get_unmapped_keys', Get_unmapped_keys_args, :feed_id => feed_id)
          end

          def recv_get_unmapped_keys()
            result = receive_message(Get_unmapped_keys_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_unmapped_keys failed: unknown result')
          end

          def list_feeds(customer_id, pagination_params, sort_key)
            send_list_feeds(customer_id, pagination_params, sort_key)
            return recv_list_feeds()
          end

          def send_list_feeds(customer_id, pagination_params, sort_key)
            send_message('list_feeds', List_feeds_args, :customer_id => customer_id, :pagination_params => pagination_params, :sort_key => sort_key)
          end

          def recv_list_feeds()
            result = receive_message(List_feeds_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_feeds failed: unknown result')
          end

          def set_feed_status(feedId, status)
            send_set_feed_status(feedId, status)
            recv_set_feed_status()
          end

          def send_set_feed_status(feedId, status)
            send_message('set_feed_status', Set_feed_status_args, :feedId => feedId, :status => status)
          end

          def recv_set_feed_status()
            result = receive_message(Set_feed_status_result)
            raise result.e unless result.e.nil?
            return
          end

          def add_file(path_to_file, customer_id, uploaded_at)
            send_add_file(path_to_file, customer_id, uploaded_at)
            return recv_add_file()
          end

          def send_add_file(path_to_file, customer_id, uploaded_at)
            send_message('add_file', Add_file_args, :path_to_file => path_to_file, :customer_id => customer_id, :uploaded_at => uploaded_at)
          end

          def recv_add_file()
            result = receive_message(Add_file_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_file failed: unknown result')
          end

          def parse_and_anonymize_file(customer_file_id, file_configuration, parc_options, feed_id)
            send_parse_and_anonymize_file(customer_file_id, file_configuration, parc_options, feed_id)
            return recv_parse_and_anonymize_file()
          end

          def send_parse_and_anonymize_file(customer_file_id, file_configuration, parc_options, feed_id)
            send_message('parse_and_anonymize_file', Parse_and_anonymize_file_args, :customer_file_id => customer_file_id, :file_configuration => file_configuration, :parc_options => parc_options, :feed_id => feed_id)
          end

          def recv_parse_and_anonymize_file()
            result = receive_message(Parse_and_anonymize_file_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'parse_and_anonymize_file failed: unknown result')
          end

          def anonymize_file(customer_file_id, file_configuration, file_preprocessing_output, parc_options, feed_id)
            send_anonymize_file(customer_file_id, file_configuration, file_preprocessing_output, parc_options, feed_id)
            return recv_anonymize_file()
          end

          def send_anonymize_file(customer_file_id, file_configuration, file_preprocessing_output, parc_options, feed_id)
            send_message('anonymize_file', Anonymize_file_args, :customer_file_id => customer_file_id, :file_configuration => file_configuration, :file_preprocessing_output => file_preprocessing_output, :parc_options => parc_options, :feed_id => feed_id)
          end

          def recv_anonymize_file()
            result = receive_message(Anonymize_file_result)
            return result.success unless result.success.nil?
            raise result.e unless result.e.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'anonymize_file failed: unknown result')
          end

          def get_latest_parcs_for_source(feed_id, last_seen_parc_id)
            send_get_latest_parcs_for_source(feed_id, last_seen_parc_id)
            return recv_get_latest_parcs_for_source()
          end

          def send_get_latest_parcs_for_source(feed_id, last_seen_parc_id)
            send_message('get_latest_parcs_for_source', Get_latest_parcs_for_source_args, :feed_id => feed_id, :last_seen_parc_id => last_seen_parc_id)
          end

          def recv_get_latest_parcs_for_source()
            result = receive_message(Get_latest_parcs_for_source_result)
            return result.success unless result.success.nil?
            raise result.parc_not_found unless result.parc_not_found.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_latest_parcs_for_source failed: unknown result')
          end

          def get_parc_summaries(parc_ids)
            send_get_parc_summaries(parc_ids)
            return recv_get_parc_summaries()
          end

          def send_get_parc_summaries(parc_ids)
            send_message('get_parc_summaries', Get_parc_summaries_args, :parc_ids => parc_ids)
          end

          def recv_get_parc_summaries()
            result = receive_message(Get_parc_summaries_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_parc_summaries failed: unknown result')
          end

          def get_path_to_parc(parc_id)
            send_get_path_to_parc(parc_id)
            return recv_get_path_to_parc()
          end

          def send_get_path_to_parc(parc_id)
            send_message('get_path_to_parc', Get_path_to_parc_args, :parc_id => parc_id)
          end

          def recv_get_path_to_parc()
            result = receive_message(Get_path_to_parc_result)
            return result.success unless result.success.nil?
            raise result.parc_not_ready_exception unless result.parc_not_ready_exception.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_path_to_parc failed: unknown result')
          end

          def get_status(parc_id)
            send_get_status(parc_id)
            return recv_get_status()
          end

          def send_get_status(parc_id)
            send_message('get_status', Get_status_args, :parc_id => parc_id)
          end

          def recv_get_status()
            result = receive_message(Get_status_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_status failed: unknown result')
          end

          def get_statuses(parc_ids)
            send_get_statuses(parc_ids)
            return recv_get_statuses()
          end

          def send_get_statuses(parc_ids)
            send_message('get_statuses', Get_statuses_args, :parc_ids => parc_ids)
          end

          def recv_get_statuses()
            result = receive_message(Get_statuses_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_statuses failed: unknown result')
          end

          def get_file_specs(parc_ids)
            send_get_file_specs(parc_ids)
            return recv_get_file_specs()
          end

          def send_get_file_specs(parc_ids)
            send_message('get_file_specs', Get_file_specs_args, :parc_ids => parc_ids)
          end

          def recv_get_file_specs()
            result = receive_message(Get_file_specs_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_file_specs failed: unknown result')
          end

          def get_file_spec(parc_id)
            send_get_file_spec(parc_id)
            return recv_get_file_spec()
          end

          def send_get_file_spec(parc_id)
            send_message('get_file_spec', Get_file_spec_args, :parc_id => parc_id)
          end

          def recv_get_file_spec()
            result = receive_message(Get_file_spec_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_file_spec failed: unknown result')
          end

          def create_attribute(create_attribute)
            send_create_attribute(create_attribute)
            return recv_create_attribute()
          end

          def send_create_attribute(create_attribute)
            send_message('create_attribute', Create_attribute_args, :create_attribute => create_attribute)
          end

          def recv_create_attribute()
            result = receive_message(Create_attribute_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_attribute failed: unknown result')
          end

          def add_values_for_attributes(attribute_to_values)
            send_add_values_for_attributes(attribute_to_values)
            recv_add_values_for_attributes()
          end

          def send_add_values_for_attributes(attribute_to_values)
            send_message('add_values_for_attributes', Add_values_for_attributes_args, :attribute_to_values => attribute_to_values)
          end

          def recv_add_values_for_attributes()
            result = receive_message(Add_values_for_attributes_result)
            raise result.pe unless result.pe.nil?
            return
          end

          def link_attributes_for_keys(attribute_creation_from_keys_params)
            send_link_attributes_for_keys(attribute_creation_from_keys_params)
            return recv_link_attributes_for_keys()
          end

          def send_link_attributes_for_keys(attribute_creation_from_keys_params)
            send_message('link_attributes_for_keys', Link_attributes_for_keys_args, :attribute_creation_from_keys_params => attribute_creation_from_keys_params)
          end

          def recv_link_attributes_for_keys()
            result = receive_message(Link_attributes_for_keys_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'link_attributes_for_keys failed: unknown result')
          end

          def create_or_link_attributes(feed_id, attribute_desciptions)
            send_create_or_link_attributes(feed_id, attribute_desciptions)
            recv_create_or_link_attributes()
          end

          def send_create_or_link_attributes(feed_id, attribute_desciptions)
            send_message('create_or_link_attributes', Create_or_link_attributes_args, :feed_id => feed_id, :attribute_desciptions => attribute_desciptions)
          end

          def recv_create_or_link_attributes()
            result = receive_message(Create_or_link_attributes_result)
            raise result.e unless result.e.nil?
            return
          end

          def list_attributes(customer_id)
            send_list_attributes(customer_id)
            return recv_list_attributes()
          end

          def send_list_attributes(customer_id)
            send_message('list_attributes', List_attributes_args, :customer_id => customer_id)
          end

          def recv_list_attributes()
            result = receive_message(List_attributes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_attributes failed: unknown result')
          end

          def get_attributes_for_ids(attribute_ids)
            send_get_attributes_for_ids(attribute_ids)
            return recv_get_attributes_for_ids()
          end

          def send_get_attributes_for_ids(attribute_ids)
            send_message('get_attributes_for_ids', Get_attributes_for_ids_args, :attribute_ids => attribute_ids)
          end

          def recv_get_attributes_for_ids()
            result = receive_message(Get_attributes_for_ids_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_attributes_for_ids failed: unknown result')
          end

          def get_source_keys(feed_id)
            send_get_source_keys(feed_id)
            return recv_get_source_keys()
          end

          def send_get_source_keys(feed_id)
            send_message('get_source_keys', Get_source_keys_args, :feed_id => feed_id)
          end

          def recv_get_source_keys()
            result = receive_message(Get_source_keys_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_source_keys failed: unknown result')
          end

          def get_attributes_for_keys(customer_id, feed_id, keys)
            send_get_attributes_for_keys(customer_id, feed_id, keys)
            return recv_get_attributes_for_keys()
          end

          def send_get_attributes_for_keys(customer_id, feed_id, keys)
            send_message('get_attributes_for_keys', Get_attributes_for_keys_args, :customer_id => customer_id, :feed_id => feed_id, :keys => keys)
          end

          def recv_get_attributes_for_keys()
            result = receive_message(Get_attributes_for_keys_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_attributes_for_keys failed: unknown result')
          end

          def get_attributes_for_keys_in_feed(feed_id, keys)
            send_get_attributes_for_keys_in_feed(feed_id, keys)
            return recv_get_attributes_for_keys_in_feed()
          end

          def send_get_attributes_for_keys_in_feed(feed_id, keys)
            send_message('get_attributes_for_keys_in_feed', Get_attributes_for_keys_in_feed_args, :feed_id => feed_id, :keys => keys)
          end

          def recv_get_attributes_for_keys_in_feed()
            result = receive_message(Get_attributes_for_keys_in_feed_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_attributes_for_keys_in_feed failed: unknown result')
          end

          def get_attributes_for_feed(feed_id)
            send_get_attributes_for_feed(feed_id)
            return recv_get_attributes_for_feed()
          end

          def send_get_attributes_for_feed(feed_id)
            send_message('get_attributes_for_feed', Get_attributes_for_feed_args, :feed_id => feed_id)
          end

          def recv_get_attributes_for_feed()
            result = receive_message(Get_attributes_for_feed_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_attributes_for_feed failed: unknown result')
          end

          def get_parc_configuration_infos(parc_id)
            send_get_parc_configuration_infos(parc_id)
            return recv_get_parc_configuration_infos()
          end

          def send_get_parc_configuration_infos(parc_id)
            send_message('get_parc_configuration_infos', Get_parc_configuration_infos_args, :parc_id => parc_id)
          end

          def recv_get_parc_configuration_infos()
            result = receive_message(Get_parc_configuration_infos_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_parc_configuration_infos failed: unknown result')
          end

          def get_lrc_fields(parc_id)
            send_get_lrc_fields(parc_id)
            return recv_get_lrc_fields()
          end

          def send_get_lrc_fields(parc_id)
            send_message('get_lrc_fields', Get_lrc_fields_args, :parc_id => parc_id)
          end

          def recv_get_lrc_fields()
            result = receive_message(Get_lrc_fields_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_lrc_fields failed: unknown result')
          end

          def get_available_anas_for_cookie_identifiers()
            send_get_available_anas_for_cookie_identifiers()
            return recv_get_available_anas_for_cookie_identifiers()
          end

          def send_get_available_anas_for_cookie_identifiers()
            send_message('get_available_anas_for_cookie_identifiers', Get_available_anas_for_cookie_identifiers_args)
          end

          def recv_get_available_anas_for_cookie_identifiers()
            result = receive_message(Get_available_anas_for_cookie_identifiers_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_available_anas_for_cookie_identifiers failed: unknown result')
          end

          def list_files_for_feed(feed_id, pagination_params, sort_type)
            send_list_files_for_feed(feed_id, pagination_params, sort_type)
            return recv_list_files_for_feed()
          end

          def send_list_files_for_feed(feed_id, pagination_params, sort_type)
            send_message('list_files_for_feed', List_files_for_feed_args, :feed_id => feed_id, :pagination_params => pagination_params, :sort_type => sort_type)
          end

          def recv_list_files_for_feed()
            result = receive_message(List_files_for_feed_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_files_for_feed failed: unknown result')
          end

          def list_files_for_parc_ids(parc_id, sort_type)
            send_list_files_for_parc_ids(parc_id, sort_type)
            return recv_list_files_for_parc_ids()
          end

          def send_list_files_for_parc_ids(parc_id, sort_type)
            send_message('list_files_for_parc_ids', List_files_for_parc_ids_args, :parc_id => parc_id, :sort_type => sort_type)
          end

          def recv_list_files_for_parc_ids()
            result = receive_message(List_files_for_parc_ids_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_files_for_parc_ids failed: unknown result')
          end

          def get_parc_summary_for_lir(liveramp_import_request)
            send_get_parc_summary_for_lir(liveramp_import_request)
            return recv_get_parc_summary_for_lir()
          end

          def send_get_parc_summary_for_lir(liveramp_import_request)
            send_message('get_parc_summary_for_lir', Get_parc_summary_for_lir_args, :liveramp_import_request => liveramp_import_request)
          end

          def recv_get_parc_summary_for_lir()
            result = receive_message(Get_parc_summary_for_lir_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_parc_summary_for_lir failed: unknown result')
          end

          def get_available_data_legacy(audience_id)
            send_get_available_data_legacy(audience_id)
            return recv_get_available_data_legacy()
          end

          def send_get_available_data_legacy(audience_id)
            send_message('get_available_data_legacy', Get_available_data_legacy_args, :audience_id => audience_id)
          end

          def recv_get_available_data_legacy()
            result = receive_message(Get_available_data_legacy_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_available_data_legacy failed: unknown result')
          end

          def get_configured_data_keys_legacy(parc_id)
            send_get_configured_data_keys_legacy(parc_id)
            return recv_get_configured_data_keys_legacy()
          end

          def send_get_configured_data_keys_legacy(parc_id)
            send_message('get_configured_data_keys_legacy', Get_configured_data_keys_legacy_args, :parc_id => parc_id)
          end

          def recv_get_configured_data_keys_legacy()
            result = receive_message(Get_configured_data_keys_legacy_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_configured_data_keys_legacy failed: unknown result')
          end

          def create_feed_for_lca(name, customer_id, legacy_liveramp_customer_account)
            send_create_feed_for_lca(name, customer_id, legacy_liveramp_customer_account)
            return recv_create_feed_for_lca()
          end

          def send_create_feed_for_lca(name, customer_id, legacy_liveramp_customer_account)
            send_message('create_feed_for_lca', Create_feed_for_lca_args, :name => name, :customer_id => customer_id, :legacy_liveramp_customer_account => legacy_liveramp_customer_account)
          end

          def recv_create_feed_for_lca()
            result = receive_message(Create_feed_for_lca_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_feed_for_lca failed: unknown result')
          end

          def get_feeds_for_lca(lca_id)
            send_get_feeds_for_lca(lca_id)
            return recv_get_feeds_for_lca()
          end

          def send_get_feeds_for_lca(lca_id)
            send_message('get_feeds_for_lca', Get_feeds_for_lca_args, :lca_id => lca_id)
          end

          def recv_get_feeds_for_lca()
            result = receive_message(Get_feeds_for_lca_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_feeds_for_lca failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_create_feed(seqid, iprot, oprot)
            args = read_args(iprot, Create_feed_args)
            result = Create_feed_result.new()
            result.success = @handler.create_feed(args.customer_id, args.feed_options)
            write_result(result, oprot, 'create_feed', seqid)
          end

          def process_get_feed_info(seqid, iprot, oprot)
            args = read_args(iprot, Get_feed_info_args)
            result = Get_feed_info_result.new()
            begin
              result.success = @handler.get_feed_info(args.feed_id)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e
              result.e = e
            end
            write_result(result, oprot, 'get_feed_info', seqid)
          end

          def process_get_feed_infos(seqid, iprot, oprot)
            args = read_args(iprot, Get_feed_infos_args)
            result = Get_feed_infos_result.new()
            begin
              result.success = @handler.get_feed_infos(args.feed_ids)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e
              result.e = e
            end
            write_result(result, oprot, 'get_feed_infos', seqid)
          end

          def process_update_feed(seqid, iprot, oprot)
            args = read_args(iprot, Update_feed_args)
            result = Update_feed_result.new()
            begin
              @handler.update_feed(args.feed_id, args.feed_options)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e
              result.e = e
            end
            write_result(result, oprot, 'update_feed', seqid)
          end

          def process_get_key_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Get_key_configuration_args)
            result = Get_key_configuration_result.new()
            begin
              result.success = @handler.get_key_configuration(args.feed_id)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => feed_not_found
              result.feed_not_found = feed_not_found
            rescue ::Liveramp::Types::ParcService::UnsupportedIdentifierConfigException => unsupported_identifier
              result.unsupported_identifier = unsupported_identifier
            end
            write_result(result, oprot, 'get_key_configuration', seqid)
          end

          def process_update_key_configuration(seqid, iprot, oprot)
            args = read_args(iprot, Update_key_configuration_args)
            result = Update_key_configuration_result.new()
            begin
              @handler.update_key_configuration(args.feed_id, args.key_configuration)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e1
              result.e1 = e1
            rescue ::Liveramp::Types::ParcService::UnsupportedIdentifierConfigException => e2
              result.e2 = e2
            rescue ::Liveramp::Types::ParcService::KeyConfigUpdateException => e3
              result.e3 = e3
            end
            write_result(result, oprot, 'update_key_configuration', seqid)
          end

          def process_add_plaintext_keys_to_feed(seqid, iprot, oprot)
            args = read_args(iprot, Add_plaintext_keys_to_feed_args)
            result = Add_plaintext_keys_to_feed_result.new()
            begin
              @handler.add_plaintext_keys_to_feed(args.feed_id, args.plaintext_keys)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e
              result.e = e
            end
            write_result(result, oprot, 'add_plaintext_keys_to_feed', seqid)
          end

          def process_store_sample_values(seqid, iprot, oprot)
            args = read_args(iprot, Store_sample_values_args)
            result = Store_sample_values_result.new()
            begin
              @handler.store_sample_values(args.feed_id, args.values_per_key)
            rescue ::Liveramp::Util::InputOutputException => e
              result.e = e
            end
            write_result(result, oprot, 'store_sample_values', seqid)
          end

          def process_get_unmapped_keys(seqid, iprot, oprot)
            args = read_args(iprot, Get_unmapped_keys_args)
            result = Get_unmapped_keys_result.new()
            begin
              result.success = @handler.get_unmapped_keys(args.feed_id)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e
              result.e = e
            end
            write_result(result, oprot, 'get_unmapped_keys', seqid)
          end

          def process_list_feeds(seqid, iprot, oprot)
            args = read_args(iprot, List_feeds_args)
            result = List_feeds_result.new()
            result.success = @handler.list_feeds(args.customer_id, args.pagination_params, args.sort_key)
            write_result(result, oprot, 'list_feeds', seqid)
          end

          def process_set_feed_status(seqid, iprot, oprot)
            args = read_args(iprot, Set_feed_status_args)
            result = Set_feed_status_result.new()
            begin
              @handler.set_feed_status(args.feedId, args.status)
            rescue ::Liveramp::Types::ParcService::FeedNotFoundException => e
              result.e = e
            end
            write_result(result, oprot, 'set_feed_status', seqid)
          end

          def process_add_file(seqid, iprot, oprot)
            args = read_args(iprot, Add_file_args)
            result = Add_file_result.new()
            result.success = @handler.add_file(args.path_to_file, args.customer_id, args.uploaded_at)
            write_result(result, oprot, 'add_file', seqid)
          end

          def process_parse_and_anonymize_file(seqid, iprot, oprot)
            args = read_args(iprot, Parse_and_anonymize_file_args)
            result = Parse_and_anonymize_file_result.new()
            begin
              result.success = @handler.parse_and_anonymize_file(args.customer_file_id, args.file_configuration, args.parc_options, args.feed_id)
            rescue ::Liveramp::Types::ParcService::InvalidConfigurationException => e
              result.e = e
            end
            write_result(result, oprot, 'parse_and_anonymize_file', seqid)
          end

          def process_anonymize_file(seqid, iprot, oprot)
            args = read_args(iprot, Anonymize_file_args)
            result = Anonymize_file_result.new()
            begin
              result.success = @handler.anonymize_file(args.customer_file_id, args.file_configuration, args.file_preprocessing_output, args.parc_options, args.feed_id)
            rescue ::Liveramp::Types::ParcService::InvalidConfigurationException => e
              result.e = e
            end
            write_result(result, oprot, 'anonymize_file', seqid)
          end

          def process_get_latest_parcs_for_source(seqid, iprot, oprot)
            args = read_args(iprot, Get_latest_parcs_for_source_args)
            result = Get_latest_parcs_for_source_result.new()
            begin
              result.success = @handler.get_latest_parcs_for_source(args.feed_id, args.last_seen_parc_id)
            rescue ::Liveramp::Types::ParcService::ParcNotFoundException => parc_not_found
              result.parc_not_found = parc_not_found
            end
            write_result(result, oprot, 'get_latest_parcs_for_source', seqid)
          end

          def process_get_parc_summaries(seqid, iprot, oprot)
            args = read_args(iprot, Get_parc_summaries_args)
            result = Get_parc_summaries_result.new()
            result.success = @handler.get_parc_summaries(args.parc_ids)
            write_result(result, oprot, 'get_parc_summaries', seqid)
          end

          def process_get_path_to_parc(seqid, iprot, oprot)
            args = read_args(iprot, Get_path_to_parc_args)
            result = Get_path_to_parc_result.new()
            begin
              result.success = @handler.get_path_to_parc(args.parc_id)
            rescue ::Liveramp::Types::ParcService::ParcNotReadyException => parc_not_ready_exception
              result.parc_not_ready_exception = parc_not_ready_exception
            end
            write_result(result, oprot, 'get_path_to_parc', seqid)
          end

          def process_get_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_status_args)
            result = Get_status_result.new()
            result.success = @handler.get_status(args.parc_id)
            write_result(result, oprot, 'get_status', seqid)
          end

          def process_get_statuses(seqid, iprot, oprot)
            args = read_args(iprot, Get_statuses_args)
            result = Get_statuses_result.new()
            result.success = @handler.get_statuses(args.parc_ids)
            write_result(result, oprot, 'get_statuses', seqid)
          end

          def process_get_file_specs(seqid, iprot, oprot)
            args = read_args(iprot, Get_file_specs_args)
            result = Get_file_specs_result.new()
            result.success = @handler.get_file_specs(args.parc_ids)
            write_result(result, oprot, 'get_file_specs', seqid)
          end

          def process_get_file_spec(seqid, iprot, oprot)
            args = read_args(iprot, Get_file_spec_args)
            result = Get_file_spec_result.new()
            result.success = @handler.get_file_spec(args.parc_id)
            write_result(result, oprot, 'get_file_spec', seqid)
          end

          def process_create_attribute(seqid, iprot, oprot)
            args = read_args(iprot, Create_attribute_args)
            result = Create_attribute_result.new()
            result.success = @handler.create_attribute(args.create_attribute)
            write_result(result, oprot, 'create_attribute', seqid)
          end

          def process_add_values_for_attributes(seqid, iprot, oprot)
            args = read_args(iprot, Add_values_for_attributes_args)
            result = Add_values_for_attributes_result.new()
            begin
              @handler.add_values_for_attributes(args.attribute_to_values)
            rescue ::Liveramp::Types::ParcService::ParcException => pe
              result.pe = pe
            end
            write_result(result, oprot, 'add_values_for_attributes', seqid)
          end

          def process_link_attributes_for_keys(seqid, iprot, oprot)
            args = read_args(iprot, Link_attributes_for_keys_args)
            result = Link_attributes_for_keys_result.new()
            result.success = @handler.link_attributes_for_keys(args.attribute_creation_from_keys_params)
            write_result(result, oprot, 'link_attributes_for_keys', seqid)
          end

          def process_create_or_link_attributes(seqid, iprot, oprot)
            args = read_args(iprot, Create_or_link_attributes_args)
            result = Create_or_link_attributes_result.new()
            begin
              @handler.create_or_link_attributes(args.feed_id, args.attribute_desciptions)
            rescue ::Liveramp::Util::InputOutputException => e
              result.e = e
            end
            write_result(result, oprot, 'create_or_link_attributes', seqid)
          end

          def process_list_attributes(seqid, iprot, oprot)
            args = read_args(iprot, List_attributes_args)
            result = List_attributes_result.new()
            result.success = @handler.list_attributes(args.customer_id)
            write_result(result, oprot, 'list_attributes', seqid)
          end

          def process_get_attributes_for_ids(seqid, iprot, oprot)
            args = read_args(iprot, Get_attributes_for_ids_args)
            result = Get_attributes_for_ids_result.new()
            result.success = @handler.get_attributes_for_ids(args.attribute_ids)
            write_result(result, oprot, 'get_attributes_for_ids', seqid)
          end

          def process_get_source_keys(seqid, iprot, oprot)
            args = read_args(iprot, Get_source_keys_args)
            result = Get_source_keys_result.new()
            result.success = @handler.get_source_keys(args.feed_id)
            write_result(result, oprot, 'get_source_keys', seqid)
          end

          def process_get_attributes_for_keys(seqid, iprot, oprot)
            args = read_args(iprot, Get_attributes_for_keys_args)
            result = Get_attributes_for_keys_result.new()
            result.success = @handler.get_attributes_for_keys(args.customer_id, args.feed_id, args.keys)
            write_result(result, oprot, 'get_attributes_for_keys', seqid)
          end

          def process_get_attributes_for_keys_in_feed(seqid, iprot, oprot)
            args = read_args(iprot, Get_attributes_for_keys_in_feed_args)
            result = Get_attributes_for_keys_in_feed_result.new()
            result.success = @handler.get_attributes_for_keys_in_feed(args.feed_id, args.keys)
            write_result(result, oprot, 'get_attributes_for_keys_in_feed', seqid)
          end

          def process_get_attributes_for_feed(seqid, iprot, oprot)
            args = read_args(iprot, Get_attributes_for_feed_args)
            result = Get_attributes_for_feed_result.new()
            result.success = @handler.get_attributes_for_feed(args.feed_id)
            write_result(result, oprot, 'get_attributes_for_feed', seqid)
          end

          def process_get_parc_configuration_infos(seqid, iprot, oprot)
            args = read_args(iprot, Get_parc_configuration_infos_args)
            result = Get_parc_configuration_infos_result.new()
            result.success = @handler.get_parc_configuration_infos(args.parc_id)
            write_result(result, oprot, 'get_parc_configuration_infos', seqid)
          end

          def process_get_lrc_fields(seqid, iprot, oprot)
            args = read_args(iprot, Get_lrc_fields_args)
            result = Get_lrc_fields_result.new()
            result.success = @handler.get_lrc_fields(args.parc_id)
            write_result(result, oprot, 'get_lrc_fields', seqid)
          end

          def process_get_available_anas_for_cookie_identifiers(seqid, iprot, oprot)
            args = read_args(iprot, Get_available_anas_for_cookie_identifiers_args)
            result = Get_available_anas_for_cookie_identifiers_result.new()
            result.success = @handler.get_available_anas_for_cookie_identifiers()
            write_result(result, oprot, 'get_available_anas_for_cookie_identifiers', seqid)
          end

          def process_list_files_for_feed(seqid, iprot, oprot)
            args = read_args(iprot, List_files_for_feed_args)
            result = List_files_for_feed_result.new()
            result.success = @handler.list_files_for_feed(args.feed_id, args.pagination_params, args.sort_type)
            write_result(result, oprot, 'list_files_for_feed', seqid)
          end

          def process_list_files_for_parc_ids(seqid, iprot, oprot)
            args = read_args(iprot, List_files_for_parc_ids_args)
            result = List_files_for_parc_ids_result.new()
            result.success = @handler.list_files_for_parc_ids(args.parc_id, args.sort_type)
            write_result(result, oprot, 'list_files_for_parc_ids', seqid)
          end

          def process_get_parc_summary_for_lir(seqid, iprot, oprot)
            args = read_args(iprot, Get_parc_summary_for_lir_args)
            result = Get_parc_summary_for_lir_result.new()
            result.success = @handler.get_parc_summary_for_lir(args.liveramp_import_request)
            write_result(result, oprot, 'get_parc_summary_for_lir', seqid)
          end

          def process_get_available_data_legacy(seqid, iprot, oprot)
            args = read_args(iprot, Get_available_data_legacy_args)
            result = Get_available_data_legacy_result.new()
            result.success = @handler.get_available_data_legacy(args.audience_id)
            write_result(result, oprot, 'get_available_data_legacy', seqid)
          end

          def process_get_configured_data_keys_legacy(seqid, iprot, oprot)
            args = read_args(iprot, Get_configured_data_keys_legacy_args)
            result = Get_configured_data_keys_legacy_result.new()
            result.success = @handler.get_configured_data_keys_legacy(args.parc_id)
            write_result(result, oprot, 'get_configured_data_keys_legacy', seqid)
          end

          def process_create_feed_for_lca(seqid, iprot, oprot)
            args = read_args(iprot, Create_feed_for_lca_args)
            result = Create_feed_for_lca_result.new()
            result.success = @handler.create_feed_for_lca(args.name, args.customer_id, args.legacy_liveramp_customer_account)
            write_result(result, oprot, 'create_feed_for_lca', seqid)
          end

          def process_get_feeds_for_lca(seqid, iprot, oprot)
            args = read_args(iprot, Get_feeds_for_lca_args)
            result = Get_feeds_for_lca_result.new()
            result.success = @handler.get_feeds_for_lca(args.lca_id)
            write_result(result, oprot, 'get_feeds_for_lca', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Create_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_ID = 1
          FEED_OPTIONS = 2

          FIELDS = {
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            FEED_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'feed_options', :class => ::Liveramp::Types::ParcService::FeedOptions}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::FeedInfo}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feed_info_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feed_info_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::FeedInfo},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::FeedNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feed_infos_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_IDS = 1

          FIELDS = {
            FEED_IDS => {:type => ::Thrift::Types::SET, :name => 'feed_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feed_infos_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::FeedInfo}},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::FeedNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          FEED_OPTIONS = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            FEED_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'feed_options', :class => ::Liveramp::Types::ParcService::FeedOptions}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::FeedNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_key_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_key_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          FEED_NOT_FOUND = 1
          UNSUPPORTED_IDENTIFIER = 2

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::KeyConfiguration},
            FEED_NOT_FOUND => {:type => ::Thrift::Types::STRUCT, :name => 'feed_not_found', :class => ::Liveramp::Types::ParcService::FeedNotFoundException},
            UNSUPPORTED_IDENTIFIER => {:type => ::Thrift::Types::STRUCT, :name => 'unsupported_identifier', :class => ::Liveramp::Types::ParcService::UnsupportedIdentifierConfigException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_key_configuration_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          KEY_CONFIGURATION = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            KEY_CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'key_configuration', :class => ::Liveramp::Types::ParcService::KeyConfiguration}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_key_configuration_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E1 = 1
          E2 = 2
          E3 = 3

          FIELDS = {
            E1 => {:type => ::Thrift::Types::STRUCT, :name => 'e1', :class => ::Liveramp::Types::ParcService::FeedNotFoundException},
            E2 => {:type => ::Thrift::Types::STRUCT, :name => 'e2', :class => ::Liveramp::Types::ParcService::UnsupportedIdentifierConfigException},
            E3 => {:type => ::Thrift::Types::STRUCT, :name => 'e3', :class => ::Liveramp::Types::ParcService::KeyConfigUpdateException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_plaintext_keys_to_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          PLAINTEXT_KEYS = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            PLAINTEXT_KEYS => {:type => ::Thrift::Types::SET, :name => 'plaintext_keys', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_plaintext_keys_to_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::FeedNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Store_sample_values_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          VALUES_PER_KEY = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            VALUES_PER_KEY => {:type => ::Thrift::Types::MAP, :name => 'values_per_key', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRING}}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Store_sample_values_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Util::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_unmapped_keys_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_unmapped_keys_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::KeyConfiguration},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::FeedNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_feeds_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_ID = 1
          PAGINATION_PARAMS = 2
          SORT_KEY = 3

          FIELDS = {
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::Liveramp::Ui::Common::PaginationParams},
            SORT_KEY => {:type => ::Thrift::Types::I32, :name => 'sort_key', :enum_class => ::Liveramp::Types::ParcService::SortKey}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @sort_key.nil? || ::Liveramp::Types::ParcService::SortKey::VALID_VALUES.include?(@sort_key)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_key!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_feeds_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::FeedInfo}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_feed_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEEDID = 1
          STATUS = 2

          FIELDS = {
            FEEDID => {:type => ::Thrift::Types::I64, :name => 'feedId'},
            STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::Types::ParcService::InputDataFeedStatus}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @status.nil? || ::Liveramp::Types::ParcService::InputDataFeedStatus::VALID_VALUES.include?(@status)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Set_feed_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::FeedNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_file_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PATH_TO_FILE = 1
          CUSTOMER_ID = 2
          UPLOADED_AT = 3

          FIELDS = {
            PATH_TO_FILE => {:type => ::Thrift::Types::STRING, :name => 'path_to_file'},
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            UPLOADED_AT => {:type => ::Thrift::Types::I64, :name => 'uploaded_at'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_file_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Parse_and_anonymize_file_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_FILE_ID = 1
          FILE_CONFIGURATION = 2
          PARC_OPTIONS = 3
          FEED_ID = 4

          FIELDS = {
            CUSTOMER_FILE_ID => {:type => ::Thrift::Types::I64, :name => 'customer_file_id'},
            FILE_CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'file_configuration', :class => ::Liveramp::Types::ParcService::FileConfiguration},
            PARC_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'parc_options', :class => ::Liveramp::Types::ParcService::ParcOptions},
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Parse_and_anonymize_file_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::InvalidConfigurationException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Anonymize_file_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_FILE_ID = 1
          FILE_CONFIGURATION = 2
          FILE_PREPROCESSING_OUTPUT = 3
          PARC_OPTIONS = 4
          FEED_ID = 5

          FIELDS = {
            CUSTOMER_FILE_ID => {:type => ::Thrift::Types::I64, :name => 'customer_file_id'},
            FILE_CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'file_configuration', :class => ::Liveramp::Types::ParcService::FileConfiguration},
            FILE_PREPROCESSING_OUTPUT => {:type => ::Thrift::Types::STRUCT, :name => 'file_preprocessing_output', :class => ::Liveramp::Types::ParcService::FilePreprocessingOutput},
            PARC_OPTIONS => {:type => ::Thrift::Types::STRUCT, :name => 'parc_options', :class => ::Liveramp::Types::ParcService::ParcOptions},
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Anonymize_file_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          E = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Types::ParcService::InvalidConfigurationException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_latest_parcs_for_source_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          LAST_SEEN_PARC_ID = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            LAST_SEEN_PARC_ID => {:type => ::Thrift::Types::I64, :name => 'last_seen_parc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_latest_parcs_for_source_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          PARC_NOT_FOUND = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
            PARC_NOT_FOUND => {:type => ::Thrift::Types::STRUCT, :name => 'parc_not_found', :class => ::Liveramp::Types::ParcService::ParcNotFoundException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_parc_summaries_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_IDS = 1

          FIELDS = {
            PARC_IDS => {:type => ::Thrift::Types::SET, :name => 'parc_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_parc_summaries_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::ParcSummary}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_path_to_parc_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::I64, :name => 'parc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_path_to_parc_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          PARC_NOT_READY_EXCEPTION = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            PARC_NOT_READY_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'parc_not_ready_exception', :class => ::Liveramp::Types::ParcService::ParcNotReadyException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::I64, :name => 'parc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::ParcService::ParcStatus}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::ParcService::ParcStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_statuses_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_IDS = 1

          FIELDS = {
            PARC_IDS => {:type => ::Thrift::Types::SET, :name => 'parc_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_statuses_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::Types::ParcService::ParcStatus}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_file_specs_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_IDS = 1

          FIELDS = {
            PARC_IDS => {:type => ::Thrift::Types::SET, :name => 'parc_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_file_specs_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FileSpec}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_file_spec_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::I64, :name => 'parc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_file_spec_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Rapleaf::ImporterService::FileSpec}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_attribute_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CREATE_ATTRIBUTE = 1

          FIELDS = {
            CREATE_ATTRIBUTE => {:type => ::Thrift::Types::STRUCT, :name => 'create_attribute', :class => ::Liveramp::Types::ParcService::CreateAttribute}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_attribute_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_values_for_attributes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ATTRIBUTE_TO_VALUES = 1

          FIELDS = {
            ATTRIBUTE_TO_VALUES => {:type => ::Thrift::Types::MAP, :name => 'attribute_to_values', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::AttributeValue}}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Add_values_for_attributes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PE = 1

          FIELDS = {
            PE => {:type => ::Thrift::Types::STRUCT, :name => 'pe', :class => ::Liveramp::Types::ParcService::ParcException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Link_attributes_for_keys_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ATTRIBUTE_CREATION_FROM_KEYS_PARAMS = 1

          FIELDS = {
            ATTRIBUTE_CREATION_FROM_KEYS_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'attribute_creation_from_keys_params', :class => ::Liveramp::Types::ParcService::AttributeCreationFromKeysParams}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Link_attributes_for_keys_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_or_link_attributes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          ATTRIBUTE_DESCIPTIONS = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            ATTRIBUTE_DESCIPTIONS => {:type => ::Thrift::Types::SET, :name => 'attribute_desciptions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::AttributeDescription}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_or_link_attributes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          E = 1

          FIELDS = {
            E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Liveramp::Util::InputOutputException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_attributes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_ID = 1

          FIELDS = {
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_attributes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::Attribute}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_ids_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ATTRIBUTE_IDS = 1

          FIELDS = {
            ATTRIBUTE_IDS => {:type => ::Thrift::Types::SET, :name => 'attribute_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_ids_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::Attribute}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_source_keys_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_source_keys_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_keys_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CUSTOMER_ID = 1
          FEED_ID = 2
          KEYS = 3

          FIELDS = {
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            KEYS => {:type => ::Thrift::Types::SET, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_keys_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_keys_in_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          KEYS = 2

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            KEYS => {:type => ::Thrift::Types::SET, :name => 'keys', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_keys_in_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_attributes_for_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_parc_configuration_infos_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::SET, :name => 'parc_id', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_parc_configuration_infos_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::ParcConfigurationInfo}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_lrc_fields_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::I64, :name => 'parc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_lrc_fields_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_available_anas_for_cookie_identifiers_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_available_anas_for_cookie_identifiers_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::ParcService::AnaDescription}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_files_for_feed_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FEED_ID = 1
          PAGINATION_PARAMS = 2
          SORT_TYPE = 3

          FIELDS = {
            FEED_ID => {:type => ::Thrift::Types::I64, :name => 'feed_id'},
            PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::Liveramp::Ui::Common::PaginationParams},
            SORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'sort_type', :enum_class => ::Liveramp::Types::ParcService::FileInfoSortType}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @sort_type.nil? || ::Liveramp::Types::ParcService::FileInfoSortType::VALID_VALUES.include?(@sort_type)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_type!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_files_for_feed_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::FileInfoResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_files_for_parc_ids_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1
          SORT_TYPE = 2

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::SET, :name => 'parc_id', :element => {:type => ::Thrift::Types::I64}},
            SORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'sort_type', :enum_class => ::Liveramp::Types::ParcService::FileInfoSortType}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @sort_type.nil? || ::Liveramp::Types::ParcService::FileInfoSortType::VALID_VALUES.include?(@sort_type)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_type!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_files_for_parc_ids_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::FileInfoResponse}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_parc_summary_for_lir_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LIVERAMP_IMPORT_REQUEST = 1

          FIELDS = {
            LIVERAMP_IMPORT_REQUEST => {:type => ::Thrift::Types::I64, :name => 'liveramp_import_request'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_parc_summary_for_lir_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::ParcSummary}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_available_data_legacy_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUDIENCE_ID = 1

          FIELDS = {
            AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_available_data_legacy_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::DataAvailabilitySummary}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_configured_data_keys_legacy_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          PARC_ID = 1

          FIELDS = {
            PARC_ID => {:type => ::Thrift::Types::I64, :name => 'parc_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_configured_data_keys_legacy_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::ParcService::LegacyConfiguredDataKeys}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_feed_for_lca_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NAME = 1
          CUSTOMER_ID = 2
          LEGACY_LIVERAMP_CUSTOMER_ACCOUNT = 3

          FIELDS = {
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
            CUSTOMER_ID => {:type => ::Thrift::Types::I64, :name => 'customer_id'},
            LEGACY_LIVERAMP_CUSTOMER_ACCOUNT => {:type => ::Thrift::Types::I64, :name => 'legacy_liveramp_customer_account'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_feed_for_lca_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feeds_for_lca_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          LCA_ID = 1

          FIELDS = {
            LCA_ID => {:type => ::Thrift::Types::I64, :name => 'lca_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_feeds_for_lca_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
