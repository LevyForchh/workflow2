#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'translator_enums_types'


module Liveramp
  module DocIds
    module MaintainedDocType
      ENTITY = 0
      PERSON = 1
      VALUE_MAP = {0 => "ENTITY", 1 => "PERSON"}
      VALID_VALUES = Set.new([ENTITY, PERSON]).freeze
    end

    class PiiDoc; end

    class HouseholdPiiDoc; end

    class AnonDoc; end

    class HouseholdAnonDoc; end

    class Zip4AnonDoc; end

    class ExpandedDoc; end

    class Strength < ::Thrift::Union; end

    class DocMetadata; end

    class PiiDoc
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HouseholdPiiDoc
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AnonDoc
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HouseholdAnonDoc
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Zip4AnonDoc
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ExpandedDoc
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DOMAIN = 1
      REALM = 2
      COUNTRY = 3
      VAR_ENCODING = 4
      VALUE = 5

      FIELDS = {
        DOMAIN => {:type => ::Thrift::Types::STRING, :name => 'domain'},
        REALM => {:type => ::Thrift::Types::STRING, :name => 'realm'},
        COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
        VAR_ENCODING => {:type => ::Thrift::Types::STRING, :name => 'var_encoding'},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field domain is unset!') unless @domain
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field realm is unset!') unless @realm
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field country is unset!') unless @country
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field var_encoding is unset!') unless @var_encoding
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value is unset!') unless @value
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Strength < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def strong(val)
          Strength.new(:strong, val)
        end
      end

      STRONG = 1

      FIELDS = {
        STRONG => {:type => ::Thrift::Types::BOOL, :name => 'strong', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class DocMetadata
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STRENGTH = 1
      PII_TYPE = 2
      MAINTAINED_DOC_TYPE = 3

      FIELDS = {
        STRENGTH => {:type => ::Thrift::Types::STRUCT, :name => 'strength', :class => ::Liveramp::DocIds::Strength, :optional => true},
        PII_TYPE => {:type => ::Thrift::Types::I32, :name => 'pii_type', :optional => true, :enum_class => ::Liveramp::Identity::TranslatorEnums::TranslatorPiiType},
        MAINTAINED_DOC_TYPE => {:type => ::Thrift::Types::I32, :name => 'maintained_doc_type', :optional => true, :enum_class => ::Liveramp::DocIds::MaintainedDocType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @pii_type.nil? || ::Liveramp::Identity::TranslatorEnums::TranslatorPiiType::VALID_VALUES.include?(@pii_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pii_type!')
        end
        unless @maintained_doc_type.nil? || ::Liveramp::DocIds::MaintainedDocType::VALID_VALUES.include?(@maintained_doc_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field maintained_doc_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
