#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'redshift_ingester_types'

module Liveramp
  module RedshiftIngester
    module RedshiftMetadataService
      class Client
        include ::Thrift::Client

        def get_schema_names()
          send_get_schema_names()
          return recv_get_schema_names()
        end

        def send_get_schema_names()
          send_message('get_schema_names', Get_schema_names_args)
        end

        def recv_get_schema_names()
          result = receive_message(Get_schema_names_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema_names failed: unknown result')
        end

        def get_schemas()
          send_get_schemas()
          return recv_get_schemas()
        end

        def send_get_schemas()
          send_message('get_schemas', Get_schemas_args)
        end

        def recv_get_schemas()
          result = receive_message(Get_schemas_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schemas failed: unknown result')
        end

        def get_table_names(schema)
          send_get_table_names(schema)
          return recv_get_table_names()
        end

        def send_get_table_names(schema)
          send_message('get_table_names', Get_table_names_args, :schema => schema)
        end

        def recv_get_table_names()
          result = receive_message(Get_table_names_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_names failed: unknown result')
        end

        def get_all_table_names()
          send_get_all_table_names()
          return recv_get_all_table_names()
        end

        def send_get_all_table_names()
          send_message('get_all_table_names', Get_all_table_names_args)
        end

        def recv_get_all_table_names()
          result = receive_message(Get_all_table_names_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_table_names failed: unknown result')
        end

        def get_table_definition(table_name)
          send_get_table_definition(table_name)
          return recv_get_table_definition()
        end

        def send_get_table_definition(table_name)
          send_message('get_table_definition', Get_table_definition_args, :table_name => table_name)
        end

        def recv_get_table_definition()
          result = receive_message(Get_table_definition_result)
          return result.success unless result.success.nil?
          raise result.ioe unless result.ioe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_definition failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_get_schema_names(seqid, iprot, oprot)
          args = read_args(iprot, Get_schema_names_args)
          result = Get_schema_names_result.new()
          begin
            result.success = @handler.get_schema_names()
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_schema_names', seqid)
        end

        def process_get_schemas(seqid, iprot, oprot)
          args = read_args(iprot, Get_schemas_args)
          result = Get_schemas_result.new()
          begin
            result.success = @handler.get_schemas()
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_schemas', seqid)
        end

        def process_get_table_names(seqid, iprot, oprot)
          args = read_args(iprot, Get_table_names_args)
          result = Get_table_names_result.new()
          begin
            result.success = @handler.get_table_names(args.schema)
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_table_names', seqid)
        end

        def process_get_all_table_names(seqid, iprot, oprot)
          args = read_args(iprot, Get_all_table_names_args)
          result = Get_all_table_names_result.new()
          begin
            result.success = @handler.get_all_table_names()
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_all_table_names', seqid)
        end

        def process_get_table_definition(seqid, iprot, oprot)
          args = read_args(iprot, Get_table_definition_args)
          result = Get_table_definition_result.new()
          begin
            result.success = @handler.get_table_definition(args.table_name)
          rescue ::Liveramp::Util::InputOutputException => ioe
            result.ioe = ioe
          end
          write_result(result, oprot, 'get_table_definition', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Get_schema_names_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_names_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schemas_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schemas_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::RedshiftIngester::SchemaDefinition}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_names_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCHEMA = 1

        FIELDS = {
          SCHEMA => {:type => ::Thrift::Types::STRING, :name => 'schema'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_names_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_all_table_names_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_all_table_names_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_definition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TABLE_NAME = 1

        FIELDS = {
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_definition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        IOE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::RedshiftIngester::TableDefinition},
          IOE => {:type => ::Thrift::Types::STRUCT, :name => 'ioe', :class => ::Liveramp::Util::InputOutputException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
