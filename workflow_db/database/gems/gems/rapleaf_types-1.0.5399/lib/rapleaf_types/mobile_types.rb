#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'enums_types'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'custom_id_types'


module Liveramp
  module Types
    module Mobile
      module MobileImportRequestStatus
        CREATED = 1
        IMPORT_RUNNING = 2
        IMPORT_FAILED = 3
        IMPORT_COMPLETE = 4
        MOBILE_FLOW_RUNNING = 5
        MOBILE_FLOW_COMPLETE = 6
        VALUE_MAP = {1 => "CREATED", 2 => "IMPORT_RUNNING", 3 => "IMPORT_FAILED", 4 => "IMPORT_COMPLETE", 5 => "MOBILE_FLOW_RUNNING", 6 => "MOBILE_FLOW_COMPLETE"}
        VALID_VALUES = Set.new([CREATED, IMPORT_RUNNING, IMPORT_FAILED, IMPORT_COMPLETE, MOBILE_FLOW_RUNNING, MOBILE_FLOW_COMPLETE]).freeze
      end

      module MobileIdMatchType
        ONE_TO_ONE = 1
        STATISTICAL = 2
        VALUE_MAP = {1 => "ONE_TO_ONE", 2 => "STATISTICAL"}
        VALID_VALUES = Set.new([ONE_TO_ONE, STATISTICAL]).freeze
      end

      module OptOutLrmidSource
        MOBILE_OPTOUT_PAGE = 1
        MATCHED_PII_IDENTIFIER = 2
        VALUE_MAP = {1 => "MOBILE_OPTOUT_PAGE", 2 => "MATCHED_PII_IDENTIFIER"}
        VALID_VALUES = Set.new([MOBILE_OPTOUT_PAGE, MATCHED_PII_IDENTIFIER]).freeze
      end

      class MUID < ::Thrift::Union; end

      class MuidEquiv; end

      class MuidImportRecord; end

      class TmpMuidMapping; end

      class MuidToLrmid; end

      class MuidImportRecordLrmidPair; end

      class MobileMatchWithType; end

      class MuidImportRecordList; end

      class OptOutLrmid; end

      # Mobile User ID. All hashed types are supposed to be <orig_name>_sha1 and <orig_name>_md5. Code relies
# on this convention and breaking it may result in incorrect behavior.
      class MUID < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def lrmid(val)
            MUID.new(:lrmid, val)
          end

          def idfa(val)
            MUID.new(:idfa, val)
          end

          def udid_sha1(val)
            MUID.new(:udid_sha1, val)
          end

          def udid_md5(val)
            MUID.new(:udid_md5, val)
          end

          def udid(val)
            MUID.new(:udid, val)
          end

          def aaid(val)
            MUID.new(:aaid, val)
          end

          def idfa_sha1(val)
            MUID.new(:idfa_sha1, val)
          end

          def aaid_sha1(val)
            MUID.new(:aaid_sha1, val)
          end

          def mixed_aaid_idfa(val)
            MUID.new(:mixed_aaid_idfa, val)
          end
        end

        LRMID = 1
        IDFA = 2
        UDID_SHA1 = 3
        UDID_MD5 = 4
        UDID = 5
        AAID = 6
        IDFA_SHA1 = 7
        AAID_SHA1 = 8
        MIXED_AAID_IDFA = 9

        FIELDS = {
          # Equivalent of "eid" for the mobile world.
          LRMID => {:type => ::Thrift::Types::STRING, :name => 'lrmid', :binary => true, :optional => true},
          # Apple's "Id for advertising"
          IDFA => {:type => ::Thrift::Types::STRING, :name => 'idfa', :optional => true},
          # Hashed Unique Device Identifier (for non-iOS devices).
          UDID_SHA1 => {:type => ::Thrift::Types::STRING, :name => 'udid_sha1', :optional => true},
          # Hashed Unique Device Identifier (for non-iOS devices).
          UDID_MD5 => {:type => ::Thrift::Types::STRING, :name => 'udid_md5', :optional => true},
          UDID => {:type => ::Thrift::Types::STRING, :name => 'udid', :optional => true},
          # Android Advertising ID.
          AAID => {:type => ::Thrift::Types::STRING, :name => 'aaid', :optional => true},
          IDFA_SHA1 => {:type => ::Thrift::Types::STRING, :name => 'idfa_sha1', :optional => true},
          AAID_SHA1 => {:type => ::Thrift::Types::STRING, :name => 'aaid_sha1', :optional => true},
          # This pool contains all IDFAs and AAIDs combined into a single pool. It is only used for
# data imports (i.e. match imports and delivery only use the separate IDFA and AAID pools).
          MIXED_AAID_IDFA => {:type => ::Thrift::Types::STRING, :name => 'mixed_aaid_idfa', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class MuidEquiv
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUID = 1
        EQUIV = 2
        MOBILE_PUBLISHER_ID = 3
        CREATION_TIME = 4

        FIELDS = {
          MUID => {:type => ::Thrift::Types::STRUCT, :name => 'muid', :class => ::Liveramp::Types::Mobile::MUID},
          EQUIV => {:type => ::Thrift::Types::STRUCT, :name => 'equiv', :class => ::Liveramp::Types::Mobile::MUID},
          MOBILE_PUBLISHER_ID => {:type => ::Thrift::Types::I32, :name => 'mobile_publisher_id'},
          CREATION_TIME => {:type => ::Thrift::Types::I32, :name => 'creation_time'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muid is unset!') unless @muid
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field equiv is unset!') unless @equiv
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field mobile_publisher_id is unset!') unless @mobile_publisher_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field creation_time is unset!') unless @creation_time
        end

        ::Thrift::Struct.generate_accessors self
      end

      # This is the closest we can get to the original email->MUID mapping in the input
# file that we are allowed to use, since PII and online identifiers should never
# be stored next to each other.
      class MuidImportRecord
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUID = 1
        MOBILE_PUBLISHER_ID = 2
        IMPORTED_AT = 3
        SEEN_AT = 4
        HEID = 5
        REMOTE_ADDR = 6
        PEL = 7

        FIELDS = {
          MUID => {:type => ::Thrift::Types::STRUCT, :name => 'muid', :class => ::Liveramp::Types::Mobile::MUID},
          MOBILE_PUBLISHER_ID => {:type => ::Thrift::Types::I32, :name => 'mobile_publisher_id'},
          IMPORTED_AT => {:type => ::Thrift::Types::I32, :name => 'imported_at'},
          SEEN_AT => {:type => ::Thrift::Types::I32, :name => 'seen_at', :optional => true},
          HEID => {:type => ::Thrift::Types::STRING, :name => 'heid', :binary => true, :optional => true},
          REMOTE_ADDR => {:type => ::Thrift::Types::STRING, :name => 'remote_addr', :optional => true},
          PEL => {:type => ::Thrift::Types::STRUCT, :name => 'pel', :class => ::Liveramp::Types::CustomId::CustomId, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muid is unset!') unless @muid
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field mobile_publisher_id is unset!') unless @mobile_publisher_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field imported_at is unset!') unless @imported_at
        end

        ::Thrift::Struct.generate_accessors self
      end

      # This is just a helper type for MSJs. Records of this type are not supposed to be persisted anywhere.
      class TmpMuidMapping
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUID = 1
        PIN = 2
        REMOTE_ADDR = 3
        SEEN_AT = 4
        MOBILE_PUBLISHER_ID = 5

        FIELDS = {
          MUID => {:type => ::Thrift::Types::STRUCT, :name => 'muid', :class => ::Liveramp::Types::Mobile::MUID},
          PIN => {:type => ::Thrift::Types::STRUCT, :name => 'pin', :class => ::Rapleaf::Types::NewPersonData::PIN, :optional => true},
          REMOTE_ADDR => {:type => ::Thrift::Types::STRING, :name => 'remote_addr', :optional => true},
          SEEN_AT => {:type => ::Thrift::Types::I32, :name => 'seen_at', :optional => true},
          MOBILE_PUBLISHER_ID => {:type => ::Thrift::Types::I32, :name => 'mobile_publisher_id', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muid is unset!') unless @muid
        end

        ::Thrift::Struct.generate_accessors self
      end

      class MuidToLrmid
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LRMID = 1
        MUID = 2
        CREATION_TIME = 3

        FIELDS = {
          LRMID => {:type => ::Thrift::Types::STRING, :name => 'lrmid', :binary => true},
          MUID => {:type => ::Thrift::Types::STRUCT, :name => 'muid', :class => ::Liveramp::Types::Mobile::MUID},
          CREATION_TIME => {:type => ::Thrift::Types::I32, :name => 'creation_time'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrmid is unset!') unless @lrmid
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muid is unset!') unless @muid
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field creation_time is unset!') unless @creation_time
        end

        ::Thrift::Struct.generate_accessors self
      end

      # This is just a helper type for MSJs. Used in creating IpWaterfallingLog for mobile.
      class MuidImportRecordLrmidPair
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUID_IMPORT_RECORD = 1
        LRMID = 2

        FIELDS = {
          MUID_IMPORT_RECORD => {:type => ::Thrift::Types::STRUCT, :name => 'muid_import_record', :class => ::Liveramp::Types::Mobile::MuidImportRecord},
          LRMID => {:type => ::Thrift::Types::STRING, :name => 'lrmid', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muid_import_record is unset!') unless @muid_import_record
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrmid is unset!') unless @lrmid
        end

        ::Thrift::Struct.generate_accessors self
      end

      class MobileMatchWithType
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MATCH_TYPE = 1
        LRMID = 2
        HEID = 3

        FIELDS = {
          MATCH_TYPE => {:type => ::Thrift::Types::I32, :name => 'match_type', :enum_class => ::Liveramp::Types::Mobile::MobileIdMatchType},
          LRMID => {:type => ::Thrift::Types::STRING, :name => 'lrmid', :binary => true},
          HEID => {:type => ::Thrift::Types::STRING, :name => 'heid', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field match_type is unset!') unless @match_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrmid is unset!') unless @lrmid
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heid is unset!') unless @heid
          unless @match_type.nil? || ::Liveramp::Types::Mobile::MobileIdMatchType::VALID_VALUES.include?(@match_type)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field match_type!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

      # Used in mobile import record oneoff testing script
      class MuidImportRecordList
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUID_IMPORT_RECORDS = 1

        FIELDS = {
          MUID_IMPORT_RECORDS => {:type => ::Thrift::Types::LIST, :name => 'muid_import_records', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Mobile::MuidImportRecord}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muid_import_records is unset!') unless @muid_import_records
        end

        ::Thrift::Struct.generate_accessors self
      end

      class OptOutLrmid
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LRMID = 1
        MUIDS = 2
        SOURCE = 3
        OPTED_OUT_AT = 4

        FIELDS = {
          LRMID => {:type => ::Thrift::Types::STRING, :name => 'lrmid', :binary => true},
          MUIDS => {:type => ::Thrift::Types::SET, :name => 'muids', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Mobile::MUID}},
          SOURCE => {:type => ::Thrift::Types::I32, :name => 'source', :enum_class => ::Liveramp::Types::Mobile::OptOutLrmidSource},
          OPTED_OUT_AT => {:type => ::Thrift::Types::I32, :name => 'opted_out_at', :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lrmid is unset!') unless @lrmid
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field muids is unset!') unless @muids
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field source is unset!') unless @source
          unless @source.nil? || ::Liveramp::Types::Mobile::OptOutLrmidSource::VALID_VALUES.include?(@source)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field source!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
