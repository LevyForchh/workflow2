#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'field_creation_service_types'

module Liveramp
  module Types
    module FieldCreationService
      module FieldCreationService
        class Client
          include ::Thrift::Client

          def create_field_definitions(field_creation_params)
            send_create_field_definitions(field_creation_params)
            return recv_create_field_definitions()
          end

          def send_create_field_definitions(field_creation_params)
            send_message('create_field_definitions', Create_field_definitions_args, :field_creation_params => field_creation_params)
          end

          def recv_create_field_definitions()
            result = receive_message(Create_field_definitions_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_field_definitions failed: unknown result')
          end

          def update_field_definitions(field_modification_params)
            send_update_field_definitions(field_modification_params)
            return recv_update_field_definitions()
          end

          def send_update_field_definitions(field_modification_params)
            send_message('update_field_definitions', Update_field_definitions_args, :field_modification_params => field_modification_params)
          end

          def recv_update_field_definitions()
            result = receive_message(Update_field_definitions_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_field_definitions failed: unknown result')
          end

          def list_fields(audience_id)
            send_list_fields(audience_id)
            return recv_list_fields()
          end

          def send_list_fields(audience_id)
            send_message('list_fields', List_fields_args, :audience_id => audience_id)
          end

          def recv_list_fields()
            result = receive_message(List_fields_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_fields failed: unknown result')
          end

          def list_fields_for_attributes(attribute_ids, audience_id)
            send_list_fields_for_attributes(attribute_ids, audience_id)
            return recv_list_fields_for_attributes()
          end

          def send_list_fields_for_attributes(attribute_ids, audience_id)
            send_message('list_fields_for_attributes', List_fields_for_attributes_args, :attribute_ids => attribute_ids, :audience_id => audience_id)
          end

          def recv_list_fields_for_attributes()
            result = receive_message(List_fields_for_attributes_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_fields_for_attributes failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_create_field_definitions(seqid, iprot, oprot)
            args = read_args(iprot, Create_field_definitions_args)
            result = Create_field_definitions_result.new()
            result.success = @handler.create_field_definitions(args.field_creation_params)
            write_result(result, oprot, 'create_field_definitions', seqid)
          end

          def process_update_field_definitions(seqid, iprot, oprot)
            args = read_args(iprot, Update_field_definitions_args)
            result = Update_field_definitions_result.new()
            result.success = @handler.update_field_definitions(args.field_modification_params)
            write_result(result, oprot, 'update_field_definitions', seqid)
          end

          def process_list_fields(seqid, iprot, oprot)
            args = read_args(iprot, List_fields_args)
            result = List_fields_result.new()
            result.success = @handler.list_fields(args.audience_id)
            write_result(result, oprot, 'list_fields', seqid)
          end

          def process_list_fields_for_attributes(seqid, iprot, oprot)
            args = read_args(iprot, List_fields_for_attributes_args)
            result = List_fields_for_attributes_result.new()
            result.success = @handler.list_fields_for_attributes(args.attribute_ids, args.audience_id)
            write_result(result, oprot, 'list_fields_for_attributes', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Create_field_definitions_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FIELD_CREATION_PARAMS = 1

          FIELDS = {
            FIELD_CREATION_PARAMS => {:type => ::Thrift::Types::SET, :name => 'field_creation_params', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::FieldCreationParams}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Create_field_definitions_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_field_definitions_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          FIELD_MODIFICATION_PARAMS = 1

          FIELDS = {
            FIELD_MODIFICATION_PARAMS => {:type => ::Thrift::Types::SET, :name => 'field_modification_params', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::FieldModificationParams}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_field_definitions_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_fields_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          AUDIENCE_ID = 1

          FIELDS = {
            AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_fields_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_fields_for_attributes_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ATTRIBUTE_IDS = 1
          AUDIENCE_ID = 2

          FIELDS = {
            ATTRIBUTE_IDS => {:type => ::Thrift::Types::SET, :name => 'attribute_ids', :element => {:type => ::Thrift::Types::I64}},
            AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class List_fields_for_attributes_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::FieldCreationService::FieldDefinitionDescription}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
