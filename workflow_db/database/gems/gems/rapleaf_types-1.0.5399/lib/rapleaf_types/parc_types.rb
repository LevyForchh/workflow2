#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'bang_types'
require File.join File.dirname(__FILE__), 'importer_types'


module Liveramp
  module Types
    module PARC
      class FileMetadata; end

      class NoMetadata; end

      class RecordMetadata < ::Thrift::Union; end

      class ParsedAnonymizedRecord; end

      class FileMetadata
        include ::Thrift::Struct, ::Thrift::Struct_Union
        LINE_NUMBER = 1

        FIELDS = {
          LINE_NUMBER => {:type => ::Thrift::Types::I64, :name => 'line_number'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field line_number is unset!') unless @line_number
        end

        ::Thrift::Struct.generate_accessors self
      end

      class NoMetadata
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RecordMetadata < ::Thrift::Union
        include ::Thrift::Struct_Union
        class << self
          def file_metadata(val)
            RecordMetadata.new(:file_metadata, val)
          end

          def no_metadata(val)
            RecordMetadata.new(:no_metadata, val)
          end
        end

        FILE_METADATA = 1
        NO_METADATA = 2

        FIELDS = {
          FILE_METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'file_metadata', :class => ::Liveramp::Types::PARC::FileMetadata, :optional => true},
          NO_METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'no_metadata', :class => ::Liveramp::Types::PARC::NoMetadata, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        end

        ::Thrift::Union.generate_accessors self
      end

      class ParsedAnonymizedRecord
        include ::Thrift::Struct, ::Thrift::Struct_Union
        METADATA = 1
        IDENTIFIERS = 2
        KEY_TO_DATA = 3
        KEY_TO_ANONYMIZED_STRIPPED_VALUES = 4
        LEGACY_AUDIENCE_KEY = 5
        KEY_TO_IDENTIFIERS = 6
        FILEWIDE_ATTRIBUTE_ID_TO_DATA = 7
        DATA_TOKENS = 8
        KEY_TO_IDENTIFIERS_AND_METADATA = 9

        FIELDS = {
          METADATA => {:type => ::Thrift::Types::STRUCT, :name => 'metadata', :class => ::Liveramp::Types::PARC::RecordMetadata},
          # Deprecated. Use 6:key_to_identifiers instead.
# 
          IDENTIFIERS => {:type => ::Thrift::Types::SET, :name => 'identifiers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::AnonymousIdentifier}},
          KEY_TO_DATA => {:type => ::Thrift::Types::MAP, :name => 'key_to_data', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
          KEY_TO_ANONYMIZED_STRIPPED_VALUES => {:type => ::Thrift::Types::MAP, :name => 'key_to_anonymized_stripped_values', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
          LEGACY_AUDIENCE_KEY => {:type => ::Thrift::Types::STRING, :name => 'legacy_audience_key', :binary => true, :optional => true},
          KEY_TO_IDENTIFIERS => {:type => ::Thrift::Types::MAP, :name => 'key_to_identifiers', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::AnonymousIdentifier}}, :optional => true},
          FILEWIDE_ATTRIBUTE_ID_TO_DATA => {:type => ::Thrift::Types::MAP, :name => 'filewide_attribute_id_to_data', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
          DATA_TOKENS => {:type => ::Thrift::Types::LIST, :name => 'data_tokens', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::Types::Importer::RecordToken}, :optional => true},
          KEY_TO_IDENTIFIERS_AND_METADATA => {:type => ::Thrift::Types::MAP, :name => 'key_to_identifiers_and_metadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Bang::IdAndMetadata}}, :optional => true}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field metadata is unset!') unless @metadata
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field identifiers is unset!') unless @identifiers
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key_to_data is unset!') unless @key_to_data
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field key_to_anonymized_stripped_values is unset!') unless @key_to_anonymized_stripped_values
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
