#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'new_person_data_types'
require File.join File.dirname(__FILE__), 'enums_types'
require File.join File.dirname(__FILE__), 'input_file_formats_types'


module Rapleaf
  module ImporterService
    module LiverampImportRequestStatus
      PREPROCESSING = 1
      PREPROCESSING_FAILED = 2
      PREPROCESSING_COMPLETE = 3
      WAITING_FOR_CDS_IMPORT = 4
      CDS_IMPORTING = 5
      CDS_IMPORT_FAILED = 6
      WAITING_FOR_DU_IMPORT = 7
      DU_IMPORTING = 8
      DU_IMPORT_FAILED = 9
      COMPLETE = 10
      CANCELLED = 11
      REFRESHED = 12
      VALUE_MAP = {1 => "PREPROCESSING", 2 => "PREPROCESSING_FAILED", 3 => "PREPROCESSING_COMPLETE", 4 => "WAITING_FOR_CDS_IMPORT", 5 => "CDS_IMPORTING", 6 => "CDS_IMPORT_FAILED", 7 => "WAITING_FOR_DU_IMPORT", 8 => "DU_IMPORTING", 9 => "DU_IMPORT_FAILED", 10 => "COMPLETE", 11 => "CANCELLED", 12 => "REFRESHED"}
      VALID_VALUES = Set.new([PREPROCESSING, PREPROCESSING_FAILED, PREPROCESSING_COMPLETE, WAITING_FOR_CDS_IMPORT, CDS_IMPORTING, CDS_IMPORT_FAILED, WAITING_FOR_DU_IMPORT, DU_IMPORTING, DU_IMPORT_FAILED, COMPLETE, CANCELLED, REFRESHED]).freeze
    end

    module ImportType
      FULL_REFRESH = 1
      INCREMENTAL = 2
      SEGMENT_REFRESH = 3
      AK_FIELD_VALUE_DELETE = 4
      AK_FIELD_DELETE = 5
      AK_DELETE = 6
      VALUE_MAP = {1 => "FULL_REFRESH", 2 => "INCREMENTAL", 3 => "SEGMENT_REFRESH", 4 => "AK_FIELD_VALUE_DELETE", 5 => "AK_FIELD_DELETE", 6 => "AK_DELETE"}
      VALID_VALUES = Set.new([FULL_REFRESH, INCREMENTAL, SEGMENT_REFRESH, AK_FIELD_VALUE_DELETE, AK_FIELD_DELETE, AK_DELETE]).freeze
    end

    module ImportDataType
      PIN = 1
      FIELD = 2
      PIN_AND_FIELD = 3
      ONLINE_PIN = 4
      ONLINE_PIN_AND_FIELD = 5
      MATCH = 6
      FRINGE_MATCH = 7
      ANTI_MATCH = 8
      PARTNER_ID_FRINGE_MATCH = 9
      OPT_OUT = 10
      ID_SYNC_MAPPING = 11
      MUID_HEID_MAPPING = 12
      MUID_ONLY = 13
      CID_CID_MAPPING = 14
      CID_PIN_MAPPING = 15
      CID_HEID_MAPPING = 16
      CID_COOKIE_ID_MAPPING = 17
      VALUE_MAP = {1 => "PIN", 2 => "FIELD", 3 => "PIN_AND_FIELD", 4 => "ONLINE_PIN", 5 => "ONLINE_PIN_AND_FIELD", 6 => "MATCH", 7 => "FRINGE_MATCH", 8 => "ANTI_MATCH", 9 => "PARTNER_ID_FRINGE_MATCH", 10 => "OPT_OUT", 11 => "ID_SYNC_MAPPING", 12 => "MUID_HEID_MAPPING", 13 => "MUID_ONLY", 14 => "CID_CID_MAPPING", 15 => "CID_PIN_MAPPING", 16 => "CID_HEID_MAPPING", 17 => "CID_COOKIE_ID_MAPPING"}
      VALID_VALUES = Set.new([PIN, FIELD, PIN_AND_FIELD, ONLINE_PIN, ONLINE_PIN_AND_FIELD, MATCH, FRINGE_MATCH, ANTI_MATCH, PARTNER_ID_FRINGE_MATCH, OPT_OUT, ID_SYNC_MAPPING, MUID_HEID_MAPPING, MUID_ONLY, CID_CID_MAPPING, CID_PIN_MAPPING, CID_HEID_MAPPING, CID_COOKIE_ID_MAPPING]).freeze
    end

    module CharacterEncoding
      UTF_8 = 1
      LATIN_1 = 2
      VALUE_MAP = {1 => "UTF_8", 2 => "LATIN_1"}
      VALID_VALUES = Set.new([UTF_8, LATIN_1]).freeze
    end

    module ImportPinType
      EMAIL = 1
      ENTITY_ID = 2
      ES = 3
      URL = 4
      MESSENGER_ID = 5
      SITE_OBJECT = 6
      MD5_EMAIL = 7
      SHA1_EMAIL = 8
      DATA_PARTNER = 9
      NAPKIN = 10
      ZIP = 11
      ZIP4 = 12
      ZIP6 = 13
      HOUSEHOLD = 14
      NAME_AND_CITY = 15
      SPEL = 17
      ABILITEC_ID = 18
      SHA256_EMAIL = 19
      PHONE_NUMBER = 20
      ERL = 21
      NAME_AND_PHONE = 22
      VALUE_MAP = {1 => "EMAIL", 2 => "ENTITY_ID", 3 => "ES", 4 => "URL", 5 => "MESSENGER_ID", 6 => "SITE_OBJECT", 7 => "MD5_EMAIL", 8 => "SHA1_EMAIL", 9 => "DATA_PARTNER", 10 => "NAPKIN", 11 => "ZIP", 12 => "ZIP4", 13 => "ZIP6", 14 => "HOUSEHOLD", 15 => "NAME_AND_CITY", 17 => "SPEL", 18 => "ABILITEC_ID", 19 => "SHA256_EMAIL", 20 => "PHONE_NUMBER", 21 => "ERL", 22 => "NAME_AND_PHONE"}
      VALID_VALUES = Set.new([EMAIL, ENTITY_ID, ES, URL, MESSENGER_ID, SITE_OBJECT, MD5_EMAIL, SHA1_EMAIL, DATA_PARTNER, NAPKIN, ZIP, ZIP4, ZIP6, HOUSEHOLD, NAME_AND_CITY, SPEL, ABILITEC_ID, SHA256_EMAIL, PHONE_NUMBER, ERL, NAME_AND_PHONE]).freeze
    end

    module HeaderDetectionHint
      AUTO_DETECT = 1
      HAS_HEADERS = 2
      NO_HEADERS = 3
      VALUE_MAP = {1 => "AUTO_DETECT", 2 => "HAS_HEADERS", 3 => "NO_HEADERS"}
      VALID_VALUES = Set.new([AUTO_DETECT, HAS_HEADERS, NO_HEADERS]).freeze
    end

    module ImporterServiceReformatRequestStatus
      WAITING = 1
      RUNNING = 2
      FINSIHED = 3
      FAILED = 4
      CANCELLED = 5
      PICKED_UP = 6
      VALUE_MAP = {1 => "WAITING", 2 => "RUNNING", 3 => "FINSIHED", 4 => "FAILED", 5 => "CANCELLED", 6 => "PICKED_UP"}
      VALID_VALUES = Set.new([WAITING, RUNNING, FINSIHED, FAILED, CANCELLED, PICKED_UP]).freeze
    end

    class DelimitedFileFormat; end

    class FixedWidthColumnInfo; end

    class FixedWidthFileFormat; end

    class FileFormat < ::Thrift::Union; end

    class ValueMetadata; end

    class ColumnMetadata; end

    class FileMetadata; end

    class FileSpec; end

    class ExistingNumericEnumValueExtractionSpec; end

    class NewNumericEnumValueExtractionSpec; end

    class ExistingStringEnumValueExtractionSpec; end

    class NewStringEnumValueExtractionSpec; end

    class NumericEnumValueExtractionSpec; end

    class StringEnumValueExtractionSpec; end

    class ValueExtractionSpec < ::Thrift::Union; end

    class ExistingFieldExtractionSpec; end

    class NewFieldExtractionSpec; end

    class EmailExtractionSpec; end

    class EntityExtractionSpec; end

    class EsExtractionSpec; end

    class UrlExtractionSpec; end

    class MessengerIDExtractionSpec; end

    class SiteObjectExtractionSpec; end

    class MD5EmailExtractionSpec; end

    class SHA1EmailExtractionSpec; end

    class DataPartnerExtractionSpec; end

    class NAPkinExtractionSpec; end

    class ZipExtractionSpec; end

    class Zip4ExtractionSpec; end

    class Zip6ExtractionSpec; end

    class HouseholdExtractionSpec; end

    class NameAndCityExtractionSpec; end

    class EncryptedEIDExtractionSpec; end

    class NameAndPhoneExtractionSpec; end

    class SPELExtractionSpec; end

    class AbiliTecIdExtractionSpec; end

    class SHA256EmailExtractionSpec; end

    class PhoneExtractionSpec; end

    class ERLExtractionSpec; end

    class PINExtractionSpec < ::Thrift::Union; end

    class AnaOnlinePINExtractionSpec; end

    class EncryptedCidExtractionSpec; end

    class IdfaExtractionSpec; end

    class IdfaSha1ExtractionSpec; end

    class AaidExtractionSpec; end

    class AaidSha1ExtractionSpec; end

    class UdidExtractionSpec; end

    class UdidSha1ExtractionSpec; end

    class UdidMd5ExtractionSpec; end

    class AdtrExtractionSpec; end

    class MuidExtractionSpec < ::Thrift::Union; end

    class HeidExtractionSpec; end

    class DoubleMd5EmailExtractionSpec; end

    class DoubleSha1EmailExtractionSpec; end

    class ArlExtractionSpec; end

    class OnlineIdentifierFieldExtractionSpec < ::Thrift::Union; end

    class TimestampExtractionSpec; end

    class IpAddressExtractionSpec; end

    class MetadataFieldExtractionSpec < ::Thrift::Union; end

    class IdentifierFieldExtractionSpec; end

    class FieldExtractionSpec < ::Thrift::Union; end

    class DelimitedFieldExtractionSpec; end

    class MultiColumnFieldExtractionSpec; end

    class LiverampImportSpec; end

    class HintsForAutodetection; end

    class ImporterServiceRequest; end

    class BasicImportInfo; end

    class BasicImportInfoQuery; end

    class InputOutputException < ::Thrift::Exception; end

    class IdentifierLackingPrefixError; end

    class IdentifierPossessesUnexpectedPrefixError; end

    class ImportValidationResult; end

    class ReformatRequest; end

    class DelimitedFileFormat
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DELIMITER = 1

      FIELDS = {
        DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'delimiter'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field delimiter is unset!') unless @delimiter
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FixedWidthColumnInfo
      include ::Thrift::Struct, ::Thrift::Struct_Union
      START = 1
      WIDTH = 2

      FIELDS = {
        START => {:type => ::Thrift::Types::I32, :name => 'start'},
        WIDTH => {:type => ::Thrift::Types::I32, :name => 'width'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field start is unset!') unless @start
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field width is unset!') unless @width
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FixedWidthFileFormat
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIXED_WIDTH_COLUMN_INFOS = 1

      FIELDS = {
        FIXED_WIDTH_COLUMN_INFOS => {:type => ::Thrift::Types::LIST, :name => 'fixed_width_column_infos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FixedWidthColumnInfo}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fixed_width_column_infos is unset!') unless @fixed_width_column_infos
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FileFormat < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def delimited_file_format(val)
          FileFormat.new(:delimited_file_format, val)
        end

        def fixed_width_file_format(val)
          FileFormat.new(:fixed_width_file_format, val)
        end

        def key_value_file_format(val)
          FileFormat.new(:key_value_file_format, val)
        end

        def google_dds_file_format(val)
          FileFormat.new(:google_dds_file_format, val)
        end

        def segment_file_format(val)
          FileFormat.new(:segment_file_format, val)
        end
      end

      DELIMITED_FILE_FORMAT = 1
      FIXED_WIDTH_FILE_FORMAT = 2
      KEY_VALUE_FILE_FORMAT = 3
      GOOGLE_DDS_FILE_FORMAT = 4
      SEGMENT_FILE_FORMAT = 6

      FIELDS = {
        DELIMITED_FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'delimited_file_format', :class => ::Rapleaf::ImporterService::DelimitedFileFormat, :optional => true},
        FIXED_WIDTH_FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'fixed_width_file_format', :class => ::Rapleaf::ImporterService::FixedWidthFileFormat, :optional => true},
        KEY_VALUE_FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'key_value_file_format', :class => ::Liveramp::Types::ParcService::KeyValueFileFormat, :optional => true},
        GOOGLE_DDS_FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'google_dds_file_format', :class => ::Liveramp::Types::ParcService::GoogleDdsFileFormat, :optional => true},
        SEGMENT_FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'segment_file_format', :class => ::Liveramp::Types::ParcService::SegmentFileFormat, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class ValueMetadata
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VALUE_COUNT = 1
      WARNINGS = 2
      BELOW_LOWER_THRESHOLD = 3

      FIELDS = {
        VALUE_COUNT => {:type => ::Thrift::Types::I32, :name => 'value_count', :optional => true},
        WARNINGS => {:type => ::Thrift::Types::LIST, :name => 'warnings', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        BELOW_LOWER_THRESHOLD => {:type => ::Thrift::Types::BOOL, :name => 'below_lower_threshold', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ColumnMetadata
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EXAMPLES = 1
      FIELD_COUNT = 2
      WARNINGS = 4
      VALUE_METADATAS = 5
      LABEL = 6
      UNIQUE_VALUE_COUNT = 7
      UNIQUE_VALUE_HLL_COUNTER = 8
      UNIQUE_STRING_VALUES_COUNT = 9
      UNIQUE_STRING_VALUES_HLL_COUNTER = 10
      TOTAL_STRING_VALUES_COUNT = 11

      FIELDS = {
        EXAMPLES => {:type => ::Thrift::Types::SET, :name => 'examples', :element => {:type => ::Thrift::Types::STRING}},
        # This field can be negative if there are more than
# Integer.MAX_VALUE values for a key. We should replace
# this with a type that is i64.
        FIELD_COUNT => {:type => ::Thrift::Types::I32, :name => 'field_count'},
        WARNINGS => {:type => ::Thrift::Types::LIST, :name => 'warnings', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        # value_metadatas are only used for string_enum and numeric_enum fields.
# keys are enum-values.
        VALUE_METADATAS => {:type => ::Thrift::Types::MAP, :name => 'value_metadatas', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ValueMetadata}, :optional => true},
        LABEL => {:type => ::Thrift::Types::STRING, :name => 'label'},
        # An estimate of the number of unique values in this column.
        UNIQUE_VALUE_COUNT => {:type => ::Thrift::Types::I64, :name => 'unique_value_count', :optional => true},
        UNIQUE_VALUE_HLL_COUNTER => {:type => ::Thrift::Types::STRING, :name => 'unique_value_hll_counter', :binary => true, :optional => true},
        UNIQUE_STRING_VALUES_COUNT => {:type => ::Thrift::Types::I64, :name => 'unique_string_values_count', :optional => true},
        UNIQUE_STRING_VALUES_HLL_COUNTER => {:type => ::Thrift::Types::STRING, :name => 'unique_string_values_hll_counter', :binary => true, :optional => true},
        TOTAL_STRING_VALUES_COUNT => {:type => ::Thrift::Types::I64, :name => 'total_string_values_count', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field examples is unset!') unless @examples
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_count is unset!') unless @field_count
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field label is unset!') unless @label
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FileMetadata
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PATH = 1
      CONTAINS_HEADER = 2
      NUM_RECORDS = 3

      FIELDS = {
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        CONTAINS_HEADER => {:type => ::Thrift::Types::BOOL, :name => 'contains_header', :optional => true},
        NUM_RECORDS => {:type => ::Thrift::Types::I64, :name => 'num_records', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field path is unset!') unless @path
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FileSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FORMAT = 1
      NUM_RECORDS = 3
      COLUMN_METADATAS = 4
      WARNINGS = 5
      NUM_LINES_IGNORED = 6
      NUM_LINES_NON_ASCII = 7
      FILE_METADATAS = 8
      CHARACTER_ENCODING = 9

      FIELDS = {
        FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'format', :class => ::Rapleaf::ImporterService::FileFormat},
        NUM_RECORDS => {:type => ::Thrift::Types::I64, :name => 'num_records'},
        COLUMN_METADATAS => {:type => ::Thrift::Types::LIST, :name => 'column_metadatas', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ColumnMetadata}},
        WARNINGS => {:type => ::Thrift::Types::LIST, :name => 'warnings', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        NUM_LINES_IGNORED => {:type => ::Thrift::Types::I64, :name => 'num_lines_ignored', :optional => true},
        NUM_LINES_NON_ASCII => {:type => ::Thrift::Types::I64, :name => 'num_lines_non_ascii', :optional => true},
        FILE_METADATAS => {:type => ::Thrift::Types::LIST, :name => 'file_metadatas', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FileMetadata}, :optional => true},
        CHARACTER_ENCODING => {:type => ::Thrift::Types::I32, :name => 'character_encoding', :optional => true, :enum_class => ::Rapleaf::ImporterService::CharacterEncoding}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field format is unset!') unless @format
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_records is unset!') unless @num_records
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field column_metadatas is unset!') unless @column_metadatas
        unless @character_encoding.nil? || ::Rapleaf::ImporterService::CharacterEncoding::VALID_VALUES.include?(@character_encoding)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field character_encoding!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ExistingNumericEnumValueExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VALUE_ID = 1
      VALUE_IN_FILE = 2
      EXCLUDED = 3

      FIELDS = {
        VALUE_ID => {:type => ::Thrift::Types::I32, :name => 'value_id'},
        VALUE_IN_FILE => {:type => ::Thrift::Types::I64, :name => 'value_in_file'},
        EXCLUDED => {:type => ::Thrift::Types::BOOL, :name => 'excluded', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_id is unset!') unless @value_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_in_file is unset!') unless @value_in_file
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NewNumericEnumValueExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VALUE_IN_FILE = 1
      LABEL = 2
      DISPLAY_NAME = 3
      EXCLUDED = 4

      FIELDS = {
        VALUE_IN_FILE => {:type => ::Thrift::Types::I64, :name => 'value_in_file'},
        LABEL => {:type => ::Thrift::Types::I64, :name => 'label'},
        DISPLAY_NAME => {:type => ::Thrift::Types::STRING, :name => 'display_name', :optional => true},
        EXCLUDED => {:type => ::Thrift::Types::BOOL, :name => 'excluded', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_in_file is unset!') unless @value_in_file
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field label is unset!') unless @label
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ExistingStringEnumValueExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VALUE_ID = 1
      VALUE_IN_FILE = 2
      EXCLUDED = 3

      FIELDS = {
        VALUE_ID => {:type => ::Thrift::Types::I32, :name => 'value_id'},
        VALUE_IN_FILE => {:type => ::Thrift::Types::STRING, :name => 'value_in_file'},
        EXCLUDED => {:type => ::Thrift::Types::BOOL, :name => 'excluded', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_id is unset!') unless @value_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_in_file is unset!') unless @value_in_file
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NewStringEnumValueExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VALUE_IN_FILE = 1
      LABEL = 2
      DISPLAY_NAME = 3
      EXCLUDED = 4

      FIELDS = {
        VALUE_IN_FILE => {:type => ::Thrift::Types::STRING, :name => 'value_in_file'},
        LABEL => {:type => ::Thrift::Types::STRING, :name => 'label'},
        DISPLAY_NAME => {:type => ::Thrift::Types::STRING, :name => 'display_name', :optional => true},
        EXCLUDED => {:type => ::Thrift::Types::BOOL, :name => 'excluded', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_in_file is unset!') unless @value_in_file
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field label is unset!') unless @label
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NumericEnumValueExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NEW_NUMERIC_ENUM_VALUE_EXTRACTION_SPECS = 1
      EXISTING_NUMERIC_ENUM_VALUE_EXTRACTION_SPECS = 2

      FIELDS = {
        NEW_NUMERIC_ENUM_VALUE_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'new_numeric_enum_value_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::NewNumericEnumValueExtractionSpec}},
        EXISTING_NUMERIC_ENUM_VALUE_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'existing_numeric_enum_value_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ExistingNumericEnumValueExtractionSpec}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field new_numeric_enum_value_extraction_specs is unset!') unless @new_numeric_enum_value_extraction_specs
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field existing_numeric_enum_value_extraction_specs is unset!') unless @existing_numeric_enum_value_extraction_specs
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StringEnumValueExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NEW_STRING_ENUM_VALUE_EXTRACTION_SPECS = 1
      EXISTING_STRING_ENUM_VALUE_EXTRACTION_SPECS = 2

      FIELDS = {
        NEW_STRING_ENUM_VALUE_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'new_string_enum_value_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::NewStringEnumValueExtractionSpec}},
        EXISTING_STRING_ENUM_VALUE_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'existing_string_enum_value_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::ExistingStringEnumValueExtractionSpec}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field new_string_enum_value_extraction_specs is unset!') unless @new_string_enum_value_extraction_specs
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field existing_string_enum_value_extraction_specs is unset!') unless @existing_string_enum_value_extraction_specs
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ValueExtractionSpec < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def string_field_type(val)
          ValueExtractionSpec.new(:string_field_type, val)
        end

        def numeric_field_type(val)
          ValueExtractionSpec.new(:numeric_field_type, val)
        end

        def string_enum_value_extraction_spec(val)
          ValueExtractionSpec.new(:string_enum_value_extraction_spec, val)
        end

        def numeric_enum_value_extraction_spec(val)
          ValueExtractionSpec.new(:numeric_enum_value_extraction_spec, val)
        end
      end

      STRING_FIELD_TYPE = 2
      NUMERIC_FIELD_TYPE = 3
      STRING_ENUM_VALUE_EXTRACTION_SPEC = 4
      NUMERIC_ENUM_VALUE_EXTRACTION_SPEC = 5

      FIELDS = {
        STRING_FIELD_TYPE => {:type => ::Thrift::Types::BOOL, :name => 'string_field_type', :optional => true},
        NUMERIC_FIELD_TYPE => {:type => ::Thrift::Types::BOOL, :name => 'numeric_field_type', :optional => true},
        STRING_ENUM_VALUE_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'string_enum_value_extraction_spec', :class => ::Rapleaf::ImporterService::StringEnumValueExtractionSpec, :optional => true},
        NUMERIC_ENUM_VALUE_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'numeric_enum_value_extraction_spec', :class => ::Rapleaf::ImporterService::NumericEnumValueExtractionSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class ExistingFieldExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIELD_ID = 1
      VALUE_EXTRACTION_SPEC = 2

      FIELDS = {
        FIELD_ID => {:type => ::Thrift::Types::I32, :name => 'field_id'},
        VALUE_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'value_extraction_spec', :class => ::Rapleaf::ImporterService::ValueExtractionSpec}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_id is unset!') unless @field_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_extraction_spec is unset!') unless @value_extraction_spec
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NewFieldExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LABEL = 1
      VALUE_EXTRACTION_SPEC = 2
      DISPLAY_NAME = 3
      SHOULD_WATERFALL = 4
      MULTI_VALUED = 5
      COMPUTE_VALUE_STATS = 6
      VALUE_UNIQUENESS = 7

      FIELDS = {
        LABEL => {:type => ::Thrift::Types::STRING, :name => 'label'},
        VALUE_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'value_extraction_spec', :class => ::Rapleaf::ImporterService::ValueExtractionSpec},
        DISPLAY_NAME => {:type => ::Thrift::Types::STRING, :name => 'display_name', :optional => true},
        SHOULD_WATERFALL => {:type => ::Thrift::Types::BOOL, :name => 'should_waterfall'},
        MULTI_VALUED => {:type => ::Thrift::Types::BOOL, :name => 'multi_valued', :optional => true},
        COMPUTE_VALUE_STATS => {:type => ::Thrift::Types::BOOL, :name => 'compute_value_stats', :optional => true},
        VALUE_UNIQUENESS => {:type => ::Thrift::Types::I32, :name => 'value_uniqueness', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field label is unset!') unless @label
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field value_extraction_spec is unset!') unless @value_extraction_spec
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field should_waterfall is unset!') if @should_waterfall.nil?
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EmailExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EntityExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EsExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SITE = 1
      USERID = 2

      FIELDS = {
        SITE => {:type => ::Thrift::Types::I32, :name => 'site', :enum_class => ::Rapleaf::Types::PersonData::EsSite},
        USERID => {:type => ::Thrift::Types::BOOL, :name => 'userid'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field site is unset!') unless @site
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userid is unset!') if @userid.nil?
        unless @site.nil? || ::Rapleaf::Types::PersonData::EsSite::VALID_VALUES.include?(@site)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field site!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UrlExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MessengerIDExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSENGER_SERVICE = 1

      FIELDS = {
        MESSENGER_SERVICE => {:type => ::Thrift::Types::I32, :name => 'messenger_service', :enum_class => ::Rapleaf::Types::PersonData::MessengerService}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field messenger_service is unset!') unless @messenger_service
        unless @messenger_service.nil? || ::Rapleaf::Types::PersonData::MessengerService::VALID_VALUES.include?(@messenger_service)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field messenger_service!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SiteObjectExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MD5EmailExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SHA1EmailExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DataPartnerExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PARTNER = 1

      FIELDS = {
        PARTNER => {:type => ::Thrift::Types::I32, :name => 'partner', :enum_class => ::Rapleaf::Types::PersonData::DataPartner}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field partner is unset!') unless @partner
        unless @partner.nil? || ::Rapleaf::Types::PersonData::DataPartner::VALID_VALUES.include?(@partner)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field partner!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NAPkinExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PIN_FIELD = 1

      FIELDS = {
        PIN_FIELD => {:type => ::Thrift::Types::I16, :name => 'pin_field'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin_field is unset!') unless @pin_field
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ZipExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Zip4ExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SECOND_PART = 1

      FIELDS = {
        SECOND_PART => {:type => ::Thrift::Types::BOOL, :name => 'second_part'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field second_part is unset!') if @second_part.nil?
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Zip6ExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SECOND_PART = 1

      FIELDS = {
        SECOND_PART => {:type => ::Thrift::Types::BOOL, :name => 'second_part'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field second_part is unset!') if @second_part.nil?
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HouseholdExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PIN_FIELD = 1

      FIELDS = {
        PIN_FIELD => {:type => ::Thrift::Types::I16, :name => 'pin_field'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin_field is unset!') unless @pin_field
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NameAndCityExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PIN_FIELD = 1

      FIELDS = {
        PIN_FIELD => {:type => ::Thrift::Types::I16, :name => 'pin_field'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin_field is unset!') unless @pin_field
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EncryptedEIDExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENCRYPTION_KEY = 1

      FIELDS = {
        ENCRYPTION_KEY => {:type => ::Thrift::Types::STRING, :name => 'encryption_key'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field encryption_key is unset!') unless @encryption_key
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NameAndPhoneExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PIN_FIELD = 1

      FIELDS = {
        PIN_FIELD => {:type => ::Thrift::Types::I16, :name => 'pin_field'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field pin_field is unset!') unless @pin_field
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SPELExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AbiliTecIdExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SHA256EmailExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PhoneExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ERLExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PINExtractionSpec < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def email_extraction_spec(val)
          PINExtractionSpec.new(:email_extraction_spec, val)
        end

        def entity_extraction_spec(val)
          PINExtractionSpec.new(:entity_extraction_spec, val)
        end

        def es_extraction_spec(val)
          PINExtractionSpec.new(:es_extraction_spec, val)
        end

        def url_extraction_spec(val)
          PINExtractionSpec.new(:url_extraction_spec, val)
        end

        def messenger_id_extraction_spec(val)
          PINExtractionSpec.new(:messenger_id_extraction_spec, val)
        end

        def site_object_extraction_spec(val)
          PINExtractionSpec.new(:site_object_extraction_spec, val)
        end

        def md5_email_extraction_spec(val)
          PINExtractionSpec.new(:md5_email_extraction_spec, val)
        end

        def sha1_email_extraction_spec(val)
          PINExtractionSpec.new(:sha1_email_extraction_spec, val)
        end

        def data_partner_extraction_spec(val)
          PINExtractionSpec.new(:data_partner_extraction_spec, val)
        end

        def napkin_extraction_spec(val)
          PINExtractionSpec.new(:napkin_extraction_spec, val)
        end

        def zip_extraction_spec(val)
          PINExtractionSpec.new(:zip_extraction_spec, val)
        end

        def zip4_extraction_spec(val)
          PINExtractionSpec.new(:zip4_extraction_spec, val)
        end

        def zip6_extraction_spec(val)
          PINExtractionSpec.new(:zip6_extraction_spec, val)
        end

        def household_extraction_spec(val)
          PINExtractionSpec.new(:household_extraction_spec, val)
        end

        def name_and_city_extraction_spec(val)
          PINExtractionSpec.new(:name_and_city_extraction_spec, val)
        end

        def encrypted_eid_extraction_spec(val)
          PINExtractionSpec.new(:encrypted_eid_extraction_spec, val)
        end

        def spel_extraction_spec(val)
          PINExtractionSpec.new(:spel_extraction_spec, val)
        end

        def abilitec_id_extraction_spec(val)
          PINExtractionSpec.new(:abilitec_id_extraction_spec, val)
        end

        def sha256_email_extraction_spec(val)
          PINExtractionSpec.new(:sha256_email_extraction_spec, val)
        end

        def phone_extraction_spec(val)
          PINExtractionSpec.new(:phone_extraction_spec, val)
        end

        def erl_extraction_spec(val)
          PINExtractionSpec.new(:erl_extraction_spec, val)
        end

        def name_and_phone_extraction_spec(val)
          PINExtractionSpec.new(:name_and_phone_extraction_spec, val)
        end
      end

      EMAIL_EXTRACTION_SPEC = 1
      ENTITY_EXTRACTION_SPEC = 2
      ES_EXTRACTION_SPEC = 3
      URL_EXTRACTION_SPEC = 4
      MESSENGER_ID_EXTRACTION_SPEC = 5
      SITE_OBJECT_EXTRACTION_SPEC = 6
      MD5_EMAIL_EXTRACTION_SPEC = 7
      SHA1_EMAIL_EXTRACTION_SPEC = 8
      DATA_PARTNER_EXTRACTION_SPEC = 9
      NAPKIN_EXTRACTION_SPEC = 10
      ZIP_EXTRACTION_SPEC = 11
      ZIP4_EXTRACTION_SPEC = 12
      ZIP6_EXTRACTION_SPEC = 13
      HOUSEHOLD_EXTRACTION_SPEC = 14
      NAME_AND_CITY_EXTRACTION_SPEC = 15
      ENCRYPTED_EID_EXTRACTION_SPEC = 16
      SPEL_EXTRACTION_SPEC = 17
      ABILITEC_ID_EXTRACTION_SPEC = 18
      SHA256_EMAIL_EXTRACTION_SPEC = 19
      PHONE_EXTRACTION_SPEC = 20
      ERL_EXTRACTION_SPEC = 21
      NAME_AND_PHONE_EXTRACTION_SPEC = 22

      FIELDS = {
        EMAIL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'email_extraction_spec', :class => ::Rapleaf::ImporterService::EmailExtractionSpec, :optional => true},
        ENTITY_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'entity_extraction_spec', :class => ::Rapleaf::ImporterService::EntityExtractionSpec, :optional => true},
        ES_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'es_extraction_spec', :class => ::Rapleaf::ImporterService::EsExtractionSpec, :optional => true},
        URL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'url_extraction_spec', :class => ::Rapleaf::ImporterService::UrlExtractionSpec, :optional => true},
        MESSENGER_ID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'messenger_id_extraction_spec', :class => ::Rapleaf::ImporterService::MessengerIDExtractionSpec, :optional => true},
        SITE_OBJECT_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'site_object_extraction_spec', :class => ::Rapleaf::ImporterService::SiteObjectExtractionSpec, :optional => true},
        MD5_EMAIL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'md5_email_extraction_spec', :class => ::Rapleaf::ImporterService::MD5EmailExtractionSpec, :optional => true},
        SHA1_EMAIL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'sha1_email_extraction_spec', :class => ::Rapleaf::ImporterService::SHA1EmailExtractionSpec, :optional => true},
        DATA_PARTNER_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'data_partner_extraction_spec', :class => ::Rapleaf::ImporterService::DataPartnerExtractionSpec, :optional => true},
        NAPKIN_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'napkin_extraction_spec', :class => ::Rapleaf::ImporterService::NAPkinExtractionSpec, :optional => true},
        ZIP_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'zip_extraction_spec', :class => ::Rapleaf::ImporterService::ZipExtractionSpec, :optional => true},
        ZIP4_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'zip4_extraction_spec', :class => ::Rapleaf::ImporterService::Zip4ExtractionSpec, :optional => true},
        ZIP6_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'zip6_extraction_spec', :class => ::Rapleaf::ImporterService::Zip6ExtractionSpec, :optional => true},
        HOUSEHOLD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'household_extraction_spec', :class => ::Rapleaf::ImporterService::HouseholdExtractionSpec, :optional => true},
        NAME_AND_CITY_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'name_and_city_extraction_spec', :class => ::Rapleaf::ImporterService::NameAndCityExtractionSpec, :optional => true},
        ENCRYPTED_EID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'encrypted_eid_extraction_spec', :class => ::Rapleaf::ImporterService::EncryptedEIDExtractionSpec, :optional => true},
        SPEL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'spel_extraction_spec', :class => ::Rapleaf::ImporterService::SPELExtractionSpec, :optional => true},
        ABILITEC_ID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'abilitec_id_extraction_spec', :class => ::Rapleaf::ImporterService::AbiliTecIdExtractionSpec, :optional => true},
        SHA256_EMAIL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'sha256_email_extraction_spec', :class => ::Rapleaf::ImporterService::SHA256EmailExtractionSpec, :optional => true},
        PHONE_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'phone_extraction_spec', :class => ::Rapleaf::ImporterService::PhoneExtractionSpec, :optional => true},
        ERL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'erl_extraction_spec', :class => ::Rapleaf::ImporterService::ERLExtractionSpec, :optional => true},
        NAME_AND_PHONE_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'name_and_phone_extraction_spec', :class => ::Rapleaf::ImporterService::NameAndPhoneExtractionSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class AnaOnlinePINExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AD_NETWORK_ACCOUNT_ID = 1

      FIELDS = {
        AD_NETWORK_ACCOUNT_ID => {:type => ::Thrift::Types::I32, :name => 'ad_network_account_id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ad_network_account_id is unset!') unless @ad_network_account_id
      end

      ::Thrift::Struct.generate_accessors self
    end

    # Right now, it is implied these CIDs are from Acxiom Premium Publishers
# since those are the only partners that send us encrypted CIDs as of February 2018.
    class EncryptedCidExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AD_NETWORK_ACCOUNT_ID = 1

      FIELDS = {
        AD_NETWORK_ACCOUNT_ID => {:type => ::Thrift::Types::I32, :name => 'ad_network_account_id'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ad_network_account_id is unset!') unless @ad_network_account_id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IdfaExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IdfaSha1ExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AaidExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AaidSha1ExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UdidExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UdidSha1ExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UdidMd5ExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AdtrExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MuidExtractionSpec < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def idfa_extraction_spec(val)
          MuidExtractionSpec.new(:idfa_extraction_spec, val)
        end

        def aaid_extraction_spec(val)
          MuidExtractionSpec.new(:aaid_extraction_spec, val)
        end

        def udid_extraction_spec(val)
          MuidExtractionSpec.new(:udid_extraction_spec, val)
        end

        def udid_sha1_extraction_spec(val)
          MuidExtractionSpec.new(:udid_sha1_extraction_spec, val)
        end

        def adtr_extraction_spec(val)
          MuidExtractionSpec.new(:adtr_extraction_spec, val)
        end

        def idfa_sha1_extraction_spec(val)
          MuidExtractionSpec.new(:idfa_sha1_extraction_spec, val)
        end

        def aaid_sha1_extraction_spec(val)
          MuidExtractionSpec.new(:aaid_sha1_extraction_spec, val)
        end

        def udid_md5_extraction_spec(val)
          MuidExtractionSpec.new(:udid_md5_extraction_spec, val)
        end
      end

      IDFA_EXTRACTION_SPEC = 1
      AAID_EXTRACTION_SPEC = 2
      UDID_EXTRACTION_SPEC = 3
      UDID_SHA1_EXTRACTION_SPEC = 4
      ADTR_EXTRACTION_SPEC = 5
      IDFA_SHA1_EXTRACTION_SPEC = 6
      AAID_SHA1_EXTRACTION_SPEC = 7
      UDID_MD5_EXTRACTION_SPEC = 8

      FIELDS = {
        IDFA_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'idfa_extraction_spec', :class => ::Rapleaf::ImporterService::IdfaExtractionSpec, :optional => true},
        AAID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'aaid_extraction_spec', :class => ::Rapleaf::ImporterService::AaidExtractionSpec, :optional => true},
        UDID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'udid_extraction_spec', :class => ::Rapleaf::ImporterService::UdidExtractionSpec, :optional => true},
        UDID_SHA1_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'udid_sha1_extraction_spec', :class => ::Rapleaf::ImporterService::UdidSha1ExtractionSpec, :optional => true},
        ADTR_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'adtr_extraction_spec', :class => ::Rapleaf::ImporterService::AdtrExtractionSpec, :optional => true},
        IDFA_SHA1_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'idfa_sha1_extraction_spec', :class => ::Rapleaf::ImporterService::IdfaSha1ExtractionSpec, :optional => true},
        AAID_SHA1_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'aaid_sha1_extraction_spec', :class => ::Rapleaf::ImporterService::AaidSha1ExtractionSpec, :optional => true},
        UDID_MD5_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'udid_md5_extraction_spec', :class => ::Rapleaf::ImporterService::UdidMd5ExtractionSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class HeidExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DoubleMd5EmailExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DoubleSha1EmailExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ArlExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OnlineIdentifierFieldExtractionSpec < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def ana_online_pin_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:ana_online_pin_extraction_spec, val)
        end

        def muid_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:muid_extraction_spec, val)
        end

        def heid_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:heid_extraction_spec, val)
        end

        def double_md5_email_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:double_md5_email_extraction_spec, val)
        end

        def double_sha1_email_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:double_sha1_email_extraction_spec, val)
        end

        def arl_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:arl_extraction_spec, val)
        end

        def encrypted_cid_extraction_spec(val)
          OnlineIdentifierFieldExtractionSpec.new(:encrypted_cid_extraction_spec, val)
        end
      end

      ANA_ONLINE_PIN_EXTRACTION_SPEC = 1
      MUID_EXTRACTION_SPEC = 2
      HEID_EXTRACTION_SPEC = 3
      DOUBLE_MD5_EMAIL_EXTRACTION_SPEC = 4
      DOUBLE_SHA1_EMAIL_EXTRACTION_SPEC = 5
      ARL_EXTRACTION_SPEC = 6
      ENCRYPTED_CID_EXTRACTION_SPEC = 7

      FIELDS = {
        ANA_ONLINE_PIN_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'ana_online_pin_extraction_spec', :class => ::Rapleaf::ImporterService::AnaOnlinePINExtractionSpec, :optional => true},
        MUID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'muid_extraction_spec', :class => ::Rapleaf::ImporterService::MuidExtractionSpec, :optional => true},
        HEID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'heid_extraction_spec', :class => ::Rapleaf::ImporterService::HeidExtractionSpec, :optional => true},
        DOUBLE_MD5_EMAIL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'double_md5_email_extraction_spec', :class => ::Rapleaf::ImporterService::DoubleMd5EmailExtractionSpec, :optional => true},
        DOUBLE_SHA1_EMAIL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'double_sha1_email_extraction_spec', :class => ::Rapleaf::ImporterService::DoubleSha1EmailExtractionSpec, :optional => true},
        ARL_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'arl_extraction_spec', :class => ::Rapleaf::ImporterService::ArlExtractionSpec, :optional => true},
        ENCRYPTED_CID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'encrypted_cid_extraction_spec', :class => ::Rapleaf::ImporterService::EncryptedCidExtractionSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class TimestampExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IpAddressExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class MetadataFieldExtractionSpec < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def timestamp_extraction_spec(val)
          MetadataFieldExtractionSpec.new(:timestamp_extraction_spec, val)
        end

        def ip_address_extraction_spec(val)
          MetadataFieldExtractionSpec.new(:ip_address_extraction_spec, val)
        end
      end

      TIMESTAMP_EXTRACTION_SPEC = 1
      IP_ADDRESS_EXTRACTION_SPEC = 2

      FIELDS = {
        TIMESTAMP_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'timestamp_extraction_spec', :class => ::Rapleaf::ImporterService::TimestampExtractionSpec, :optional => true},
        IP_ADDRESS_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'ip_address_extraction_spec', :class => ::Rapleaf::ImporterService::IpAddressExtractionSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class IdentifierFieldExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EXTRACTION_SPEC = 1
      GROUP_INDEX = 2

      FIELDS = {
        EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'extraction_spec', :class => ::Rapleaf::ImporterService::PINExtractionSpec},
        GROUP_INDEX => {:type => ::Thrift::Types::I16, :name => 'group_index', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field extraction_spec is unset!') unless @extraction_spec
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FieldExtractionSpec < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def new_field_extraction_spec(val)
          FieldExtractionSpec.new(:new_field_extraction_spec, val)
        end

        def existing_field_extraction_spec(val)
          FieldExtractionSpec.new(:existing_field_extraction_spec, val)
        end

        def identifier_field_extraction_spec(val)
          FieldExtractionSpec.new(:identifier_field_extraction_spec, val)
        end

        def online_identifier_field_extraction_spec(val)
          FieldExtractionSpec.new(:online_identifier_field_extraction_spec, val)
        end

        def metadata_field_extraction_spec(val)
          FieldExtractionSpec.new(:metadata_field_extraction_spec, val)
        end
      end

      NEW_FIELD_EXTRACTION_SPEC = 1
      EXISTING_FIELD_EXTRACTION_SPEC = 2
      IDENTIFIER_FIELD_EXTRACTION_SPEC = 3
      ONLINE_IDENTIFIER_FIELD_EXTRACTION_SPEC = 4
      METADATA_FIELD_EXTRACTION_SPEC = 5

      FIELDS = {
        NEW_FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'new_field_extraction_spec', :class => ::Rapleaf::ImporterService::NewFieldExtractionSpec, :optional => true},
        EXISTING_FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'existing_field_extraction_spec', :class => ::Rapleaf::ImporterService::ExistingFieldExtractionSpec, :optional => true},
        IDENTIFIER_FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'identifier_field_extraction_spec', :class => ::Rapleaf::ImporterService::IdentifierFieldExtractionSpec, :optional => true},
        ONLINE_IDENTIFIER_FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'online_identifier_field_extraction_spec', :class => ::Rapleaf::ImporterService::OnlineIdentifierFieldExtractionSpec, :optional => true},
        METADATA_FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'metadata_field_extraction_spec', :class => ::Rapleaf::ImporterService::MetadataFieldExtractionSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class DelimitedFieldExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DELIMITER = 1
      FIELD_EXTRACTION_SPECS = 2

      FIELDS = {
        DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'delimiter'},
        FIELD_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'field_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FieldExtractionSpec}}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field delimiter is unset!') unless @delimiter
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_extraction_specs is unset!') unless @field_extraction_specs
      end

      ::Thrift::Struct.generate_accessors self
    end

    # MultiColumnFieldExtractionSpec is used for attribution imports
# where we combine data from multiple columns into one field.
    class MultiColumnFieldExtractionSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIELD_EXTRACTION_SPEC = 1
      COLUMNS = 2
      DELIMITER = 3

      FIELDS = {
        FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'field_extraction_spec', :class => ::Rapleaf::ImporterService::FieldExtractionSpec},
        COLUMNS => {:type => ::Thrift::Types::LIST, :name => 'columns', :element => {:type => ::Thrift::Types::I32}},
        DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'delimiter', :default => %q",", :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_extraction_spec is unset!') unless @field_extraction_spec
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field columns is unset!') unless @columns
      end

      ::Thrift::Struct.generate_accessors self
    end

    class LiverampImportSpec
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIELD_EXTRACTION_SPECS = 1
      FILE_SPEC = 2
      IMPORT_TYPE = 4
      IMPORTWIDE_FIELD_EXTRACTION_SPECS = 5
      FILEWIDE_FIELD_EXTRACTION_SPECS = 6
      AUDIENCE_KEY_SPEC = 7
      MULTI_COLUMN_FIELD_EXTRACTION_SPEC = 8
      DELIMITED_FIELD_EXTRACTION_SPECS = 9
      IMPORT_DATA_TYPE = 10

      FIELDS = {
        FIELD_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'field_extraction_specs', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FieldExtractionSpec}}},
        FILE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'file_spec', :class => ::Rapleaf::ImporterService::FileSpec},
        IMPORT_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_type', :enum_class => ::Rapleaf::ImporterService::ImportType},
        # FieldExtractionSpecs for every identifier in all the files in the import.
        IMPORTWIDE_FIELD_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'importwide_field_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FieldExtractionSpec}, :optional => true},
        # FieldExtractionSpecs for identifiers in specific files in the import.
# The key here is index into file_metadata list.
        FILEWIDE_FIELD_EXTRACTION_SPECS => {:type => ::Thrift::Types::MAP, :name => 'filewide_field_extraction_specs', :key => {:type => ::Thrift::Types::I16}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FieldExtractionSpec}}, :optional => true},
        # Map from an audience's unique key index to the corresponding column.
        AUDIENCE_KEY_SPEC => {:type => ::Thrift::Types::MAP, :name => 'audience_key_spec', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::I32}, :optional => true},
        MULTI_COLUMN_FIELD_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'multi_column_field_extraction_spec', :class => ::Rapleaf::ImporterService::MultiColumnFieldExtractionSpec, :optional => true},
        DELIMITED_FIELD_EXTRACTION_SPECS => {:type => ::Thrift::Types::LIST, :name => 'delimited_field_extraction_specs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::DelimitedFieldExtractionSpec}, :optional => true},
        IMPORT_DATA_TYPE => {:type => ::Thrift::Types::I32, :name => 'import_data_type', :optional => true, :enum_class => ::Rapleaf::ImporterService::ImportDataType}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field field_extraction_specs is unset!') unless @field_extraction_specs
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field file_spec is unset!') unless @file_spec
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_type is unset!') unless @import_type
        unless @import_type.nil? || ::Rapleaf::ImporterService::ImportType::VALID_VALUES.include?(@import_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_type!')
        end
        unless @import_data_type.nil? || ::Rapleaf::ImporterService::ImportDataType::VALID_VALUES.include?(@import_data_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field import_data_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class HintsForAutodetection
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIXED_WIDTH_COLUMN_INFOS = 1
      HEADER_INFOS = 2
      HEADER_NAMES = 3
      IMPORT_WIDE_FIELD_LABEL = 4
      ATTRIBUTION_IMPORT = 5
      ENUM_LIMIT = 6
      MATCH_REPORT_IMPORT = 7
      AUTO_IMPORT_CONFIG_ID = 9
      SEED_LIVERAMP_IMPORT_REQUEST_ID = 10
      CHARACTER_ENCODING = 11
      ENUM_LOWER_LIMIT = 12
      DEFAULT_VALUE_UNIQUENESS = 13
      FILE_FORMAT = 14

      FIELDS = {
        FIXED_WIDTH_COLUMN_INFOS => {:type => ::Thrift::Types::LIST, :name => 'fixed_width_column_infos', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Rapleaf::ImporterService::FixedWidthColumnInfo}, :optional => true},
        HEADER_INFOS => {:type => ::Thrift::Types::LIST, :name => 'header_infos', :element => {:type => ::Thrift::Types::I32, :enum_class => ::Rapleaf::ImporterService::HeaderDetectionHint}, :optional => true},
        HEADER_NAMES => {:type => ::Thrift::Types::LIST, :name => 'header_names', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        IMPORT_WIDE_FIELD_LABEL => {:type => ::Thrift::Types::STRING, :name => 'import_wide_field_label', :optional => true},
        ATTRIBUTION_IMPORT => {:type => ::Thrift::Types::BOOL, :name => 'attribution_import', :optional => true},
        ENUM_LIMIT => {:type => ::Thrift::Types::I16, :name => 'enum_limit', :optional => true},
        MATCH_REPORT_IMPORT => {:type => ::Thrift::Types::BOOL, :name => 'match_report_import', :optional => true},
        AUTO_IMPORT_CONFIG_ID => {:type => ::Thrift::Types::I32, :name => 'auto_import_config_id', :optional => true},
        SEED_LIVERAMP_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'seed_liveramp_import_request_id', :optional => true},
        CHARACTER_ENCODING => {:type => ::Thrift::Types::I32, :name => 'character_encoding', :optional => true, :enum_class => ::Rapleaf::ImporterService::CharacterEncoding},
        ENUM_LOWER_LIMIT => {:type => ::Thrift::Types::I16, :name => 'enum_lower_limit', :optional => true},
        DEFAULT_VALUE_UNIQUENESS => {:type => ::Thrift::Types::I32, :name => 'default_value_uniqueness', :optional => true, :enum_class => ::Rapleaf::Types::NewPersonData::ValueUniqueness},
        FILE_FORMAT => {:type => ::Thrift::Types::STRUCT, :name => 'file_format', :class => ::Rapleaf::ImporterService::FileFormat, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @character_encoding.nil? || ::Rapleaf::ImporterService::CharacterEncoding::VALID_VALUES.include?(@character_encoding)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field character_encoding!')
        end
        unless @default_value_uniqueness.nil? || ::Rapleaf::Types::NewPersonData::ValueUniqueness::VALID_VALUES.include?(@default_value_uniqueness)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field default_value_uniqueness!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ImporterServiceRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1
      UI_IMPORT_SPEC = 2
      PRE_PROCESSED_IMPORT_SPEC = 3
      ERRORS = 4
      IMPORT_NAME = 5
      HINTS = 6

      FIELDS = {
        STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Rapleaf::ImporterService::LiverampImportRequestStatus},
        UI_IMPORT_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'ui_import_spec', :class => ::Rapleaf::ImporterService::LiverampImportSpec, :optional => true},
        PRE_PROCESSED_IMPORT_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'pre_processed_import_spec', :class => ::Rapleaf::ImporterService::LiverampImportSpec, :optional => true},
        ERRORS => {:type => ::Thrift::Types::LIST, :name => 'errors', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        IMPORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'import_name'},
        HINTS => {:type => ::Thrift::Types::STRUCT, :name => 'hints', :class => ::Rapleaf::ImporterService::HintsForAutodetection, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field status is unset!') unless @status
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field import_name is unset!') unless @import_name
        unless @status.nil? || ::Rapleaf::ImporterService::LiverampImportRequestStatus::VALID_VALUES.include?(@status)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BasicImportInfo
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1
      STATUS = 2
      IMPORT_SPEC = 3

      FIELDS = {
        ID => {:type => ::Thrift::Types::I32, :name => 'id'},
        STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Rapleaf::ImporterService::LiverampImportRequestStatus},
        IMPORT_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'import_spec', :class => ::Rapleaf::ImporterService::LiverampImportSpec, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field status is unset!') unless @status
        unless @status.nil? || ::Rapleaf::ImporterService::LiverampImportRequestStatus::VALID_VALUES.include?(@status)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BasicImportInfoQuery
      include ::Thrift::Struct, ::Thrift::Struct_Union
      LIVERAMP_CUSTOMER_ACCOUNT_ID = 1
      INCLUDE_CANCELLED = 2
      LIMIT = 3

      FIELDS = {
        LIVERAMP_CUSTOMER_ACCOUNT_ID => {:type => ::Thrift::Types::I32, :name => 'liveramp_customer_account_id'},
        INCLUDE_CANCELLED => {:type => ::Thrift::Types::BOOL, :name => 'include_cancelled', :optional => true},
        LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field liveramp_customer_account_id is unset!') unless @liveramp_customer_account_id
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InputOutputException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      def initialize(message=nil)
        super()
        self.message = message
      end

      MESSAGE = 1

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IdentifierLackingPrefixError
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PREFIX_MISSING = 1
      RAW_CONTENTS = 2

      FIELDS = {
        PREFIX_MISSING => {:type => ::Thrift::Types::STRING, :name => 'prefix_missing'},
        RAW_CONTENTS => {:type => ::Thrift::Types::STRING, :name => 'raw_contents'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IdentifierPossessesUnexpectedPrefixError
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UNEXPECTED_PREFIX_PRESENT = 1
      RAW_CONTENTS = 2

      FIELDS = {
        UNEXPECTED_PREFIX_PRESENT => {:type => ::Thrift::Types::STRING, :name => 'unexpected_prefix_present'},
        RAW_CONTENTS => {:type => ::Thrift::Types::STRING, :name => 'raw_contents'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ImportValidationResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PERECENTAGE_OF_PINS_ON_HANK = 1
      FIELD_DATA_MISSING_OR_EMPTY = 2
      EXCEPTION_THROWN = 3
      PERCENTAGE_OF_ACTIVE_PINS = 4
      PERCENT_IDENTIFIERS_LACKING_PREFIX = 5
      PERCENT_UNEXPECTED_PREFIXES = 6
      MISSING_EXTRACTION_SPEC = 7
      INVALID_EXTRACTION_SPEC = 8
      DUPLICATE_HEADERS_PRESENT = 9

      FIELDS = {
        PERECENTAGE_OF_PINS_ON_HANK => {:type => ::Thrift::Types::STRING, :name => 'perecentage_of_pins_on_hank', :optional => true},
        FIELD_DATA_MISSING_OR_EMPTY => {:type => ::Thrift::Types::STRING, :name => 'field_data_missing_or_empty', :optional => true},
        EXCEPTION_THROWN => {:type => ::Thrift::Types::STRING, :name => 'exception_thrown', :optional => true},
        PERCENTAGE_OF_ACTIVE_PINS => {:type => ::Thrift::Types::STRING, :name => 'percentage_of_active_pins', :optional => true},
        PERCENT_IDENTIFIERS_LACKING_PREFIX => {:type => ::Thrift::Types::STRING, :name => 'percent_identifiers_lacking_prefix', :optional => true},
        PERCENT_UNEXPECTED_PREFIXES => {:type => ::Thrift::Types::STRING, :name => 'percent_unexpected_prefixes', :optional => true},
        MISSING_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRING, :name => 'missing_extraction_spec', :optional => true},
        INVALID_EXTRACTION_SPEC => {:type => ::Thrift::Types::STRING, :name => 'invalid_extraction_spec', :optional => true},
        DUPLICATE_HEADERS_PRESENT => {:type => ::Thrift::Types::STRING, :name => 'duplicate_headers_present', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ReformatRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      AUTO_IMPORT_REQUEST_ID = 1
      FILE_PATHS = 2
      WORKING_DIR = 3
      DELIMITER = 4
      SECONDARY_DELIMITER = 5
      NUM_ID_COLUMNS = 6

      FIELDS = {
        AUTO_IMPORT_REQUEST_ID => {:type => ::Thrift::Types::I32, :name => 'auto_import_request_id'},
        FILE_PATHS => {:type => ::Thrift::Types::LIST, :name => 'file_paths', :element => {:type => ::Thrift::Types::STRING}},
        WORKING_DIR => {:type => ::Thrift::Types::STRING, :name => 'working_dir'},
        DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'delimiter', :optional => true},
        SECONDARY_DELIMITER => {:type => ::Thrift::Types::STRING, :name => 'secondary_delimiter', :optional => true},
        NUM_ID_COLUMNS => {:type => ::Thrift::Types::I16, :name => 'num_id_columns', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field auto_import_request_id is unset!') unless @auto_import_request_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field file_paths is unset!') unless @file_paths
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field working_dir is unset!') unless @working_dir
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
