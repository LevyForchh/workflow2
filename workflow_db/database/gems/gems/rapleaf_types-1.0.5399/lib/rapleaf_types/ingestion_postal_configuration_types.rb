#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Liveramp
  module Ingestion
    module Identifier
      module Configuration
        class UsSplitZipSpec; end

        class UsZip4Spec; end

        class UsZipSpec < ::Thrift::Union; end

        class UsAddressSpec; end

        class GenericPostcodeSpec; end

        class GenericPostalSpec; end

        class UsPostalSpec; end

        class UkAddressSpec; end

        class UkPostcodeSpec; end

        class UkPostalSpec; end

        class FrAddressSpec; end

        class FrPostcodeSpec; end

        class FrPostalSpec; end

        class PostalSpec < ::Thrift::Union; end

        class UsSplitZipSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ZIP_KEY = 1
          ZIP4_EXT_KEY = 2
          DPC_KEY = 3

          FIELDS = {
            ZIP_KEY => {:type => ::Thrift::Types::STRING, :name => 'zip_key'},
            ZIP4_EXT_KEY => {:type => ::Thrift::Types::STRING, :name => 'zip4_ext_key', :optional => true},
            DPC_KEY => {:type => ::Thrift::Types::STRING, :name => 'dpc_key', :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field zip_key is unset!') unless @zip_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UsZip4Spec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ZIP4_KEY = 1

          FIELDS = {
            ZIP4_KEY => {:type => ::Thrift::Types::STRING, :name => 'zip4_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field zip4_key is unset!') unless @zip4_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UsZipSpec < ::Thrift::Union
          include ::Thrift::Struct_Union
          class << self
            def split_zip(val)
              UsZipSpec.new(:split_zip, val)
            end

            def zip_4(val)
              UsZipSpec.new(:zip_4, val)
            end
          end

          SPLIT_ZIP = 1
          ZIP_4 = 2

          FIELDS = {
            SPLIT_ZIP => {:type => ::Thrift::Types::STRUCT, :name => 'split_zip', :class => ::Liveramp::Ingestion::Identifier::Configuration::UsSplitZipSpec, :optional => true},
            ZIP_4 => {:type => ::Thrift::Types::STRUCT, :name => 'zip_4', :class => ::Liveramp::Ingestion::Identifier::Configuration::UsZip4Spec, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
          end

          ::Thrift::Union.generate_accessors self
        end

        class UsAddressSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          STREET1_KEY = 1
          STREET2_KEY = 2
          CITY_KEY = 3
          STATE_KEY = 4

          FIELDS = {
            STREET1_KEY => {:type => ::Thrift::Types::STRING, :name => 'street1_key'},
            STREET2_KEY => {:type => ::Thrift::Types::STRING, :name => 'street2_key', :optional => true},
            CITY_KEY => {:type => ::Thrift::Types::STRING, :name => 'city_key'},
            STATE_KEY => {:type => ::Thrift::Types::STRING, :name => 'state_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field street1_key is unset!') unless @street1_key
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field city_key is unset!') unless @city_key
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field state_key is unset!') unless @state_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GenericPostcodeSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          POSTCODE_KEY = 1

          FIELDS = {
            POSTCODE_KEY => {:type => ::Thrift::Types::STRING, :name => 'postcode_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field postcode_key is unset!') unless @postcode_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GenericPostalSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UsPostalSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ADDRESS = 1
          ZIP = 2

          FIELDS = {
            ADDRESS => {:type => ::Thrift::Types::STRUCT, :name => 'address', :class => ::Liveramp::Ingestion::Identifier::Configuration::UsAddressSpec},
            ZIP => {:type => ::Thrift::Types::STRUCT, :name => 'zip', :class => ::Liveramp::Ingestion::Identifier::Configuration::UsZipSpec}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field address is unset!') unless @address
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field zip is unset!') unless @zip
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UkAddressSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          STREET1_KEY = 1
          STREET2_KEY = 2
          STREET3_KEY = 3
          STREET4_KEY = 4
          CITY_KEY = 5
          COUNTY_KEY = 6

          FIELDS = {
            STREET1_KEY => {:type => ::Thrift::Types::STRING, :name => 'street1_key'},
            STREET2_KEY => {:type => ::Thrift::Types::STRING, :name => 'street2_key', :optional => true},
            STREET3_KEY => {:type => ::Thrift::Types::STRING, :name => 'street3_key', :optional => true},
            STREET4_KEY => {:type => ::Thrift::Types::STRING, :name => 'street4_key', :optional => true},
            CITY_KEY => {:type => ::Thrift::Types::STRING, :name => 'city_key'},
            COUNTY_KEY => {:type => ::Thrift::Types::STRING, :name => 'county_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field street1_key is unset!') unless @street1_key
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field city_key is unset!') unless @city_key
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field county_key is unset!') unless @county_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UkPostcodeSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          POSTCODE_KEY = 1

          FIELDS = {
            POSTCODE_KEY => {:type => ::Thrift::Types::STRING, :name => 'postcode_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field postcode_key is unset!') unless @postcode_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class UkPostalSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ADDRESS = 1
          POSTCODE = 2

          FIELDS = {
            ADDRESS => {:type => ::Thrift::Types::STRUCT, :name => 'address', :class => ::Liveramp::Ingestion::Identifier::Configuration::UkAddressSpec},
            POSTCODE => {:type => ::Thrift::Types::STRUCT, :name => 'postcode', :class => ::Liveramp::Ingestion::Identifier::Configuration::UkPostcodeSpec}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field address is unset!') unless @address
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field postcode is unset!') unless @postcode
          end

          ::Thrift::Struct.generate_accessors self
        end

        class FrAddressSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          STREET_LINE_KEYS = 1
          CITY_KEY = 2

          FIELDS = {
            STREET_LINE_KEYS => {:type => ::Thrift::Types::LIST, :name => 'street_line_keys', :element => {:type => ::Thrift::Types::STRING}},
            CITY_KEY => {:type => ::Thrift::Types::STRING, :name => 'city_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field street_line_keys is unset!') unless @street_line_keys
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field city_key is unset!') unless @city_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class FrPostcodeSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          POSTCODE_KEY = 1

          FIELDS = {
            POSTCODE_KEY => {:type => ::Thrift::Types::STRING, :name => 'postcode_key'}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field postcode_key is unset!') unless @postcode_key
          end

          ::Thrift::Struct.generate_accessors self
        end

        class FrPostalSpec
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ADDRESS = 1
          POSTCODE = 2

          FIELDS = {
            ADDRESS => {:type => ::Thrift::Types::STRUCT, :name => 'address', :class => ::Liveramp::Ingestion::Identifier::Configuration::FrAddressSpec},
            POSTCODE => {:type => ::Thrift::Types::STRUCT, :name => 'postcode', :class => ::Liveramp::Ingestion::Identifier::Configuration::FrPostcodeSpec}
          }

          def struct_fields; FIELDS; end

          def validate
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field address is unset!') unless @address
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field postcode is unset!') unless @postcode
          end

          ::Thrift::Struct.generate_accessors self
        end

        class PostalSpec < ::Thrift::Union
          include ::Thrift::Struct_Union
          class << self
            def generic(val)
              PostalSpec.new(:generic, val)
            end

            def us(val)
              PostalSpec.new(:us, val)
            end

            def uk(val)
              PostalSpec.new(:uk, val)
            end

            def fr(val)
              PostalSpec.new(:fr, val)
            end
          end

          GENERIC = 1
          US = 2
          UK = 3
          FR = 4

          FIELDS = {
            GENERIC => {:type => ::Thrift::Types::STRUCT, :name => 'generic', :class => ::Liveramp::Ingestion::Identifier::Configuration::GenericPostalSpec, :optional => true},
            US => {:type => ::Thrift::Types::STRUCT, :name => 'us', :class => ::Liveramp::Ingestion::Identifier::Configuration::UsPostalSpec, :optional => true},
            UK => {:type => ::Thrift::Types::STRUCT, :name => 'uk', :class => ::Liveramp::Ingestion::Identifier::Configuration::UkPostalSpec, :optional => true},
            FR => {:type => ::Thrift::Types::STRUCT, :name => 'fr', :class => ::Liveramp::Ingestion::Identifier::Configuration::FrPostalSpec, :optional => true}
          }

          def struct_fields; FIELDS; end

          def validate
            raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
          end

          ::Thrift::Union.generate_accessors self
        end

      end
    end
  end
end
