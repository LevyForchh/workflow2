#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'servile_types'

module Liveramp
  module Types
    module Servile
      module ServileService
        class Client
          include ::Thrift::Client

          def get_request(request_id)
            send_get_request(request_id)
            return recv_get_request()
          end

          def send_get_request(request_id)
            send_message('get_request', Get_request_args, :request_id => request_id)
          end

          def recv_get_request()
            result = receive_message(Get_request_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_request failed: unknown result')
          end

          def get_requests_with_status(status)
            send_get_requests_with_status(status)
            return recv_get_requests_with_status()
          end

          def send_get_requests_with_status(status)
            send_message('get_requests_with_status', Get_requests_with_status_args, :status => status)
          end

          def recv_get_requests_with_status()
            result = receive_message(Get_requests_with_status_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_requests_with_status failed: unknown result')
          end

          def get_requests_with_external_id(external_id)
            send_get_requests_with_external_id(external_id)
            return recv_get_requests_with_external_id()
          end

          def send_get_requests_with_external_id(external_id)
            send_message('get_requests_with_external_id', Get_requests_with_external_id_args, :external_id => external_id)
          end

          def recv_get_requests_with_external_id()
            result = receive_message(Get_requests_with_external_id_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_requests_with_external_id failed: unknown result')
          end

          def get_requests_with_external_ids(application_type, external_ids)
            send_get_requests_with_external_ids(application_type, external_ids)
            return recv_get_requests_with_external_ids()
          end

          def send_get_requests_with_external_ids(application_type, external_ids)
            send_message('get_requests_with_external_ids', Get_requests_with_external_ids_args, :application_type => application_type, :external_ids => external_ids)
          end

          def recv_get_requests_with_external_ids()
            result = receive_message(Get_requests_with_external_ids_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_requests_with_external_ids failed: unknown result')
          end

          def get_error(request_id)
            send_get_error(request_id)
            return recv_get_error()
          end

          def send_get_error(request_id)
            send_message('get_error', Get_error_args, :request_id => request_id)
          end

          def recv_get_error()
            result = receive_message(Get_error_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_error failed: unknown result')
          end

          def get_errors(request_ids)
            send_get_errors(request_ids)
            return recv_get_errors()
          end

          def send_get_errors(request_ids)
            send_message('get_errors', Get_errors_args, :request_ids => request_ids)
          end

          def recv_get_errors()
            result = receive_message(Get_errors_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_errors failed: unknown result')
          end

          def get_status(request_id)
            send_get_status(request_id)
            return recv_get_status()
          end

          def send_get_status(request_id)
            send_message('get_status', Get_status_args, :request_id => request_id)
          end

          def recv_get_status()
            result = receive_message(Get_status_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_status failed: unknown result')
          end

          def reset(request_id)
            send_reset(request_id)
            recv_reset()
          end

          def send_reset(request_id)
            send_message('reset', Reset_args, :request_id => request_id)
          end

          def recv_reset()
            result = receive_message(Reset_result)
            raise result.se unless result.se.nil?
            return
          end

          def reset_requests(request_ids)
            send_reset_requests(request_ids)
            recv_reset_requests()
          end

          def send_reset_requests(request_ids)
            send_message('reset_requests', Reset_requests_args, :request_ids => request_ids)
          end

          def recv_reset_requests()
            result = receive_message(Reset_requests_result)
            raise result.se unless result.se.nil?
            return
          end

          def cancel(request_id)
            send_cancel(request_id)
            recv_cancel()
          end

          def send_cancel(request_id)
            send_message('cancel', Cancel_args, :request_id => request_id)
          end

          def recv_cancel()
            result = receive_message(Cancel_result)
            raise result.se unless result.se.nil?
            return
          end

          def cancel_requests(request_ids)
            send_cancel_requests(request_ids)
            recv_cancel_requests()
          end

          def send_cancel_requests(request_ids)
            send_message('cancel_requests', Cancel_requests_args, :request_ids => request_ids)
          end

          def recv_cancel_requests()
            result = receive_message(Cancel_requests_result)
            raise result.se unless result.se.nil?
            return
          end

          def retrieve_external_id(request_id)
            send_retrieve_external_id(request_id)
            return recv_retrieve_external_id()
          end

          def send_retrieve_external_id(request_id)
            send_message('retrieve_external_id', Retrieve_external_id_args, :request_id => request_id)
          end

          def recv_retrieve_external_id()
            result = receive_message(Retrieve_external_id_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'retrieve_external_id failed: unknown result')
          end

          def retrieve_request_ids(external_id)
            send_retrieve_request_ids(external_id)
            return recv_retrieve_request_ids()
          end

          def send_retrieve_request_ids(external_id)
            send_message('retrieve_request_ids', Retrieve_request_ids_args, :external_id => external_id)
          end

          def recv_retrieve_request_ids()
            result = receive_message(Retrieve_request_ids_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'retrieve_request_ids failed: unknown result')
          end

          def get_request_counts_by_status(statuses)
            send_get_request_counts_by_status(statuses)
            return recv_get_request_counts_by_status()
          end

          def send_get_request_counts_by_status(statuses)
            send_message('get_request_counts_by_status', Get_request_counts_by_status_args, :statuses => statuses)
          end

          def recv_get_request_counts_by_status()
            result = receive_message(Get_request_counts_by_status_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_request_counts_by_status failed: unknown result')
          end

          def get_events(request_id)
            send_get_events(request_id)
            return recv_get_events()
          end

          def send_get_events(request_id)
            send_message('get_events', Get_events_args, :request_id => request_id)
          end

          def recv_get_events()
            result = receive_message(Get_events_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_events failed: unknown result')
          end

          def update_priority(request_id, priority)
            send_update_priority(request_id, priority)
            recv_update_priority()
          end

          def send_update_priority(request_id, priority)
            send_message('update_priority', Update_priority_args, :request_id => request_id, :priority => priority)
          end

          def recv_update_priority()
            result = receive_message(Update_priority_result)
            raise result.se unless result.se.nil?
            return
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_get_request(seqid, iprot, oprot)
            args = read_args(iprot, Get_request_args)
            result = Get_request_result.new()
            begin
              result.success = @handler.get_request(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_request', seqid)
          end

          def process_get_requests_with_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_requests_with_status_args)
            result = Get_requests_with_status_result.new()
            begin
              result.success = @handler.get_requests_with_status(args.status)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_requests_with_status', seqid)
          end

          def process_get_requests_with_external_id(seqid, iprot, oprot)
            args = read_args(iprot, Get_requests_with_external_id_args)
            result = Get_requests_with_external_id_result.new()
            begin
              result.success = @handler.get_requests_with_external_id(args.external_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_requests_with_external_id', seqid)
          end

          def process_get_requests_with_external_ids(seqid, iprot, oprot)
            args = read_args(iprot, Get_requests_with_external_ids_args)
            result = Get_requests_with_external_ids_result.new()
            begin
              result.success = @handler.get_requests_with_external_ids(args.application_type, args.external_ids)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_requests_with_external_ids', seqid)
          end

          def process_get_error(seqid, iprot, oprot)
            args = read_args(iprot, Get_error_args)
            result = Get_error_result.new()
            begin
              result.success = @handler.get_error(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_error', seqid)
          end

          def process_get_errors(seqid, iprot, oprot)
            args = read_args(iprot, Get_errors_args)
            result = Get_errors_result.new()
            begin
              result.success = @handler.get_errors(args.request_ids)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_errors', seqid)
          end

          def process_get_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_status_args)
            result = Get_status_result.new()
            begin
              result.success = @handler.get_status(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_status', seqid)
          end

          def process_reset(seqid, iprot, oprot)
            args = read_args(iprot, Reset_args)
            result = Reset_result.new()
            begin
              @handler.reset(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'reset', seqid)
          end

          def process_reset_requests(seqid, iprot, oprot)
            args = read_args(iprot, Reset_requests_args)
            result = Reset_requests_result.new()
            begin
              @handler.reset_requests(args.request_ids)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'reset_requests', seqid)
          end

          def process_cancel(seqid, iprot, oprot)
            args = read_args(iprot, Cancel_args)
            result = Cancel_result.new()
            begin
              @handler.cancel(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'cancel', seqid)
          end

          def process_cancel_requests(seqid, iprot, oprot)
            args = read_args(iprot, Cancel_requests_args)
            result = Cancel_requests_result.new()
            begin
              @handler.cancel_requests(args.request_ids)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'cancel_requests', seqid)
          end

          def process_retrieve_external_id(seqid, iprot, oprot)
            args = read_args(iprot, Retrieve_external_id_args)
            result = Retrieve_external_id_result.new()
            begin
              result.success = @handler.retrieve_external_id(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'retrieve_external_id', seqid)
          end

          def process_retrieve_request_ids(seqid, iprot, oprot)
            args = read_args(iprot, Retrieve_request_ids_args)
            result = Retrieve_request_ids_result.new()
            begin
              result.success = @handler.retrieve_request_ids(args.external_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'retrieve_request_ids', seqid)
          end

          def process_get_request_counts_by_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_request_counts_by_status_args)
            result = Get_request_counts_by_status_result.new()
            begin
              result.success = @handler.get_request_counts_by_status(args.statuses)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_request_counts_by_status', seqid)
          end

          def process_get_events(seqid, iprot, oprot)
            args = read_args(iprot, Get_events_args)
            result = Get_events_result.new()
            begin
              result.success = @handler.get_events(args.request_id)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'get_events', seqid)
          end

          def process_update_priority(seqid, iprot, oprot)
            args = read_args(iprot, Update_priority_args)
            result = Update_priority_result.new()
            begin
              @handler.update_priority(args.request_id, args.priority)
            rescue ::Liveramp::Types::Servile::ServileException => se
              result.se = se
            end
            write_result(result, oprot, 'update_priority', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Get_request_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_request_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::Servile::Request},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_requests_with_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          STATUS = 1

          FIELDS = {
            STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::Liveramp::Types::Servile::ServiceRequestStatus}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @status.nil? || ::Liveramp::Types::Servile::ServiceRequestStatus::VALID_VALUES.include?(@status)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_requests_with_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Servile::Request}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_requests_with_external_id_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          EXTERNAL_ID = 1

          FIELDS = {
            EXTERNAL_ID => {:type => ::Thrift::Types::STRUCT, :name => 'external_id', :class => ::Liveramp::Types::Servile::ExternalId}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_requests_with_external_id_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Servile::Request}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_requests_with_external_ids_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          APPLICATION_TYPE = 1
          EXTERNAL_IDS = 2

          FIELDS = {
            APPLICATION_TYPE => {:type => ::Thrift::Types::STRING, :name => 'application_type'},
            EXTERNAL_IDS => {:type => ::Thrift::Types::LIST, :name => 'external_ids', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_requests_with_external_ids_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Servile::Request}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_error_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_error_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::Servile::OptionalServileError},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_errors_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_IDS = 1

          FIELDS = {
            REQUEST_IDS => {:type => ::Thrift::Types::SET, :name => 'request_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_errors_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I64}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Servile::ServileError}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Liveramp::Types::Servile::ServiceRequestStatus},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @success.nil? || ::Liveramp::Types::Servile::ServiceRequestStatus::VALID_VALUES.include?(@success)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Reset_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Reset_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SE = 1

          FIELDS = {
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Reset_requests_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_IDS = 1

          FIELDS = {
            REQUEST_IDS => {:type => ::Thrift::Types::SET, :name => 'request_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Reset_requests_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SE = 1

          FIELDS = {
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SE = 1

          FIELDS = {
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_requests_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_IDS = 1

          FIELDS = {
            REQUEST_IDS => {:type => ::Thrift::Types::SET, :name => 'request_ids', :element => {:type => ::Thrift::Types::I64}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Cancel_requests_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SE = 1

          FIELDS = {
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Retrieve_external_id_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Retrieve_external_id_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Liveramp::Types::Servile::ExternalId},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Retrieve_request_ids_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          EXTERNAL_ID = 1

          FIELDS = {
            EXTERNAL_ID => {:type => ::Thrift::Types::STRUCT, :name => 'external_id', :class => ::Liveramp::Types::Servile::ExternalId}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Retrieve_request_ids_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_request_counts_by_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          STATUSES = 1

          FIELDS = {
            STATUSES => {:type => ::Thrift::Types::SET, :name => 'statuses', :element => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::Types::Servile::ServiceRequestStatus}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_request_counts_by_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::Types::Servile::ServiceRequestStatus}, :value => {:type => ::Thrift::Types::I32}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_events_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Get_events_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::Types::Servile::RequestEvent}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_priority_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          REQUEST_ID = 1
          PRIORITY = 2

          FIELDS = {
            REQUEST_ID => {:type => ::Thrift::Types::I64, :name => 'request_id'},
            PRIORITY => {:type => ::Thrift::Types::I32, :name => 'priority', :enum_class => ::Liveramp::Types::Servile::ServiceRequestPriority}
          }

          def struct_fields; FIELDS; end

          def validate
            unless @priority.nil? || ::Liveramp::Types::Servile::ServiceRequestPriority::VALID_VALUES.include?(@priority)
              raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field priority!')
            end
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Update_priority_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SE = 1

          FIELDS = {
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => ::Liveramp::Types::Servile::ServileException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
  end
end
