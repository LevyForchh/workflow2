#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.join File.dirname(__FILE__), 'cost_tracker_types'

module Liveramp
  module CostTracker
    module CostTrackerService
      class Client
        include ::Thrift::Client

        def persist_cost(audience_id, day, app_type, metrics)
          send_persist_cost(audience_id, day, app_type, metrics)
          recv_persist_cost()
        end

        def send_persist_cost(audience_id, day, app_type, metrics)
          send_message('persist_cost', Persist_cost_args, :audience_id => audience_id, :day => day, :app_type => app_type, :metrics => metrics)
        end

        def recv_persist_cost()
          result = receive_message(Persist_cost_result)
          return
        end

        def persist_cost_with_duration(audience_id, day, app_type, metrics, space_duration_in_days)
          send_persist_cost_with_duration(audience_id, day, app_type, metrics, space_duration_in_days)
          recv_persist_cost_with_duration()
        end

        def send_persist_cost_with_duration(audience_id, day, app_type, metrics, space_duration_in_days)
          send_message('persist_cost_with_duration', Persist_cost_with_duration_args, :audience_id => audience_id, :day => day, :app_type => app_type, :metrics => metrics, :space_duration_in_days => space_duration_in_days)
        end

        def recv_persist_cost_with_duration()
          result = receive_message(Persist_cost_with_duration_result)
          return
        end

        def persist_cost_v2(audience_id, day, app_type, metrics)
          send_persist_cost_v2(audience_id, day, app_type, metrics)
          recv_persist_cost_v2()
        end

        def send_persist_cost_v2(audience_id, day, app_type, metrics)
          send_message('persist_cost_v2', Persist_cost_v2_args, :audience_id => audience_id, :day => day, :app_type => app_type, :metrics => metrics)
        end

        def recv_persist_cost_v2()
          result = receive_message(Persist_cost_v2_result)
          return
        end

        def get_cost_app_id(app_type)
          send_get_cost_app_id(app_type)
          return recv_get_cost_app_id()
        end

        def send_get_cost_app_id(app_type)
          send_message('get_cost_app_id', Get_cost_app_id_args, :app_type => app_type)
        end

        def recv_get_cost_app_id()
          result = receive_message(Get_cost_app_id_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cost_app_id failed: unknown result')
        end

        def get_cost_app_name(cost_app_type_id)
          send_get_cost_app_name(cost_app_type_id)
          return recv_get_cost_app_name()
        end

        def send_get_cost_app_name(cost_app_type_id)
          send_message('get_cost_app_name', Get_cost_app_name_args, :cost_app_type_id => cost_app_type_id)
        end

        def recv_get_cost_app_name()
          result = receive_message(Get_cost_app_name_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cost_app_name failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_persist_cost(seqid, iprot, oprot)
          args = read_args(iprot, Persist_cost_args)
          result = Persist_cost_result.new()
          @handler.persist_cost(args.audience_id, args.day, args.app_type, args.metrics)
          write_result(result, oprot, 'persist_cost', seqid)
        end

        def process_persist_cost_with_duration(seqid, iprot, oprot)
          args = read_args(iprot, Persist_cost_with_duration_args)
          result = Persist_cost_with_duration_result.new()
          @handler.persist_cost_with_duration(args.audience_id, args.day, args.app_type, args.metrics, args.space_duration_in_days)
          write_result(result, oprot, 'persist_cost_with_duration', seqid)
        end

        def process_persist_cost_v2(seqid, iprot, oprot)
          args = read_args(iprot, Persist_cost_v2_args)
          result = Persist_cost_v2_result.new()
          @handler.persist_cost_v2(args.audience_id, args.day, args.app_type, args.metrics)
          write_result(result, oprot, 'persist_cost_v2', seqid)
        end

        def process_get_cost_app_id(seqid, iprot, oprot)
          args = read_args(iprot, Get_cost_app_id_args)
          result = Get_cost_app_id_result.new()
          result.success = @handler.get_cost_app_id(args.app_type)
          write_result(result, oprot, 'get_cost_app_id', seqid)
        end

        def process_get_cost_app_name(seqid, iprot, oprot)
          args = read_args(iprot, Get_cost_app_name_args)
          result = Get_cost_app_name_result.new()
          result.success = @handler.get_cost_app_name(args.cost_app_type_id)
          write_result(result, oprot, 'get_cost_app_name', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Persist_cost_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_ID = 10
        DAY = 20
        APP_TYPE = 30
        METRICS = 40

        FIELDS = {
          AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
          DAY => {:type => ::Thrift::Types::I64, :name => 'day'},
          APP_TYPE => {:type => ::Thrift::Types::STRING, :name => 'app_type'},
          METRICS => {:type => ::Thrift::Types::MAP, :name => 'metrics', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::CostTracker::CostMetrics}, :value => {:type => ::Thrift::Types::I64}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Persist_cost_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Persist_cost_with_duration_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_ID = 10
        DAY = 20
        APP_TYPE = 30
        METRICS = 40
        SPACE_DURATION_IN_DAYS = 50

        FIELDS = {
          AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
          DAY => {:type => ::Thrift::Types::I64, :name => 'day'},
          APP_TYPE => {:type => ::Thrift::Types::STRING, :name => 'app_type'},
          METRICS => {:type => ::Thrift::Types::MAP, :name => 'metrics', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::CostTracker::CostMetrics}, :value => {:type => ::Thrift::Types::I64}},
          SPACE_DURATION_IN_DAYS => {:type => ::Thrift::Types::I64, :name => 'space_duration_in_days'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Persist_cost_with_duration_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Persist_cost_v2_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        AUDIENCE_ID = 10
        DAY = 20
        APP_TYPE = 30
        METRICS = 40

        FIELDS = {
          AUDIENCE_ID => {:type => ::Thrift::Types::I64, :name => 'audience_id'},
          DAY => {:type => ::Thrift::Types::I64, :name => 'day'},
          APP_TYPE => {:type => ::Thrift::Types::STRING, :name => 'app_type'},
          METRICS => {:type => ::Thrift::Types::MAP, :name => 'metrics', :key => {:type => ::Thrift::Types::I32, :enum_class => ::Liveramp::CostTracker::CostMetrics}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Liveramp::CostTracker::CostValue}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Persist_cost_v2_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cost_app_id_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        APP_TYPE = 10

        FIELDS = {
          APP_TYPE => {:type => ::Thrift::Types::STRING, :name => 'app_type'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cost_app_id_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cost_app_name_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        COST_APP_TYPE_ID = 10

        FIELDS = {
          COST_APP_TYPE_ID => {:type => ::Thrift::Types::I64, :name => 'cost_app_type_id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cost_app_name_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
